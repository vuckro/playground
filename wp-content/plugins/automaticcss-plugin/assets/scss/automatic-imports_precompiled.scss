// Framework Options
// Accessibility

$option-reduce-motion: on !default;
$option-accessibility-classes: on !default;

// Breakpoints

$option-breakpoint-xxl: off !default;
$option-breakpoint-xs: off !default;

// Color Scheme
$option-prefers-color-scheme: on !default;

// Smooth Scrolling
$option-smooth-scrolling: on !default;

// Contextual Options
// Located in Contextuals

$option-relate-bg-text: on !default;

// Text options
$option-balance-text: off !default;
$option-balance-headings: off !default;

// Frames
$option-frames: on !default;

// Framework Options
$option-backgrounds: on !default; // 576 Lines
$option-buttons: on !default; // 363 Lines
$option-owl: on !default; // 48 Lines
$option-section-padding: on !default; // 356 Lines
$option-overlays: on !default; // 1530 Lines
$option-text-color: on !default; // 168 Lines
$option-basic-text-classes: on !default;
$option-text-larger: on !default; // 132 Lines
$option-link-color: on !default; // 334 Lines
$option-box-shadows: on !default; // 12 Lines
$option-breakouts: on !default; // 36 Lines
$option-variable-grid: on !default;
$option-flex-grids: on !default; // 793 Lines
$option-gaps: on !default; // 224 Lines
$option-flex: on !default; // 224 Lines
$option-width: on !default; // 52 Lines
$option-aspect-ratios: on !default; // 1035 Lines
$option-z-index: on !default; // 200 Lines
$option-columns: on !default; // 479 Lines
$option-marker-colors: on !default; // 168 Lines
$option-status-color-classes: on !default;
$option-deprecated: on !default;

// Platform Support
$option-etch: off !default;
$option-woocommerce: off !default;
$option-oxygen: off !default;
$option-bricks: off !default;
$option-cwicly: off !default;
$option-gutenberg-load-styling-backend: off !default;
$option-gutenberg-enable: $option-gutenberg-load-styling-backend; // Deprecated
$option-generate-press: off !default;
$option-generate-blocks: off !default;
$option-breakdance: off !default;

// Forms Support
$option-forms: off !default;
$option-ws-form: off !default;
$option-fluent-form: off !default;


// Breakpoints
$vp-min: 36 !default;
$vp-max: 128 !default;
$content-width-max: $vp-max;
$content-width-min: $vp-min;
$content-width: $vp-max * 1rem;
$breakpoint-xs: 360px !default;
$breakpoint-s: 480px !default;
$breakpoint-m: 768px !default;
$breakpoint-l: 992px !default;
$breakpoint-xl: 1280px !default;
$breakpoint-xxl: 1440px !default;

$breakpoints: (
  xxl: $breakpoint-xxl,
  xl: $breakpoint-xl,
  l: $breakpoint-l,
  m: $breakpoint-m,
  s: $breakpoint-s,
  xs: $breakpoint-xs,
);

@if $option-breakpoint-xxl == off {
  $breakpoints: map-remove($breakpoints, xxl);
}

@if $option-breakpoint-xs == off {
  $breakpoints: map-remove($breakpoints, xs);
}


// Functions
$clamp-math: calc(1vw - #{$vp-min} / 100 * 1rem);
$vp-delta: calc(#{$vp-max} - #{$vp-min});
$calc-math: calc(100vw - (#{$vp-min} * 1rem) / (#{$vp-max} - #{$vp-min}));
//$auto-grid-math: calc(100vw - (#{$base-space} * 3) * 1rem);

// TURN RAW UNITS INTO REM UNITS

@function append-rem($val) {
  @return $val * 1rem;
}

// TURN RAW UNITS INTO % VALUES

@function percent($val) {
  @return $val * 1%;
}

// TURN RAW UNITS INTO VW

@function vw($val) {
  @return $val * 1vw;
}

// TURN RAW UNITS INTO VH

@function vh($val) {
  @return $val * 1vh;
}

// Exponent Math

@function pow($number, $exponent) {
  $value: 1;

  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  }

  @return $value;
}

@function fluidCalc($text-min, $text-max) {
  $vp-delta: $vp-max - $vp-min;
  $text-delta: $text-max - $text-min;
  $vp-min-rem: $vp-min * 1rem;
  $text-min-rem: $text-min * 1rem;
  @return calc(
    #{$text-min-rem} + (#{$text-delta} * ((100vw - #{$vp-min-rem}) / #{$vp-delta}))
  );
}

@function fluidClamp($min, $max) {
  $slope: ($max - $min) / ($vp-max - $vp-min);
  $intercept: ($min - $slope * $vp-min) * 1rem;
  $slope-vw: $slope * 100;
  $min-rem: $min * 1rem;
  $max-rem: $max * 1rem;
  @return clamp(#{$min-rem}, calc(#{$slope-vw}vw + #{$intercept}), #{$max-rem});
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function fluid($min, $max) {
  // Convert root font size from percentage to pixels (100% = 16px)
  $root-px: (strip-unit($root-font-size) / 100) * 16;

  // Convert to unitless values
  $min-unitless: strip-unit($min);
  $max-unitless: strip-unit($max);
  $vp-min-unitless: strip-unit($vp-min);
  $vp-max-unitless: strip-unit($vp-max);

  $min-rem: $min-unitless / $root-px;
  $max-rem: $max-unitless / $root-px;

  $slope: ($max-rem - $min-rem) / ($vp-max-unitless - $vp-min-unitless);
  $intercept: $min-rem - ($slope * $vp-min-unitless);
  $slope-vw: $slope * 100;

  @return clamp(#{$min-rem}rem, calc(#{$slope-vw}vw + #{$intercept}rem), #{$max-rem}rem);
}

@function fluidClampStop($stop, $min, $max) {
  $slope: ($max - $min) / ($vp-max - $vp-min);
  $intercept: ($min - $slope * $vp-min) * 1rem;
  $slope-vw: $slope * 100;
  $min-rem: $min * 1rem;
  $max-rem: $max * 1rem;
  @return max(
    $stop,
    clamp(#{$min-rem}, calc(#{$slope-vw}vw + #{$intercept}), #{$max-rem})
  );
}

// Pixel to Rem Auto Converter
@function ctr($pixel-value) {
  $raw-root: $root-font-size / 1%;
  $root: $raw-root / 100 * 16;
  @return $pixel-value / $root * 1rem;
}

// Function to parse a CSS string into a map
//
// STEP 1: CREATE A PROPERTY/VALUE STRING
// $your-string: "background: #000; color: #fff; width: 50px; height: 50px;";
//
// STEP 2: GENERATE YOUR MAP
// $your-custom-css-map: parse-css-string($your-string);
//
// STEP 3: USE YOUR MAP
// .your-selector {
//   @each $key, $value in $your-custom-css-map {
//     #{$key}: #{$value};
//   }
// }

// NEED TO CREATE A MIXIN TO HANDLE THE LOOP

@function parse-css-string($string) {
  $map: ();
  $length: str-length($string);
  $start: 1;
  $parsing: true;

  @while $parsing {
    // Find the next colon
    $colon: str-index(str-slice($string, $start), ':');
    @if $colon == null {
      $parsing: false;
    } @else {
      $colon: $colon + $start - 1;

      // Find the next semicolon
      $semicolon: str-index(str-slice($string, $colon), ';');
      @if $semicolon == null {
        $semicolon: $length + 1;
        $parsing: false;
      } @else {
        $semicolon: $semicolon + $colon - 1;
      }

      // Extract and trim key and value
      $key: str-slice($string, $start, $colon - 1);
      $value: str-slice($string, $colon + 1, $semicolon - 1);
      $key: if(str-slice($key, 1, 1) == ' ', str-slice($key, 2), $key);
      $value: if(str-slice($value, 1, 1) == ' ', str-slice($value, 2), $value);

      // Add to map
      $map: map-merge($map, ($key: $value));

      // Move start to next property
      $start: $semicolon + 1;
    }
  }

  @return $map;
}

// END CSS STRING PARSER

// Odd and even numbers list for logic checks
$odd-numbers-list: ();
@for $i from 1 through 99 {
    @if $i % 2 == 1 {
        $odd-numbers-list: append($odd-numbers-list, $i);
    }
}
$even-numbers-list: ();
@for $i from 1 through 99 {
    @if $i % 2 == 0 and $i != 2 {
        $even-numbers-list: append($even-numbers-list, $i);
    }
}


// Import Colors
// Lightness Defaults
$default-hover: 85%;
$default-ultra-light: 97%;
$default-light: 85%;
$default-semi-light: 60%;
$default-semi-dark: 40%;
$default-dark: 25%;
$default-ultra-dark: 5%;

// Import Deprecated
$option-comp-colors: off !default;
$option-medium-shade: off !default;
// shade Options
$option-shade-clr: on !default;
$option-shade-main-trans: on !default;
$option-shade-light-trans: on !default;
$option-shade-dark-trans: on !default;
$option-shade-ultra-dark-trans: on !default;

// shade Vars
$shade-hex: #e56c70 !default;
$shade-r: 229 !default;
$shade-g: 108 !default;
$shade-b: 112 !default;
$shade-h: 358 !default;
$shade-s: 70% !default;
$shade-l: 66% !default;
$shade-hover-h: 358 !default;
$shade-hover-s: 70% !default;
$shade-hover-l: 1.15 !default;
$shade-ultra-light-h: 358 !default;
$shade-ultra-light-s: 70% !default;
$shade-ultra-light-l: 95% !default;
$shade-light-h: 358 !default;
$shade-light-s: 70% !default;
$shade-light-l: 85% !default;
$shade-medium-h: 358 !default;
$shade-medium-s: 70% !default;
$shade-medium-l: 50% !default;
$shade-dark-h: 358 !default;
$shade-dark-s: 70% !default;
$shade-dark-l: 25% !default;
$shade-ultra-dark-h: 358 !default;
$shade-ultra-dark-s: 70% !default;
$shade-ultra-dark-l: 10% !default;
// Added in 3.0
$shade-semi-light-h: 358 !default;
$shade-semi-light-s: 70% !default;
$shade-semi-light-l: 60% !default;
$shade-semi-dark-h: 358 !default;
$shade-semi-dark-s: 70% !default;
$shade-semi-dark-l: 40% !default;

// Shade Color Map
$color-shade:(); // Initialize Map
@if $option-shade-clr == on {
  $color-shade: (
    "main": (
      "shade": $shade-hex,
      "shade-hover": hsl($shade-hover-h, $shade-hover-s, $shade-hover-l),
      "shade-ultra-light": hsl($shade-ultra-light-h, $shade-ultra-light-s, $shade-ultra-light-l),
      "shade-light": hsl($shade-light-h, $shade-light-s, $shade-light-l),
      "shade-semi-light": hsl($shade-semi-light-h, $shade-semi-light-s, $shade-semi-light-l),
      "shade-semi-dark": hsl($shade-semi-dark-h, $shade-semi-dark-s, $shade-semi-dark-l),
      "shade-dark": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l),
      "shade-ultra-dark": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l),
    ),
    "trans": (
      "shade-trans-10": rgba($shade-hex, .1),
      "shade-trans-20": rgba($shade-hex, .2),
      "shade-trans-30": rgba($shade-hex, .3),
      "shade-trans-40": rgba($shade-hex, .4),
      "shade-trans-50": rgba($shade-hex, .5),
      "shade-trans-60": rgba($shade-hex, .6),
      "shade-trans-70": rgba($shade-hex, .7),
      "shade-trans-80": rgba($shade-hex, .8),
      "shade-trans-90": rgba($shade-hex, .9),
    ),
    "light-trans": (
      "shade-light-trans-10": hsl($shade-light-h, $shade-light-s, $shade-light-l, .1),
      "shade-light-trans-20": hsl($shade-light-h, $shade-light-s, $shade-light-l, .2),
      "shade-light-trans-30": hsl($shade-light-h, $shade-light-s, $shade-light-l, .3),
      "shade-light-trans-40": hsl($shade-light-h, $shade-light-s, $shade-light-l, .4),
      "shade-light-trans-50": hsl($shade-light-h, $shade-light-s, $shade-light-l, .5),
      "shade-light-trans-60": hsl($shade-light-h, $shade-light-s, $shade-light-l, .6),
      "shade-light-trans-70": hsl($shade-light-h, $shade-light-s, $shade-light-l, .7),
      "shade-light-trans-80": hsl($shade-light-h, $shade-light-s, $shade-light-l, .8),
      "shade-light-trans-90": hsl($shade-light-h, $shade-light-s, $shade-light-l, .9),
    ),
    "dark-trans": (
      "shade-dark-trans-10": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .1),
      "shade-dark-trans-20": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .2),
      "shade-dark-trans-30": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .3),
      "shade-dark-trans-40": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .4),
      "shade-dark-trans-50": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .5),
      "shade-dark-trans-60": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .6),
      "shade-dark-trans-70": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .7),
      "shade-dark-trans-80": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .8),
      "shade-dark-trans-90": hsl($shade-dark-h, $shade-dark-s, $shade-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "shade-ultra-dark-trans-10": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .1),
      "shade-ultra-dark-trans-20": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .2),
      "shade-ultra-dark-trans-30": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .3),
      "shade-ultra-dark-trans-40": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .4),
      "shade-ultra-dark-trans-50": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .5),
      "shade-ultra-dark-trans-60": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .6),
      "shade-ultra-dark-trans-70": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .7),
      "shade-ultra-dark-trans-80": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .8),
      "shade-ultra-dark-trans-90": hsl($shade-ultra-dark-h, $shade-ultra-dark-s, $shade-ultra-dark-l, .9),
    ),
    "partials": (
      "shade-hex": $shade-hex,
        "shade-hsl": $shade-h $shade-s $shade-l,
        "shade-rgb": $shade-r $shade-g $shade-b,
        "shade-r": $shade-r,
        "shade-g": $shade-g,
        "shade-b": $shade-b,
        "shade-h": $shade-h,
        "shade-s": $shade-s,
        "shade-l": $shade-l,
        "shade-hover-h": $shade-hover-h,
        "shade-hover-s": $shade-hover-s,
        "shade-hover-l": $shade-hover-l,
        "shade-ultra-light-h": $shade-ultra-light-h,
        "shade-ultra-light-s": $shade-ultra-light-s,
        "shade-ultra-light-l": $shade-ultra-light-l,
        "shade-light-h": $shade-light-h,
        "shade-light-s": $shade-light-s,
        "shade-light-l": $shade-light-l,
        "shade-semi-light-h": $shade-semi-light-h,
        "shade-semi-light-s": $shade-semi-light-s,
        "shade-semi-light-l": $shade-semi-light-l,
        "shade-semi-dark-h": $shade-semi-dark-h,
        "shade-semi-dark-s": $shade-semi-dark-s,
        "shade-semi-dark-l": $shade-semi-dark-l,
        "shade-dark-h": $shade-dark-h,
        "shade-dark-s": $shade-dark-s,
        "shade-dark-l": $shade-dark-l,
        "shade-ultra-dark-h": $shade-ultra-dark-h,
        "shade-ultra-dark-s": $shade-ultra-dark-s,
        "shade-ultra-dark-l": $shade-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-shade-main-trans == off {
    $color-shade: map-remove($color-shade, "trans");
  }
  @if $option-shade-light-trans == off {
    $color-shade: map-remove($color-shade, "light-trans");
  }
  @if $option-shade-dark-trans == off {
    $color-shade: map-remove($color-shade, "dark-trans");
  }
  @if $option-shade-ultra-dark-trans == off {
    $color-shade: map-remove($color-shade, "ultra-dark-trans");
  }

}

@if $option-shade-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-shade: map-merge($color-shade, (
      "main": map-merge(map-get($color-shade, "main"), (
        "shade-comp": hsl($shade-h + 180, $shade-s, $shade-l)
      )),
      "partials": map-merge(map-get($color-shade, "partials"), (
        "shade-comp-h": $shade-h + 180
      ))
    ));
  }
  // Add medium shade back if enabled
  @if $option-medium-shade == on {
    $color-shade: map-merge($color-shade, (
      "main": map-merge(map-get($color-shade, "main"), (
        "shade-medium": hsl($shade-medium-h, $shade-medium-s, $shade-medium-l)
      )),
      "partials": map-merge(map-get($color-shade, "partials"), (
        "shade-medium-h": $shade-medium-h,
        "shade-medium-s": $shade-medium-s,
        "shade-medium-l": $shade-medium-l
      ))
    ));
  }
}
// shade Options
$option-shade-clr-alt: off !default;

// shade Alt Vars
$shade-alt-hex: #e56c70 !default;
$shade-r-alt: 229 !default;
$shade-g-alt: 108 !default;
$shade-b-alt: 112 !default;
$shade-h-alt: 358 !default;
$shade-s-alt: 70% !default;
$shade-l-alt: 66% !default;
$shade-hover-h-alt: 358 !default;
$shade-hover-s-alt: 70% !default;
$shade-hover-l-alt: 1.15 !default;
$shade-ultra-light-h-alt: 358 !default;
$shade-ultra-light-s-alt: 70% !default;
$shade-ultra-light-l-alt: 95% !default;
$shade-light-h-alt: 358 !default;
$shade-light-s-alt: 70% !default;
$shade-light-l-alt: 85% !default;
$shade-medium-h-alt: 358 !default;
$shade-medium-s-alt: 70% !default;
$shade-medium-l-alt: 50% !default;
$shade-dark-h-alt: 358 !default;
$shade-dark-s-alt: 70% !default;
$shade-dark-l-alt: 25% !default;
$shade-ultra-dark-h-alt: 358 !default;
$shade-ultra-dark-s-alt: 70% !default;
$shade-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$shade-semi-light-h-alt: 358 !default;
$shade-semi-light-s-alt: 70% !default;
$shade-semi-light-l-alt: 60% !default;
$shade-semi-dark-h-alt: 358 !default;
$shade-semi-dark-s-alt: 70% !default;
$shade-semi-dark-l-alt: 40% !default;

// Shade Alt Color Map
$color-shade-alt:(); // Initialize Map
@if $option-shade-clr-alt == on and $option-shade-clr == on {
  $color-shade-alt: (
    "main": (
      "shade": $shade-alt-hex,
      "shade-hover": hsl($shade-hover-h-alt, $shade-hover-s-alt, $shade-hover-l-alt),
      "shade-ultra-light": hsl($shade-ultra-light-h-alt, $shade-ultra-light-s-alt, $shade-ultra-light-l-alt),
      "shade-light": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt),
      "shade-semi-light": hsl($shade-semi-light-h-alt, $shade-semi-light-s-alt, $shade-semi-light-l-alt),
      "shade-semi-dark": hsl($shade-semi-dark-h-alt, $shade-semi-dark-s-alt, $shade-semi-dark-l-alt),
      "shade-dark": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt),
      "shade-ultra-dark": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt),
      "shade-comp": hsl($shade-h-alt + 180, $shade-s-alt, $shade-l-alt),
    ),
    "trans": (
      "shade-trans-10": rgba($shade-alt-hex, .1),
      "shade-trans-20": rgba($shade-alt-hex, .2),
      "shade-trans-30": rgba($shade-alt-hex, .3),
      "shade-trans-40": rgba($shade-alt-hex, .4),
      "shade-trans-50": rgba($shade-alt-hex, .5),
      "shade-trans-60": rgba($shade-alt-hex, .6),
      "shade-trans-70": rgba($shade-alt-hex, .7),
      "shade-trans-80": rgba($shade-alt-hex, .8),
      "shade-trans-90": rgba($shade-alt-hex, .9),
    ),
    "light-trans": (
      "shade-light-trans-10": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .1),
      "shade-light-trans-20": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .2),
      "shade-light-trans-30": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .3),
      "shade-light-trans-40": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .4),
      "shade-light-trans-50": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .5),
      "shade-light-trans-60": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .6),
      "shade-light-trans-70": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .7),
      "shade-light-trans-80": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .8),
      "shade-light-trans-90": hsl($shade-light-h-alt, $shade-light-s-alt, $shade-light-l-alt, .9),
    ),
    "dark-trans": (
      "shade-dark-trans-10": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .1),
      "shade-dark-trans-20": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .2),
      "shade-dark-trans-30": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .3),
      "shade-dark-trans-40": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .4),
      "shade-dark-trans-50": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .5),
      "shade-dark-trans-60": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .6),
      "shade-dark-trans-70": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .7),
      "shade-dark-trans-80": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .8),
      "shade-dark-trans-90": hsl($shade-dark-h-alt, $shade-dark-s-alt, $shade-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "shade-ultra-dark-trans-10": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .1),
      "shade-ultra-dark-trans-20": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .2),
      "shade-ultra-dark-trans-30": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .3),
      "shade-ultra-dark-trans-40": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .4),
      "shade-ultra-dark-trans-50": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .5),
      "shade-ultra-dark-trans-60": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .6),
      "shade-ultra-dark-trans-70": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .7),
      "shade-ultra-dark-trans-80": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .8),
      "shade-ultra-dark-trans-90": hsl($shade-ultra-dark-h-alt, $shade-ultra-dark-s-alt, $shade-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "shade-hex": $shade-alt-hex,
        "shade-hsl": $shade-h $shade-s $shade-l-alt,
        "shade-rgb": $shade-r $shade-g $shade-b-alt,
        "shade-r": $shade-r-alt,
        "shade-g": $shade-g-alt,
        "shade-b": $shade-b-alt,
        "shade-h": $shade-h-alt,
        "shade-s": $shade-s-alt,
        "shade-l": $shade-l-alt,
        "shade-hover-h": $shade-hover-h-alt,
        "shade-hover-s": $shade-hover-s-alt,
        "shade-hover-l": $shade-hover-l-alt,
        "shade-ultra-light-h": $shade-ultra-light-h-alt,
        "shade-ultra-light-s": $shade-ultra-light-s-alt,
        "shade-ultra-light-l": $shade-ultra-light-l-alt,
        "shade-light-h": $shade-light-h-alt,
        "shade-light-s": $shade-light-s-alt,
        "shade-light-l": $shade-light-l-alt,
        "shade-semi-light-h": $shade-semi-light-h-alt,
        "shade-semi-light-s": $shade-semi-light-s-alt,
        "shade-semi-light-l": $shade-semi-light-l-alt,
        "shade-semi-dark-h": $shade-semi-dark-h-alt,
        "shade-semi-dark-s": $shade-semi-dark-s-alt,
        "shade-semi-dark-l": $shade-semi-dark-l-alt,
        "shade-dark-h": $shade-dark-h-alt,
        "shade-dark-s": $shade-dark-s-alt,
        "shade-dark-l": $shade-dark-l-alt,
        "shade-ultra-dark-h": $shade-ultra-dark-h-alt,
        "shade-ultra-dark-s": $shade-ultra-dark-s-alt,
        "shade-ultra-dark-l": $shade-ultra-dark-l-alt,
        "shade-comp-h": $shade-h-alt + 180,
    ),
  );
}
// Handle deprecated color options
@if $option-shade-clr-alt == on and $option-shade-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-shade-alt: map-merge($color-shade-alt, (
      "main": map-merge(map-get($color-shade-alt, "main"), (
        "shade-medium": hsl($shade-medium-h-alt, $shade-medium-s-alt, $shade-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-shade-alt, "partials"), (
        "shade-medium-h": $shade-medium-h-alt,
        "shade-medium-s": $shade-medium-s-alt,
        "shade-medium-l": $shade-medium-l-alt
      ))
    ));
  }
}
// Action Options
$option-action-clr: on !default;
$option-action-main-trans: on !default;
$option-action-light-trans: on !default;
$option-action-dark-trans: on !default;
$option-action-ultra-dark-trans: on !default;

// Action Vars
$action-hex: #e56c70 !default;
$action-r: 229 !default;
$action-g: 108 !default;
$action-b: 112 !default;
$action-h: 358 !default;
$action-s: 70% !default;
$action-l: 66% !default;
$action-hover-h: 358 !default;
$action-hover-s: 70% !default;
$action-hover-l: 80% !default;
$action-ultra-light-h: 358 !default;
$action-ultra-light-s: 70% !default;
$action-ultra-light-l: 95% !default;
$action-light-h: 358 !default;
$action-light-s: 70% !default;
$action-light-l: 85% !default;
$action-medium-h: 358 !default;
$action-medium-s: 70% !default;
$action-medium-l: 50% !default;
$action-dark-h: 358 !default;
$action-dark-s: 70% !default;
$action-dark-l: 25% !default;
$action-ultra-dark-h: 358 !default;
$action-ultra-dark-s: 70% !default;
$action-ultra-dark-l: 10% !default;

// Added in 3.0
$action-semi-light-h: 358 !default;
$action-semi-light-s: 70% !default;
$action-semi-light-l: 60% !default;
$action-semi-dark-h: 358 !default;
$action-semi-dark-s: 70% !default;
$action-semi-dark-l: 40% !default;

// Action Color Map
$color-action:(); // Initialize Map
@if $option-action-clr == on {
  $color-action: (
    "main": (
      "action": $action-hex,
      "action-hover": hsl($action-hover-h, $action-hover-s, $action-hover-l),
      "action-ultra-light": hsl($action-ultra-light-h, $action-ultra-light-s, $action-ultra-light-l),
      "action-light": hsl($action-light-h, $action-light-s, $action-light-l),
      "action-semi-light": hsl($action-semi-light-h, $action-semi-light-s, $action-semi-light-l),
      "action-semi-dark": hsl($action-semi-dark-h, $action-semi-dark-s, $action-semi-dark-l),
      "action-dark": hsl($action-dark-h, $action-dark-s, $action-dark-l),
      "action-ultra-dark": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l),
    ),
    "trans": (
      "action-trans-10": rgba($action-hex, .1),
      "action-trans-20": rgba($action-hex, .2),
      "action-trans-30": rgba($action-hex, .3),
      "action-trans-40": rgba($action-hex, .4),
      "action-trans-50": rgba($action-hex, .5),
      "action-trans-60": rgba($action-hex, .6),
      "action-trans-70": rgba($action-hex, .7),
      "action-trans-80": rgba($action-hex, .8),
      "action-trans-90": rgba($action-hex, .9),
    ),
    "light-trans": (
      "action-light-trans-10": hsl($action-light-h, $action-light-s, $action-light-l, .1),
      "action-light-trans-20": hsl($action-light-h, $action-light-s, $action-light-l, .2),
      "action-light-trans-30": hsl($action-light-h, $action-light-s, $action-light-l, .3),
      "action-light-trans-40": hsl($action-light-h, $action-light-s, $action-light-l, .4),
      "action-light-trans-50": hsl($action-light-h, $action-light-s, $action-light-l, .5),
      "action-light-trans-60": hsl($action-light-h, $action-light-s, $action-light-l, .6),
      "action-light-trans-70": hsl($action-light-h, $action-light-s, $action-light-l, .7),
      "action-light-trans-80": hsl($action-light-h, $action-light-s, $action-light-l, .8),
      "action-light-trans-90": hsl($action-light-h, $action-light-s, $action-light-l, .9),
    ),
    "dark-trans": (
      "action-dark-trans-10": hsl($action-dark-h, $action-dark-s, $action-dark-l, .1),
      "action-dark-trans-20": hsl($action-dark-h, $action-dark-s, $action-dark-l, .2),
      "action-dark-trans-30": hsl($action-dark-h, $action-dark-s, $action-dark-l, .3),
      "action-dark-trans-40": hsl($action-dark-h, $action-dark-s, $action-dark-l, .4),
      "action-dark-trans-50": hsl($action-dark-h, $action-dark-s, $action-dark-l, .5),
      "action-dark-trans-60": hsl($action-dark-h, $action-dark-s, $action-dark-l, .6),
      "action-dark-trans-70": hsl($action-dark-h, $action-dark-s, $action-dark-l, .7),
      "action-dark-trans-80": hsl($action-dark-h, $action-dark-s, $action-dark-l, .8),
      "action-dark-trans-90": hsl($action-dark-h, $action-dark-s, $action-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "action-ultra-dark-trans-10": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .1),
      "action-ultra-dark-trans-20": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .2),
      "action-ultra-dark-trans-30": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .3),
      "action-ultra-dark-trans-40": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .4),
      "action-ultra-dark-trans-50": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .5),
      "action-ultra-dark-trans-60": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .6),
      "action-ultra-dark-trans-70": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .7),
      "action-ultra-dark-trans-80": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .8),
      "action-ultra-dark-trans-90": hsl($action-ultra-dark-h, $action-ultra-dark-s, $action-ultra-dark-l, .9),
    ),
    "partials": (
      "action-hex": $action-hex,
        "action-hsl": $action-h $action-s $action-l,
        "action-rgb": $action-r $action-g $action-b,
        "action-r": $action-r,
        "action-g": $action-g,
        "action-b": $action-b,
        "action-h": $action-h,
        "action-s": $action-s,
        "action-l": $action-l,
        "action-hover-h": $action-hover-h,
        "action-hover-s": $action-hover-s,
        "action-hover-l": $action-hover-l,
        "action-ultra-light-h": $action-ultra-light-h,
        "action-ultra-light-s": $action-ultra-light-s,
        "action-ultra-light-l": $action-ultra-light-l,
        "action-light-h": $action-light-h,
        "action-light-s": $action-light-s,
        "action-light-l": $action-light-l,
        "action-semi-light-h": $action-semi-light-h,
        "action-semi-light-s": $action-semi-light-s,
        "action-semi-light-l": $action-semi-light-l,
        "action-semi-dark-h": $action-semi-dark-h,
        "action-semi-dark-s": $action-semi-dark-s,
        "action-semi-dark-l": $action-semi-dark-l,
        "action-dark-h": $action-dark-h,
        "action-dark-s": $action-dark-s,
        "action-dark-l": $action-dark-l,
        "action-ultra-dark-h": $action-ultra-dark-h,
        "action-ultra-dark-s": $action-ultra-dark-s,
        "action-ultra-dark-l": $action-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-action-main-trans == off {
    $color-action: map-remove($color-action, "trans");
  }
  @if $option-action-light-trans == off {
    $color-action: map-remove($color-action, "light-trans");
  }
  @if $option-action-dark-trans == off {
    $color-action: map-remove($color-action, "dark-trans");
  }
  @if $option-action-ultra-dark-trans == off {
    $color-action: map-remove($color-action, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-action-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-action: map-merge($color-action, (
      "main": map-merge(map-get($color-action, "main"), (
        "action-comp": hsl($action-h + 180, $action-s, $action-l)
      )),
      "partials": map-merge(map-get($color-action, "partials"), (
        "action-comp-h": $action-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-action: map-merge($color-action, (
      "main": map-merge(map-get($color-action, "main"), (
        "action-medium": hsl($action-medium-h, $action-medium-s, $action-medium-l)
      )),
      "partials": map-merge(map-get($color-action, "partials"), (
        "action-medium-h": $action-medium-h,
        "action-medium-s": $action-medium-s,
        "action-medium-l": $action-medium-l
      ))
    ));
  }
}
// Action Options
$option-action-clr-alt: off !default;

// Action Alt Vars
$action-alt-hex: #e56c70 !default;
$action-r-alt: 229 !default;
$action-g-alt: 108 !default;
$action-b-alt: 112 !default;
$action-h-alt: 358 !default;
$action-s-alt: 70% !default;
$action-l-alt: 66% !default;
$action-hover-h-alt: 358 !default;
$action-hover-s-alt: 70% !default;
$action-hover-l-alt: 1.15 !default;
$action-ultra-light-h-alt: 358 !default;
$action-ultra-light-s-alt: 70% !default;
$action-ultra-light-l-alt: 95% !default;
$action-light-h-alt: 358 !default;
$action-light-s-alt: 70% !default;
$action-light-l-alt: 85% !default;
$action-medium-h-alt: 358 !default;
$action-medium-s-alt: 70% !default;
$action-medium-l-alt: 50% !default;
$action-dark-h-alt: 358 !default;
$action-dark-s-alt: 70% !default;
$action-dark-l-alt: 25% !default;
$action-ultra-dark-h-alt: 358 !default;
$action-ultra-dark-s-alt: 70% !default;
$action-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$action-semi-light-h-alt: 358 !default;
$action-semi-light-s-alt: 70% !default;
$action-semi-light-l-alt: 60% !default;
$action-semi-dark-h-alt: 358 !default;
$action-semi-dark-s-alt: 70% !default;
$action-semi-dark-l-alt: 40% !default;

// Action Alt Color Map
$color-action-alt:(); // Initialize Map
@if $option-action-clr-alt == on and $option-action-clr == on {
  $color-action-alt: (
    "main": (
      "action": $action-alt-hex,
      "action-hover": hsl($action-hover-h-alt, $action-hover-s-alt, $action-hover-l-alt),
      "action-ultra-light": hsl($action-ultra-light-h-alt, $action-ultra-light-s-alt, $action-ultra-light-l-alt),
      "action-light": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt),
      "action-semi-light": hsl($action-semi-light-h-alt, $action-semi-light-s-alt, $action-semi-light-l-alt),
      "action-semi-dark": hsl($action-semi-dark-h-alt, $action-semi-dark-s-alt, $action-semi-dark-l-alt),
      "action-dark": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt),
      "action-ultra-dark": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt),
      "action-comp": hsl($action-h-alt + 180, $action-s-alt, $action-l-alt),
    ),
    "trans": (
      "action-trans-10": rgba($action-alt-hex, .1),
      "action-trans-20": rgba($action-alt-hex, .2),
      "action-trans-30": rgba($action-alt-hex, .3),
      "action-trans-40": rgba($action-alt-hex, .4),
      "action-trans-50": rgba($action-alt-hex, .5),
      "action-trans-60": rgba($action-alt-hex, .6),
      "action-trans-70": rgba($action-alt-hex, .7),
      "action-trans-80": rgba($action-alt-hex, .8),
      "action-trans-90": rgba($action-alt-hex, .9),
    ),
    "light-trans": (
      "action-light-trans-10": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .1),
      "action-light-trans-20": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .2),
      "action-light-trans-30": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .3),
      "action-light-trans-40": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .4),
      "action-light-trans-50": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .5),
      "action-light-trans-60": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .6),
      "action-light-trans-70": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .7),
      "action-light-trans-80": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .8),
      "action-light-trans-90": hsl($action-light-h-alt, $action-light-s-alt, $action-light-l-alt, .9),
    ),
    "dark-trans": (
      "action-dark-trans-10": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .1),
      "action-dark-trans-20": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .2),
      "action-dark-trans-30": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .3),
      "action-dark-trans-40": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .4),
      "action-dark-trans-50": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .5),
      "action-dark-trans-60": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .6),
      "action-dark-trans-70": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .7),
      "action-dark-trans-80": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .8),
      "action-dark-trans-90": hsl($action-dark-h-alt, $action-dark-s-alt, $action-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "action-ultra-dark-trans-10": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .1),
      "action-ultra-dark-trans-20": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .2),
      "action-ultra-dark-trans-30": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .3),
      "action-ultra-dark-trans-40": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .4),
      "action-ultra-dark-trans-50": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .5),
      "action-ultra-dark-trans-60": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .6),
      "action-ultra-dark-trans-70": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .7),
      "action-ultra-dark-trans-80": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .8),
      "action-ultra-dark-trans-90": hsl($action-ultra-dark-h-alt, $action-ultra-dark-s-alt, $action-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "action-hex": $action-alt-hex,
        "action-hsl": $action-h $action-s $action-l-alt,
        "action-rgb": $action-r $action-g $action-b-alt,
        "action-r": $action-r-alt,
        "action-g": $action-g-alt,
        "action-b": $action-b-alt,
        "action-h": $action-h-alt,
        "action-s": $action-s-alt,
        "action-l": $action-l-alt,
        "action-hover-h": $action-hover-h-alt,
        "action-hover-s": $action-hover-s-alt,
        "action-hover-l": $action-hover-l-alt,
        "action-ultra-light-h": $action-ultra-light-h-alt,
        "action-ultra-light-s": $action-ultra-light-s-alt,
        "action-ultra-light-l": $action-ultra-light-l-alt,
        "action-light-h": $action-light-h-alt,
        "action-light-s": $action-light-s-alt,
        "action-light-l": $action-light-l-alt,
        "action-semi-light-h": $action-semi-light-h-alt,
        "action-semi-light-s": $action-semi-light-s-alt,
        "action-semi-light-l": $action-semi-light-l-alt,
        "action-semi-dark-h": $action-semi-dark-h-alt,
        "action-semi-dark-s": $action-semi-dark-s-alt,
        "action-semi-dark-l": $action-semi-dark-l-alt,
        "action-dark-h": $action-dark-h-alt,
        "action-dark-s": $action-dark-s-alt,
        "action-dark-l": $action-dark-l-alt,
        "action-ultra-dark-h": $action-ultra-dark-h-alt,
        "action-ultra-dark-s": $action-ultra-dark-s-alt,
        "action-ultra-dark-l": $action-ultra-dark-l-alt,
        "action-comp-h": $action-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-action-clr-alt == on and $option-action-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-action-alt: map-merge($color-action-alt, (
      "main": map-merge(map-get($color-action-alt, "main"), (
        "action-medium": hsl($action-medium-h-alt, $action-medium-s-alt, $action-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-action-alt, "partials"), (
        "action-medium-h": $action-medium-h-alt,
        "action-medium-s": $action-medium-s-alt,
        "action-medium-l": $action-medium-l-alt
      ))
    ));
  }
}


// Import Main Colors
// primary Options
$option-primary-clr: on !default;
$option-primary-main-trans: on !default;
$option-primary-light-trans: on !default;
$option-primary-dark-trans: on !default;
$option-primary-ultra-dark-trans: on !default;

// primary Vars
$primary-hex: #e56c70 !default;
$primary-r: 229 !default;
$primary-g: 108 !default;
$primary-b: 112 !default;
$primary-h: 358 !default;
$primary-s: 70% !default;
$primary-l: 66% !default;
$primary-hover-h: 358 !default;
$primary-hover-s: 70% !default;
$primary-hover-l: 1.15 !default;
$primary-ultra-light-h: 358 !default;
$primary-ultra-light-s: 70% !default;
$primary-ultra-light-l: 95% !default;
$primary-light-h: 358 !default;
$primary-light-s: 70% !default;
$primary-light-l: 85% !default;
$primary-medium-h: 358 !default;
$primary-medium-s: 70% !default;
$primary-medium-l: 50% !default;
$primary-dark-h: 358 !default;
$primary-dark-s: 70% !default;
$primary-dark-l: 25% !default;
$primary-ultra-dark-h: 358 !default;
$primary-ultra-dark-s: 70% !default;
$primary-ultra-dark-l: 10% !default;
// Added in 3.0
$primary-semi-light-h: 358 !default;
$primary-semi-light-s: 70% !default;
$primary-semi-light-l: 60% !default;
$primary-semi-dark-h: 358 !default;
$primary-semi-dark-s: 70% !default;
$primary-semi-dark-l: 40% !default;

// Primary Color Map
$color-primary:(); // Initialize Map
@if $option-primary-clr == on {
  $color-primary: (
    "main": (
      "primary": $primary-hex,
      "primary-hover": hsl($primary-hover-h, $primary-hover-s, $primary-hover-l),
      "primary-ultra-light": hsl($primary-ultra-light-h, $primary-ultra-light-s, $primary-ultra-light-l),
      "primary-light": hsl($primary-light-h, $primary-light-s, $primary-light-l),
      "primary-semi-light": hsl($primary-semi-light-h, $primary-semi-light-s, $primary-semi-light-l),
      "primary-semi-dark": hsl($primary-semi-dark-h, $primary-semi-dark-s, $primary-semi-dark-l),
      "primary-dark": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l),
      "primary-ultra-dark": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l),
    ),
    "trans": (
      "primary-trans-10": rgba($primary-hex, .1),
      "primary-trans-20": rgba($primary-hex, .2),
      "primary-trans-30": rgba($primary-hex, .3),
      "primary-trans-40": rgba($primary-hex, .4),
      "primary-trans-50": rgba($primary-hex, .5),
      "primary-trans-60": rgba($primary-hex, .6),
      "primary-trans-70": rgba($primary-hex, .7),
      "primary-trans-80": rgba($primary-hex, .8),
      "primary-trans-90": rgba($primary-hex, .9),
    ),
    "light-trans": (
      "primary-light-trans-10": hsl($primary-light-h, $primary-light-s, $primary-light-l, .1),
      "primary-light-trans-20": hsl($primary-light-h, $primary-light-s, $primary-light-l, .2),
      "primary-light-trans-30": hsl($primary-light-h, $primary-light-s, $primary-light-l, .3),
      "primary-light-trans-40": hsl($primary-light-h, $primary-light-s, $primary-light-l, .4),
      "primary-light-trans-50": hsl($primary-light-h, $primary-light-s, $primary-light-l, .5),
      "primary-light-trans-60": hsl($primary-light-h, $primary-light-s, $primary-light-l, .6),
      "primary-light-trans-70": hsl($primary-light-h, $primary-light-s, $primary-light-l, .7),
      "primary-light-trans-80": hsl($primary-light-h, $primary-light-s, $primary-light-l, .8),
      "primary-light-trans-90": hsl($primary-light-h, $primary-light-s, $primary-light-l, .9),
    ),
    "dark-trans": (
      "primary-dark-trans-10": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .1),
      "primary-dark-trans-20": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .2),
      "primary-dark-trans-30": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .3),
      "primary-dark-trans-40": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .4),
      "primary-dark-trans-50": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .5),
      "primary-dark-trans-60": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .6),
      "primary-dark-trans-70": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .7),
      "primary-dark-trans-80": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .8),
      "primary-dark-trans-90": hsl($primary-dark-h, $primary-dark-s, $primary-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "primary-ultra-dark-trans-10": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .1),
      "primary-ultra-dark-trans-20": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .2),
      "primary-ultra-dark-trans-30": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .3),
      "primary-ultra-dark-trans-40": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .4),
      "primary-ultra-dark-trans-50": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .5),
      "primary-ultra-dark-trans-60": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .6),
      "primary-ultra-dark-trans-70": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .7),
      "primary-ultra-dark-trans-80": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .8),
      "primary-ultra-dark-trans-90": hsl($primary-ultra-dark-h, $primary-ultra-dark-s, $primary-ultra-dark-l, .9),
    ),
    "partials": (
      "primary-hex": $primary-hex,
        "primary-hsl": $primary-h $primary-s $primary-l,
        "primary-rgb": $primary-r $primary-g $primary-b,
        "primary-r": $primary-r,
        "primary-g": $primary-g,
        "primary-b": $primary-b,
        "primary-h": $primary-h,
        "primary-s": $primary-s,
        "primary-l": $primary-l,
        "primary-hover-h": $primary-hover-h,
        "primary-hover-s": $primary-hover-s,
        "primary-hover-l": $primary-hover-l,
        "primary-ultra-light-h": $primary-ultra-light-h,
        "primary-ultra-light-s": $primary-ultra-light-s,
        "primary-ultra-light-l": $primary-ultra-light-l,
        "primary-light-h": $primary-light-h,
        "primary-light-s": $primary-light-s,
        "primary-light-l": $primary-light-l,
        "primary-semi-light-h": $primary-semi-light-h,
        "primary-semi-light-s": $primary-semi-light-s,
        "primary-semi-light-l": $primary-semi-light-l,
        "primary-semi-dark-h": $primary-semi-dark-h,
        "primary-semi-dark-s": $primary-semi-dark-s,
        "primary-semi-dark-l": $primary-semi-dark-l,
        "primary-dark-h": $primary-dark-h,
        "primary-dark-s": $primary-dark-s,
        "primary-dark-l": $primary-dark-l,
        "primary-ultra-dark-h": $primary-ultra-dark-h,
        "primary-ultra-dark-s": $primary-ultra-dark-s,
        "primary-ultra-dark-l": $primary-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-primary-main-trans == off {
    $color-primary: map-remove($color-primary, "trans");
  }
  @if $option-primary-light-trans == off {
    $color-primary: map-remove($color-primary, "light-trans");
  }
  @if $option-primary-dark-trans == off {
    $color-primary: map-remove($color-primary, "dark-trans");
  }
  @if $option-primary-ultra-dark-trans == off {
    $color-primary: map-remove($color-primary, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-primary-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-primary: map-merge($color-primary, (
      "main": map-merge(map-get($color-primary, "main"), (
        "primary-comp": hsl($primary-h + 180, $primary-s, $primary-l)
      )),
      "partials": map-merge(map-get($color-primary, "partials"), (
        "primary-comp-h": $primary-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-primary: map-merge($color-primary, (
      "main": map-merge(map-get($color-primary, "main"), (
        "primary-medium": hsl($primary-medium-h, $primary-medium-s, $primary-medium-l)
      )),
      "partials": map-merge(map-get($color-primary, "partials"), (
        "primary-medium-h": $primary-medium-h,
        "primary-medium-s": $primary-medium-s,
        "primary-medium-l": $primary-medium-l
      ))
    ));
  }
}
// primary Options
$option-primary-clr-alt: off !default;

// primary Alt Vars
$primary-alt-hex: #e56c70 !default;
$primary-r-alt: 229 !default;
$primary-g-alt: 108 !default;
$primary-b-alt: 112 !default;
$primary-h-alt: 358 !default;
$primary-s-alt: 70% !default;
$primary-l-alt: 66% !default;
$primary-hover-h-alt: 358 !default;
$primary-hover-s-alt: 70% !default;
$primary-hover-l-alt: 1.15 !default;
$primary-ultra-light-h-alt: 358 !default;
$primary-ultra-light-s-alt: 70% !default;
$primary-ultra-light-l-alt: 95% !default;
$primary-light-h-alt: 358 !default;
$primary-light-s-alt: 70% !default;
$primary-light-l-alt: 85% !default;
$primary-medium-h-alt: 358 !default;
$primary-medium-s-alt: 70% !default;
$primary-medium-l-alt: 50% !default;
$primary-dark-h-alt: 358 !default;
$primary-dark-s-alt: 70% !default;
$primary-dark-l-alt: 25% !default;
$primary-ultra-dark-h-alt: 358 !default;
$primary-ultra-dark-s-alt: 70% !default;
$primary-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$primary-semi-light-h-alt: 358 !default;
$primary-semi-light-s-alt: 70% !default;
$primary-semi-light-l-alt: 60% !default;
$primary-semi-dark-h-alt: 358 !default;
$primary-semi-dark-s-alt: 70% !default;
$primary-semi-dark-l-alt: 40% !default;

// Primary Alt Color Map
$color-primary-alt:(); // Initialize Map
@if $option-primary-clr-alt == on and $option-primary-clr == on {
  $color-primary-alt: (
    "main": (
      "primary": $primary-alt-hex,
      "primary-hover": hsl($primary-hover-h-alt, $primary-hover-s-alt, $primary-hover-l-alt),
      "primary-ultra-light": hsl($primary-ultra-light-h-alt, $primary-ultra-light-s-alt, $primary-ultra-light-l-alt),
      "primary-light": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt),
      "primary-semi-light": hsl($primary-semi-light-h-alt, $primary-semi-light-s-alt, $primary-semi-light-l-alt),
      "primary-semi-dark": hsl($primary-semi-dark-h-alt, $primary-semi-dark-s-alt, $primary-semi-dark-l-alt),
      "primary-dark": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt),
      "primary-ultra-dark": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt),
      "primary-comp": hsl($primary-h-alt + 180, $primary-s-alt, $primary-l-alt),
    ),
    "trans": (
      "primary-trans-10": rgba($primary-alt-hex, .1),
      "primary-trans-20": rgba($primary-alt-hex, .2),
      "primary-trans-30": rgba($primary-alt-hex, .3),
      "primary-trans-40": rgba($primary-alt-hex, .4),
      "primary-trans-50": rgba($primary-alt-hex, .5),
      "primary-trans-60": rgba($primary-alt-hex, .6),
      "primary-trans-70": rgba($primary-alt-hex, .7),
      "primary-trans-80": rgba($primary-alt-hex, .8),
      "primary-trans-90": rgba($primary-alt-hex, .9),
    ),
    "light-trans": (
      "primary-light-trans-10": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .1),
      "primary-light-trans-20": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .2),
      "primary-light-trans-30": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .3),
      "primary-light-trans-40": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .4),
      "primary-light-trans-50": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .5),
      "primary-light-trans-60": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .6),
      "primary-light-trans-70": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .7),
      "primary-light-trans-80": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .8),
      "primary-light-trans-90": hsl($primary-light-h-alt, $primary-light-s-alt, $primary-light-l-alt, .9),
    ),
    "dark-trans": (
      "primary-dark-trans-10": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .1),
      "primary-dark-trans-20": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .2),
      "primary-dark-trans-30": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .3),
      "primary-dark-trans-40": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .4),
      "primary-dark-trans-50": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .5),
      "primary-dark-trans-60": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .6),
      "primary-dark-trans-70": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .7),
      "primary-dark-trans-80": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .8),
      "primary-dark-trans-90": hsl($primary-dark-h-alt, $primary-dark-s-alt, $primary-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "primary-ultra-dark-trans-10": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .1),
      "primary-ultra-dark-trans-20": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .2),
      "primary-ultra-dark-trans-30": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .3),
      "primary-ultra-dark-trans-40": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .4),
      "primary-ultra-dark-trans-50": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .5),
      "primary-ultra-dark-trans-60": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .6),
      "primary-ultra-dark-trans-70": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .7),
      "primary-ultra-dark-trans-80": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .8),
      "primary-ultra-dark-trans-90": hsl($primary-ultra-dark-h-alt, $primary-ultra-dark-s-alt, $primary-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "primary-hex": $primary-alt-hex,
        "primary-hsl": $primary-h $primary-s $primary-l-alt,
        "primary-rgb": $primary-r $primary-g $primary-b-alt,
        "primary-r": $primary-r-alt,
        "primary-g": $primary-g-alt,
        "primary-b": $primary-b-alt,
        "primary-h": $primary-h-alt,
        "primary-s": $primary-s-alt,
        "primary-l": $primary-l-alt,
        "primary-hover-h": $primary-hover-h-alt,
        "primary-hover-s": $primary-hover-s-alt,
        "primary-hover-l": $primary-hover-l-alt,
        "primary-ultra-light-h": $primary-ultra-light-h-alt,
        "primary-ultra-light-s": $primary-ultra-light-s-alt,
        "primary-ultra-light-l": $primary-ultra-light-l-alt,
        "primary-light-h": $primary-light-h-alt,
        "primary-light-s": $primary-light-s-alt,
        "primary-light-l": $primary-light-l-alt,
        "primary-semi-light-h": $primary-semi-light-h-alt,
        "primary-semi-light-s": $primary-semi-light-s-alt,
        "primary-semi-light-l": $primary-semi-light-l-alt,
        "primary-semi-dark-h": $primary-semi-dark-h-alt,
        "primary-semi-dark-s": $primary-semi-dark-s-alt,
        "primary-semi-dark-l": $primary-semi-dark-l-alt,
        "primary-dark-h": $primary-dark-h-alt,
        "primary-dark-s": $primary-dark-s-alt,
        "primary-dark-l": $primary-dark-l-alt,
        "primary-ultra-dark-h": $primary-ultra-dark-h-alt,
        "primary-ultra-dark-s": $primary-ultra-dark-s-alt,
        "primary-ultra-dark-l": $primary-ultra-dark-l-alt,
        "primary-comp-h": $primary-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-primary-clr-alt == on and $option-primary-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-primary-alt: map-merge($color-primary-alt, (
      "main": map-merge(map-get($color-primary-alt, "main"), (
        "primary-medium": hsl($primary-medium-h-alt, $primary-medium-s-alt, $primary-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-primary-alt, "partials"), (
        "primary-medium-h": $primary-medium-h-alt,
        "primary-medium-s": $primary-medium-s-alt,
        "primary-medium-l": $primary-medium-l-alt
      ))
    ));
  }
}
// secondary Options
$option-secondary-clr: on !default;
$option-secondary-main-trans: on !default;
$option-secondary-light-trans: on !default;
$option-secondary-dark-trans: on !default;
$option-secondary-ultra-dark-trans: on !default;

// secondary Vars
$secondary-hex: #e56c70 !default;
$secondary-r: 229 !default;
$secondary-g: 108 !default;
$secondary-b: 112 !default;
$secondary-h: 358 !default;
$secondary-s: 70% !default;
$secondary-l: 66% !default;
$secondary-hover-h: 358 !default;
$secondary-hover-s: 70% !default;
$secondary-hover-l: 1.15 !default;
$secondary-ultra-light-h: 358 !default;
$secondary-ultra-light-s: 70% !default;
$secondary-ultra-light-l: 95% !default;
$secondary-light-h: 358 !default;
$secondary-light-s: 70% !default;
$secondary-light-l: 85% !default;
$secondary-medium-h: 358 !default;
$secondary-medium-s: 70% !default;
$secondary-medium-l: 50% !default;
$secondary-dark-h: 358 !default;
$secondary-dark-s: 70% !default;
$secondary-dark-l: 25% !default;
$secondary-ultra-dark-h: 358 !default;
$secondary-ultra-dark-s: 70% !default;
$secondary-ultra-dark-l: 10% !default;
// Added in 3.0
$secondary-semi-light-h: 358 !default;
$secondary-semi-light-s: 70% !default;
$secondary-semi-light-l: 60% !default;
$secondary-semi-dark-h: 358 !default;
$secondary-semi-dark-s: 70% !default;
$secondary-semi-dark-l: 40% !default;


// Secondary Color Map
$color-secondary:(); // Initialize Map
@if $option-secondary-clr == on {
  $color-secondary: (
    "main": (
      "secondary": $secondary-hex,
      "secondary-hover": hsl($secondary-hover-h, $secondary-hover-s, $secondary-hover-l),
      "secondary-ultra-light": hsl($secondary-ultra-light-h, $secondary-ultra-light-s, $secondary-ultra-light-l),
      "secondary-light": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l),
      "secondary-semi-light": hsl($secondary-semi-light-h, $secondary-semi-light-s, $secondary-semi-light-l),
      "secondary-semi-dark": hsl($secondary-semi-dark-h, $secondary-semi-dark-s, $secondary-semi-dark-l),
      "secondary-dark": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l),
      "secondary-ultra-dark": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l),
    ),
    "trans": (
      "secondary-trans-10": rgba($secondary-hex, .1),
      "secondary-trans-20": rgba($secondary-hex, .2),
      "secondary-trans-30": rgba($secondary-hex, .3),
      "secondary-trans-40": rgba($secondary-hex, .4),
      "secondary-trans-50": rgba($secondary-hex, .5),
      "secondary-trans-60": rgba($secondary-hex, .6),
      "secondary-trans-70": rgba($secondary-hex, .7),
      "secondary-trans-80": rgba($secondary-hex, .8),
      "secondary-trans-90": rgba($secondary-hex, .9),
    ),
    "light-trans": (
      "secondary-light-trans-10": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .1),
      "secondary-light-trans-20": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .2),
      "secondary-light-trans-30": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .3),
      "secondary-light-trans-40": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .4),
      "secondary-light-trans-50": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .5),
      "secondary-light-trans-60": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .6),
      "secondary-light-trans-70": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .7),
      "secondary-light-trans-80": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .8),
      "secondary-light-trans-90": hsl($secondary-light-h, $secondary-light-s, $secondary-light-l, .9),
    ),
    "dark-trans": (
      "secondary-dark-trans-10": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .1),
      "secondary-dark-trans-20": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .2),
      "secondary-dark-trans-30": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .3),
      "secondary-dark-trans-40": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .4),
      "secondary-dark-trans-50": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .5),
      "secondary-dark-trans-60": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .6),
      "secondary-dark-trans-70": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .7),
      "secondary-dark-trans-80": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .8),
      "secondary-dark-trans-90": hsl($secondary-dark-h, $secondary-dark-s, $secondary-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "secondary-ultra-dark-trans-10": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .1),
      "secondary-ultra-dark-trans-20": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .2),
      "secondary-ultra-dark-trans-30": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .3),
      "secondary-ultra-dark-trans-40": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .4),
      "secondary-ultra-dark-trans-50": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .5),
      "secondary-ultra-dark-trans-60": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .6),
      "secondary-ultra-dark-trans-70": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .7),
      "secondary-ultra-dark-trans-80": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .8),
      "secondary-ultra-dark-trans-90": hsl($secondary-ultra-dark-h, $secondary-ultra-dark-s, $secondary-ultra-dark-l, .9),
    ),
    "partials": (
      "secondary-hex": $secondary-hex,
        "secondary-hsl": $secondary-h $secondary-s $secondary-l,
        "secondary-rgb": $secondary-r $secondary-g $secondary-b,
        "secondary-r": $secondary-r,
        "secondary-g": $secondary-g,
        "secondary-b": $secondary-b,
        "secondary-h": $secondary-h,
        "secondary-s": $secondary-s,
        "secondary-l": $secondary-l,
        "secondary-hover-h": $secondary-hover-h,
        "secondary-hover-s": $secondary-hover-s,
        "secondary-hover-l": $secondary-hover-l,
        "secondary-ultra-light-h": $secondary-ultra-light-h,
        "secondary-ultra-light-s": $secondary-ultra-light-s,
        "secondary-ultra-light-l": $secondary-ultra-light-l,
        "secondary-light-h": $secondary-light-h,
        "secondary-light-s": $secondary-light-s,
        "secondary-light-l": $secondary-light-l,
        "secondary-semi-light-h": $secondary-semi-light-h,
        "secondary-semi-light-s": $secondary-semi-light-s,
        "secondary-semi-light-l": $secondary-semi-light-l,
        "secondary-semi-dark-h": $secondary-semi-dark-h,
        "secondary-semi-dark-s": $secondary-semi-dark-s,
        "secondary-semi-dark-l": $secondary-semi-dark-l,
        "secondary-dark-h": $secondary-dark-h,
        "secondary-dark-s": $secondary-dark-s,
        "secondary-dark-l": $secondary-dark-l,
        "secondary-ultra-dark-h": $secondary-ultra-dark-h,
        "secondary-ultra-dark-s": $secondary-ultra-dark-s,
        "secondary-ultra-dark-l": $secondary-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-secondary-main-trans == off {
    $color-secondary: map-remove($color-secondary, "trans");
  }
  @if $option-secondary-light-trans == off {
    $color-secondary: map-remove($color-secondary, "light-trans");
  }
  @if $option-secondary-dark-trans == off {
    $color-secondary: map-remove($color-secondary, "dark-trans");
  }
  @if $option-secondary-ultra-dark-trans == off {
    $color-secondary: map-remove($color-secondary, "ultra-dark-trans");
  }

  // Transparency options
  @if $option-secondary-main-trans == off {
    $color-secondary: map-remove($color-secondary, "trans");
  }
  @if $option-secondary-light-trans == off {
    $color-secondary: map-remove($color-secondary, "light-trans");
  }
  @if $option-secondary-dark-trans == off {
    $color-secondary: map-remove($color-secondary, "dark-trans");
  }
  @if $option-secondary-ultra-dark-trans == off {
    $color-secondary: map-remove($color-secondary, "ultra-dark-trans");
  }

}


// Handle Deprecated Options
@if $option-secondary-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-secondary: map-merge($color-secondary, (
      "main": map-merge(map-get($color-secondary, "main"), (
        "secondary-comp": hsl($secondary-h + 180, $secondary-s, $secondary-l)
      )),
      "partials": map-merge(map-get($color-secondary, "partials"), (
        "secondary-comp-h": $secondary-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-secondary: map-merge($color-secondary, (
      "main": map-merge(map-get($color-secondary, "main"), (
        "secondary-medium": hsl($secondary-medium-h, $secondary-medium-s, $secondary-medium-l)
      )),
      "partials": map-merge(map-get($color-secondary, "partials"), (
        "secondary-medium-h": $secondary-medium-h,
        "secondary-medium-s": $secondary-medium-s,
        "secondary-medium-l": $secondary-medium-l
      ))
    ));
  }
}
// secondary Options
$option-secondary-clr-alt: off !default;

// secondary Alt Vars
$secondary-alt-hex: #e56c70 !default;
$secondary-r-alt: 229 !default;
$secondary-g-alt: 108 !default;
$secondary-b-alt: 112 !default;
$secondary-h-alt: 358 !default;
$secondary-s-alt: 70% !default;
$secondary-l-alt: 66% !default;
$secondary-hover-h-alt: 358 !default;
$secondary-hover-s-alt: 70% !default;
$secondary-hover-l-alt: 1.15 !default;
$secondary-ultra-light-h-alt: 358 !default;
$secondary-ultra-light-s-alt: 70% !default;
$secondary-ultra-light-l-alt: 95% !default;
$secondary-light-h-alt: 358 !default;
$secondary-light-s-alt: 70% !default;
$secondary-light-l-alt: 85% !default;
$secondary-medium-h-alt: 358 !default;
$secondary-medium-s-alt: 70% !default;
$secondary-medium-l-alt: 50% !default;
$secondary-dark-h-alt: 358 !default;
$secondary-dark-s-alt: 70% !default;
$secondary-dark-l-alt: 25% !default;
$secondary-ultra-dark-h-alt: 358 !default;
$secondary-ultra-dark-s-alt: 70% !default;
$secondary-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$secondary-semi-light-h-alt: 358 !default;
$secondary-semi-light-s-alt: 70% !default;
$secondary-semi-light-l-alt: 60% !default;
$secondary-semi-dark-h-alt: 358 !default;
$secondary-semi-dark-s-alt: 70% !default;
$secondary-semi-dark-l-alt: 40% !default;

// Secondary Alt Color Map
$color-secondary-alt:(); // Initialize Map
@if $option-secondary-clr-alt == on and $option-secondary-clr == on {
  $color-secondary-alt: (
    "main": (
      "secondary": $secondary-alt-hex,
      "secondary-hover": hsl($secondary-hover-h-alt, $secondary-hover-s-alt, $secondary-hover-l-alt),
      "secondary-ultra-light": hsl($secondary-ultra-light-h-alt, $secondary-ultra-light-s-alt, $secondary-ultra-light-l-alt),
      "secondary-light": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt),
      "secondary-semi-light": hsl($secondary-semi-light-h-alt, $secondary-semi-light-s-alt, $secondary-semi-light-l-alt),
      "secondary-semi-dark": hsl($secondary-semi-dark-h-alt, $secondary-semi-dark-s-alt, $secondary-semi-dark-l-alt),
      "secondary-dark": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt),
      "secondary-ultra-dark": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt),
      "secondary-comp": hsl($secondary-h-alt + 180, $secondary-s-alt, $secondary-l-alt),
    ),
    "trans": (
      "secondary-trans-10": rgba($secondary-alt-hex, .1),
      "secondary-trans-20": rgba($secondary-alt-hex, .2),
      "secondary-trans-30": rgba($secondary-alt-hex, .3),
      "secondary-trans-40": rgba($secondary-alt-hex, .4),
      "secondary-trans-50": rgba($secondary-alt-hex, .5),
      "secondary-trans-60": rgba($secondary-alt-hex, .6),
      "secondary-trans-70": rgba($secondary-alt-hex, .7),
      "secondary-trans-80": rgba($secondary-alt-hex, .8),
      "secondary-trans-90": rgba($secondary-alt-hex, .9),
    ),
    "light-trans": (
      "secondary-light-trans-10": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .1),
      "secondary-light-trans-20": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .2),
      "secondary-light-trans-30": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .3),
      "secondary-light-trans-40": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .4),
      "secondary-light-trans-50": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .5),
      "secondary-light-trans-60": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .6),
      "secondary-light-trans-70": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .7),
      "secondary-light-trans-80": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .8),
      "secondary-light-trans-90": hsl($secondary-light-h-alt, $secondary-light-s-alt, $secondary-light-l-alt, .9),
    ),
    "dark-trans": (
      "secondary-dark-trans-10": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .1),
      "secondary-dark-trans-20": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .2),
      "secondary-dark-trans-30": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .3),
      "secondary-dark-trans-40": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .4),
      "secondary-dark-trans-50": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .5),
      "secondary-dark-trans-60": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .6),
      "secondary-dark-trans-70": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .7),
      "secondary-dark-trans-80": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .8),
      "secondary-dark-trans-90": hsl($secondary-dark-h-alt, $secondary-dark-s-alt, $secondary-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "secondary-ultra-dark-trans-10": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .1),
      "secondary-ultra-dark-trans-20": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .2),
      "secondary-ultra-dark-trans-30": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .3),
      "secondary-ultra-dark-trans-40": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .4),
      "secondary-ultra-dark-trans-50": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .5),
      "secondary-ultra-dark-trans-60": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .6),
      "secondary-ultra-dark-trans-70": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .7),
      "secondary-ultra-dark-trans-80": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .8),
      "secondary-ultra-dark-trans-90": hsl($secondary-ultra-dark-h-alt, $secondary-ultra-dark-s-alt, $secondary-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "secondary-hex": $secondary-alt-hex,
        "secondary-hsl": $secondary-h $secondary-s $secondary-l-alt,
        "secondary-rgb": $secondary-r $secondary-g $secondary-b-alt,
        "secondary-r": $secondary-r-alt,
        "secondary-g": $secondary-g-alt,
        "secondary-b": $secondary-b-alt,
        "secondary-h": $secondary-h-alt,
        "secondary-s": $secondary-s-alt,
        "secondary-l": $secondary-l-alt,
        "secondary-hover-h": $secondary-hover-h-alt,
        "secondary-hover-s": $secondary-hover-s-alt,
        "secondary-hover-l": $secondary-hover-l-alt,
        "secondary-ultra-light-h": $secondary-ultra-light-h-alt,
        "secondary-ultra-light-s": $secondary-ultra-light-s-alt,
        "secondary-ultra-light-l": $secondary-ultra-light-l-alt,
        "secondary-light-h": $secondary-light-h-alt,
        "secondary-light-s": $secondary-light-s-alt,
        "secondary-light-l": $secondary-light-l-alt,
        "secondary-semi-light-h": $secondary-semi-light-h-alt,
        "secondary-semi-light-s": $secondary-semi-light-s-alt,
        "secondary-semi-light-l": $secondary-semi-light-l-alt,
        "secondary-semi-dark-h": $secondary-semi-dark-h-alt,
        "secondary-semi-dark-s": $secondary-semi-dark-s-alt,
        "secondary-semi-dark-l": $secondary-semi-dark-l-alt,
        "secondary-dark-h": $secondary-dark-h-alt,
        "secondary-dark-s": $secondary-dark-s-alt,
        "secondary-dark-l": $secondary-dark-l-alt,
        "secondary-ultra-dark-h": $secondary-ultra-dark-h-alt,
        "secondary-ultra-dark-s": $secondary-ultra-dark-s-alt,
        "secondary-ultra-dark-l": $secondary-ultra-dark-l-alt,
        "secondary-comp-h": $secondary-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-secondary-clr-alt == on and $option-secondary-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-secondary-alt: map-merge($color-secondary-alt, (
      "main": map-merge(map-get($color-secondary-alt, "main"), (
        "secondary-medium": hsl($secondary-medium-h-alt, $secondary-medium-s-alt, $secondary-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-secondary-alt, "partials"), (
        "secondary-medium-h": $secondary-medium-h-alt,
        "secondary-medium-s": $secondary-medium-s-alt,
        "secondary-medium-l": $secondary-medium-l-alt
      ))
    ));
  }
}
// tertiary Options
$option-tertiary-clr: on !default;
$option-tertiary-main-trans: on !default;
$option-tertiary-light-trans: on !default;
$option-tertiary-dark-trans: on !default;
$option-tertiary-ultra-dark-trans: on !default;

// tertiary Vars
$tertiary-hex: #e56c70 !default;
$tertiary-r: 229 !default;
$tertiary-g: 108 !default;
$tertiary-b: 112 !default;
$tertiary-h: 358 !default;
$tertiary-s: 70% !default;
$tertiary-l: 66% !default;
$tertiary-hover-h: 358 !default;
$tertiary-hover-s: 70% !default;
$tertiary-hover-l: 1.15 !default;
$tertiary-ultra-light-h: 358 !default;
$tertiary-ultra-light-s: 70% !default;
$tertiary-ultra-light-l: 95% !default;
$tertiary-light-h: 358 !default;
$tertiary-light-s: 70% !default;
$tertiary-light-l: 85% !default;
$tertiary-medium-h: 358 !default;
$tertiary-medium-s: 70% !default;
$tertiary-medium-l: 50% !default;
$tertiary-dark-h: 358 !default;
$tertiary-dark-s: 70% !default;
$tertiary-dark-l: 25% !default;
$tertiary-ultra-dark-h: 358 !default;
$tertiary-ultra-dark-s: 70% !default;
$tertiary-ultra-dark-l: 10% !default;
// Added in 3.0
$tertiary-semi-light-h: 358 !default;
$tertiary-semi-light-s: 70% !default;
$tertiary-semi-light-l: 60% !default;
$tertiary-semi-dark-h: 358 !default;
$tertiary-semi-dark-s: 70% !default;
$tertiary-semi-dark-l: 40% !default;


// Tertiary Color Map
$color-tertiary:(); // Initialize Map
@if $option-tertiary-clr == on {
  $color-tertiary: (
    "main": (
      "tertiary": $tertiary-hex,
      "tertiary-hover": hsl($tertiary-hover-h, $tertiary-hover-s, $tertiary-hover-l),
      "tertiary-ultra-light": hsl($tertiary-ultra-light-h, $tertiary-ultra-light-s, $tertiary-ultra-light-l),
      "tertiary-light": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l),
      "tertiary-semi-light": hsl($tertiary-semi-light-h, $tertiary-semi-light-s, $tertiary-semi-light-l),
      "tertiary-semi-dark": hsl($tertiary-semi-dark-h, $tertiary-semi-dark-s, $tertiary-semi-dark-l),
      "tertiary-dark": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l),
      "tertiary-ultra-dark": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l),
    ),
    "trans": (
      "tertiary-trans-10": rgba($tertiary-hex, .1),
      "tertiary-trans-20": rgba($tertiary-hex, .2),
      "tertiary-trans-30": rgba($tertiary-hex, .3),
      "tertiary-trans-40": rgba($tertiary-hex, .4),
      "tertiary-trans-50": rgba($tertiary-hex, .5),
      "tertiary-trans-60": rgba($tertiary-hex, .6),
      "tertiary-trans-70": rgba($tertiary-hex, .7),
      "tertiary-trans-80": rgba($tertiary-hex, .8),
      "tertiary-trans-90": rgba($tertiary-hex, .9),
    ),
    "light-trans": (
      "tertiary-light-trans-10": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .1),
      "tertiary-light-trans-20": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .2),
      "tertiary-light-trans-30": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .3),
      "tertiary-light-trans-40": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .4),
      "tertiary-light-trans-50": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .5),
      "tertiary-light-trans-60": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .6),
      "tertiary-light-trans-70": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .7),
      "tertiary-light-trans-80": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .8),
      "tertiary-light-trans-90": hsl($tertiary-light-h, $tertiary-light-s, $tertiary-light-l, .9),
    ),
    "dark-trans": (
      "tertiary-dark-trans-10": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .1),
      "tertiary-dark-trans-20": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .2),
      "tertiary-dark-trans-30": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .3),
      "tertiary-dark-trans-40": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .4),
      "tertiary-dark-trans-50": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .5),
      "tertiary-dark-trans-60": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .6),
      "tertiary-dark-trans-70": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .7),
      "tertiary-dark-trans-80": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .8),
      "tertiary-dark-trans-90": hsl($tertiary-dark-h, $tertiary-dark-s, $tertiary-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "tertiary-ultra-dark-trans-10": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .1),
      "tertiary-ultra-dark-trans-20": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .2),
      "tertiary-ultra-dark-trans-30": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .3),
      "tertiary-ultra-dark-trans-40": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .4),
      "tertiary-ultra-dark-trans-50": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .5),
      "tertiary-ultra-dark-trans-60": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .6),
      "tertiary-ultra-dark-trans-70": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .7),
      "tertiary-ultra-dark-trans-80": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .8),
      "tertiary-ultra-dark-trans-90": hsl($tertiary-ultra-dark-h, $tertiary-ultra-dark-s, $tertiary-ultra-dark-l, .9),
    ),
    "partials": (
      "tertiary-hex": $tertiary-hex,
        "tertiary-hsl": $tertiary-h $tertiary-s $tertiary-l,
        "tertiary-rgb": $tertiary-r $tertiary-g $tertiary-b,
        "tertiary-r": $tertiary-r,
        "tertiary-g": $tertiary-g,
        "tertiary-b": $tertiary-b,
        "tertiary-h": $tertiary-h,
        "tertiary-s": $tertiary-s,
        "tertiary-l": $tertiary-l,
        "tertiary-hover-h": $tertiary-hover-h,
        "tertiary-hover-s": $tertiary-hover-s,
        "tertiary-hover-l": $tertiary-hover-l,
        "tertiary-ultra-light-h": $tertiary-ultra-light-h,
        "tertiary-ultra-light-s": $tertiary-ultra-light-s,
        "tertiary-ultra-light-l": $tertiary-ultra-light-l,
        "tertiary-light-h": $tertiary-light-h,
        "tertiary-light-s": $tertiary-light-s,
        "tertiary-light-l": $tertiary-light-l,
        "tertiary-semi-light-h": $tertiary-semi-light-h,
        "tertiary-semi-light-s": $tertiary-semi-light-s,
        "tertiary-semi-light-l": $tertiary-semi-light-l,
        "tertiary-semi-dark-h": $tertiary-semi-dark-h,
        "tertiary-semi-dark-s": $tertiary-semi-dark-s,
        "tertiary-semi-dark-l": $tertiary-semi-dark-l,
        "tertiary-dark-h": $tertiary-dark-h,
        "tertiary-dark-s": $tertiary-dark-s,
        "tertiary-dark-l": $tertiary-dark-l,
        "tertiary-ultra-dark-h": $tertiary-ultra-dark-h,
        "tertiary-ultra-dark-s": $tertiary-ultra-dark-s,
        "tertiary-ultra-dark-l": $tertiary-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-tertiary-main-trans == off {
    $color-tertiary: map-remove($color-tertiary, "trans");
  }
  @if $option-tertiary-light-trans == off {
    $color-tertiary: map-remove($color-tertiary, "light-trans");
  }
  @if $option-tertiary-dark-trans == off {
    $color-tertiary: map-remove($color-tertiary, "dark-trans");
  }
  @if $option-tertiary-ultra-dark-trans == off {
    $color-tertiary: map-remove($color-tertiary, "ultra-dark-trans");
  }

  // Transparency options
  @if $option-tertiary-main-trans == off {
    $color-tertiary: map-remove($color-tertiary, "trans");
  }
  @if $option-tertiary-light-trans == off {
    $color-tertiary: map-remove($color-tertiary, "light-trans");
  }
  @if $option-tertiary-dark-trans == off {
    $color-tertiary: map-remove($color-tertiary, "dark-trans");
  }
  @if $option-tertiary-ultra-dark-trans == off {
    $color-tertiary: map-remove($color-tertiary, "ultra-dark-trans");
  }

}


// Handle Deprecated Options
@if $option-tertiary-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-tertiary: map-merge($color-tertiary, (
      "main": map-merge(map-get($color-tertiary, "main"), (
        "tertiary-comp": hsl($tertiary-h + 180, $tertiary-s, $tertiary-l)
      )),
      "partials": map-merge(map-get($color-tertiary, "partials"), (
        "tertiary-comp-h": $tertiary-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-tertiary: map-merge($color-tertiary, (
      "main": map-merge(map-get($color-tertiary, "main"), (
        "tertiary-medium": hsl($tertiary-medium-h, $tertiary-medium-s, $tertiary-medium-l)
      )),
      "partials": map-merge(map-get($color-tertiary, "partials"), (
        "tertiary-medium-h": $tertiary-medium-h,
        "tertiary-medium-s": $tertiary-medium-s,
        "tertiary-medium-l": $tertiary-medium-l
      ))
    ));
  }
}
// tertiary Options
$option-tertiary-clr-alt: off !default;

// tertiary Alt Vars
$tertiary-alt-hex: #e56c70 !default;
$tertiary-r-alt: 229 !default;
$tertiary-g-alt: 108 !default;
$tertiary-b-alt: 112 !default;
$tertiary-h-alt: 358 !default;
$tertiary-s-alt: 70% !default;
$tertiary-l-alt: 66% !default;
$tertiary-hover-h-alt: 358 !default;
$tertiary-hover-s-alt: 70% !default;
$tertiary-hover-l-alt: 1.15 !default;
$tertiary-ultra-light-h-alt: 358 !default;
$tertiary-ultra-light-s-alt: 70% !default;
$tertiary-ultra-light-l-alt: 95% !default;
$tertiary-light-h-alt: 358 !default;
$tertiary-light-s-alt: 70% !default;
$tertiary-light-l-alt: 85% !default;
$tertiary-medium-h-alt: 358 !default;
$tertiary-medium-s-alt: 70% !default;
$tertiary-medium-l-alt: 50% !default;
$tertiary-dark-h-alt: 358 !default;
$tertiary-dark-s-alt: 70% !default;
$tertiary-dark-l-alt: 25% !default;
$tertiary-ultra-dark-h-alt: 358 !default;
$tertiary-ultra-dark-s-alt: 70% !default;
$tertiary-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$tertiary-semi-light-h-alt: 358 !default;
$tertiary-semi-light-s-alt: 70% !default;
$tertiary-semi-light-l-alt: 60% !default;
$tertiary-semi-dark-h-alt: 358 !default;
$tertiary-semi-dark-s-alt: 70% !default;
$tertiary-semi-dark-l-alt: 40% !default;

// Tertiary Alt Color Map
$color-tertiary-alt:(); // Initialize Map
@if $option-tertiary-clr-alt == on and $option-tertiary-clr == on {
  $color-tertiary-alt: (
    "main": (
      "tertiary": $tertiary-alt-hex,
      "tertiary-hover": hsl($tertiary-hover-h-alt, $tertiary-hover-s-alt, $tertiary-hover-l-alt),
      "tertiary-ultra-light": hsl($tertiary-ultra-light-h-alt, $tertiary-ultra-light-s-alt, $tertiary-ultra-light-l-alt),
      "tertiary-light": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt),
      "tertiary-semi-light": hsl($tertiary-semi-light-h-alt, $tertiary-semi-light-s-alt, $tertiary-semi-light-l-alt),
      "tertiary-semi-dark": hsl($tertiary-semi-dark-h-alt, $tertiary-semi-dark-s-alt, $tertiary-semi-dark-l-alt),
      "tertiary-dark": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt),
      "tertiary-ultra-dark": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt),
      "tertiary-comp": hsl($tertiary-h-alt + 180, $tertiary-s-alt, $tertiary-l-alt),
    ),
    "trans": (
      "tertiary-trans-10": rgba($tertiary-alt-hex, .1),
      "tertiary-trans-20": rgba($tertiary-alt-hex, .2),
      "tertiary-trans-30": rgba($tertiary-alt-hex, .3),
      "tertiary-trans-40": rgba($tertiary-alt-hex, .4),
      "tertiary-trans-50": rgba($tertiary-alt-hex, .5),
      "tertiary-trans-60": rgba($tertiary-alt-hex, .6),
      "tertiary-trans-70": rgba($tertiary-alt-hex, .7),
      "tertiary-trans-80": rgba($tertiary-alt-hex, .8),
      "tertiary-trans-90": rgba($tertiary-alt-hex, .9),
    ),
    "light-trans": (
      "tertiary-light-trans-10": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .1),
      "tertiary-light-trans-20": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .2),
      "tertiary-light-trans-30": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .3),
      "tertiary-light-trans-40": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .4),
      "tertiary-light-trans-50": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .5),
      "tertiary-light-trans-60": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .6),
      "tertiary-light-trans-70": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .7),
      "tertiary-light-trans-80": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .8),
      "tertiary-light-trans-90": hsl($tertiary-light-h-alt, $tertiary-light-s-alt, $tertiary-light-l-alt, .9),
    ),
    "dark-trans": (
      "tertiary-dark-trans-10": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .1),
      "tertiary-dark-trans-20": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .2),
      "tertiary-dark-trans-30": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .3),
      "tertiary-dark-trans-40": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .4),
      "tertiary-dark-trans-50": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .5),
      "tertiary-dark-trans-60": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .6),
      "tertiary-dark-trans-70": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .7),
      "tertiary-dark-trans-80": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .8),
      "tertiary-dark-trans-90": hsl($tertiary-dark-h-alt, $tertiary-dark-s-alt, $tertiary-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "tertiary-ultra-dark-trans-10": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .1),
      "tertiary-ultra-dark-trans-20": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .2),
      "tertiary-ultra-dark-trans-30": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .3),
      "tertiary-ultra-dark-trans-40": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .4),
      "tertiary-ultra-dark-trans-50": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .5),
      "tertiary-ultra-dark-trans-60": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .6),
      "tertiary-ultra-dark-trans-70": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .7),
      "tertiary-ultra-dark-trans-80": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .8),
      "tertiary-ultra-dark-trans-90": hsl($tertiary-ultra-dark-h-alt, $tertiary-ultra-dark-s-alt, $tertiary-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "tertiary-hex": $tertiary-alt-hex,
        "tertiary-hsl": $tertiary-h $tertiary-s $tertiary-l-alt,
        "tertiary-rgb": $tertiary-r $tertiary-g $tertiary-b-alt,
        "tertiary-r": $tertiary-r-alt,
        "tertiary-g": $tertiary-g-alt,
        "tertiary-b": $tertiary-b-alt,
        "tertiary-h": $tertiary-h-alt,
        "tertiary-s": $tertiary-s-alt,
        "tertiary-l": $tertiary-l-alt,
        "tertiary-hover-h": $tertiary-hover-h-alt,
        "tertiary-hover-s": $tertiary-hover-s-alt,
        "tertiary-hover-l": $tertiary-hover-l-alt,
        "tertiary-ultra-light-h": $tertiary-ultra-light-h-alt,
        "tertiary-ultra-light-s": $tertiary-ultra-light-s-alt,
        "tertiary-ultra-light-l": $tertiary-ultra-light-l-alt,
        "tertiary-light-h": $tertiary-light-h-alt,
        "tertiary-light-s": $tertiary-light-s-alt,
        "tertiary-light-l": $tertiary-light-l-alt,
        "tertiary-semi-light-h": $tertiary-semi-light-h-alt,
        "tertiary-semi-light-s": $tertiary-semi-light-s-alt,
        "tertiary-semi-light-l": $tertiary-semi-light-l-alt,
        "tertiary-semi-dark-h": $tertiary-semi-dark-h-alt,
        "tertiary-semi-dark-s": $tertiary-semi-dark-s-alt,
        "tertiary-semi-dark-l": $tertiary-semi-dark-l-alt,
        "tertiary-dark-h": $tertiary-dark-h-alt,
        "tertiary-dark-s": $tertiary-dark-s-alt,
        "tertiary-dark-l": $tertiary-dark-l-alt,
        "tertiary-ultra-dark-h": $tertiary-ultra-dark-h-alt,
        "tertiary-ultra-dark-s": $tertiary-ultra-dark-s-alt,
        "tertiary-ultra-dark-l": $tertiary-ultra-dark-l-alt,
        "tertiary-comp-h": $tertiary-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-tertiary-clr-alt == on and $option-tertiary-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-tertiary-alt: map-merge($color-tertiary-alt, (
      "main": map-merge(map-get($color-tertiary-alt, "main"), (
        "tertiary-medium": hsl($tertiary-medium-h-alt, $tertiary-medium-s-alt, $tertiary-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-tertiary-alt, "partials"), (
        "tertiary-medium-h": $tertiary-medium-h-alt,
        "tertiary-medium-s": $tertiary-medium-s-alt,
        "tertiary-medium-l": $tertiary-medium-l-alt
      ))
    ));
  }
}
// accent Options
$option-accent-clr: on !default;
$option-accent-main-trans: on !default;
$option-accent-light-trans: on !default;
$option-accent-dark-trans: on !default;
$option-accent-ultra-dark-trans: on !default;

// accent Vars
$accent-hex: #e56c70 !default;
$accent-r: 229 !default;
$accent-g: 108 !default;
$accent-b: 112 !default;
$accent-h: 358 !default;
$accent-s: 70% !default;
$accent-l: 66% !default;
$accent-hover-h: 358 !default;
$accent-hover-s: 70% !default;
$accent-hover-l: 1.15 !default;
$accent-ultra-light-h: 358 !default;
$accent-ultra-light-s: 70% !default;
$accent-ultra-light-l: 95% !default;
$accent-light-h: 358 !default;
$accent-light-s: 70% !default;
$accent-light-l: 85% !default;
$accent-medium-h: 358 !default;
$accent-medium-s: 70% !default;
$accent-medium-l: 50% !default;
$accent-dark-h: 358 !default;
$accent-dark-s: 70% !default;
$accent-dark-l: 25% !default;
$accent-ultra-dark-h: 358 !default;
$accent-ultra-dark-s: 70% !default;
$accent-ultra-dark-l: 10% !default;
// Added in 3.0
$accent-semi-light-h: 358 !default;
$accent-semi-light-s: 70% !default;
$accent-semi-light-l: 60% !default;
$accent-semi-dark-h: 358 !default;
$accent-semi-dark-s: 70% !default;
$accent-semi-dark-l: 40% !default;


// Accent Color Map
$color-accent:(); // Initialize Map
@if $option-accent-clr == on {
  $color-accent: (
    "main": (
      "accent": $accent-hex,
      "accent-hover": hsl($accent-hover-h, $accent-hover-s, $accent-hover-l),
      "accent-ultra-light": hsl($accent-ultra-light-h, $accent-ultra-light-s, $accent-ultra-light-l),
      "accent-light": hsl($accent-light-h, $accent-light-s, $accent-light-l),
      "accent-semi-light": hsl($accent-semi-light-h, $accent-semi-light-s, $accent-semi-light-l),
      "accent-semi-dark": hsl($accent-semi-dark-h, $accent-semi-dark-s, $accent-semi-dark-l),
      "accent-dark": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l),
      "accent-ultra-dark": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l),
    ),
    "trans": (
      "accent-trans-10": rgba($accent-hex, .1),
      "accent-trans-20": rgba($accent-hex, .2),
      "accent-trans-30": rgba($accent-hex, .3),
      "accent-trans-40": rgba($accent-hex, .4),
      "accent-trans-50": rgba($accent-hex, .5),
      "accent-trans-60": rgba($accent-hex, .6),
      "accent-trans-70": rgba($accent-hex, .7),
      "accent-trans-80": rgba($accent-hex, .8),
      "accent-trans-90": rgba($accent-hex, .9),
    ),
    "light-trans": (
      "accent-light-trans-10": hsl($accent-light-h, $accent-light-s, $accent-light-l, .1),
      "accent-light-trans-20": hsl($accent-light-h, $accent-light-s, $accent-light-l, .2),
      "accent-light-trans-30": hsl($accent-light-h, $accent-light-s, $accent-light-l, .3),
      "accent-light-trans-40": hsl($accent-light-h, $accent-light-s, $accent-light-l, .4),
      "accent-light-trans-50": hsl($accent-light-h, $accent-light-s, $accent-light-l, .5),
      "accent-light-trans-60": hsl($accent-light-h, $accent-light-s, $accent-light-l, .6),
      "accent-light-trans-70": hsl($accent-light-h, $accent-light-s, $accent-light-l, .7),
      "accent-light-trans-80": hsl($accent-light-h, $accent-light-s, $accent-light-l, .8),
      "accent-light-trans-90": hsl($accent-light-h, $accent-light-s, $accent-light-l, .9),
    ),
    "dark-trans": (
      "accent-dark-trans-10": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .1),
      "accent-dark-trans-20": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .2),
      "accent-dark-trans-30": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .3),
      "accent-dark-trans-40": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .4),
      "accent-dark-trans-50": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .5),
      "accent-dark-trans-60": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .6),
      "accent-dark-trans-70": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .7),
      "accent-dark-trans-80": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .8),
      "accent-dark-trans-90": hsl($accent-dark-h, $accent-dark-s, $accent-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "accent-ultra-dark-trans-10": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .1),
      "accent-ultra-dark-trans-20": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .2),
      "accent-ultra-dark-trans-30": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .3),
      "accent-ultra-dark-trans-40": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .4),
      "accent-ultra-dark-trans-50": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .5),
      "accent-ultra-dark-trans-60": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .6),
      "accent-ultra-dark-trans-70": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .7),
      "accent-ultra-dark-trans-80": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .8),
      "accent-ultra-dark-trans-90": hsl($accent-ultra-dark-h, $accent-ultra-dark-s, $accent-ultra-dark-l, .9),
    ),
    "partials": (
      "accent-hex": $accent-hex,
        "accent-hsl": $accent-h $accent-s $accent-l,
        "accent-rgb": $accent-r $accent-g $accent-b,
        "accent-r": $accent-r,
        "accent-g": $accent-g,
        "accent-b": $accent-b,
        "accent-h": $accent-h,
        "accent-s": $accent-s,
        "accent-l": $accent-l,
        "accent-hover-h": $accent-hover-h,
        "accent-hover-s": $accent-hover-s,
        "accent-hover-l": $accent-hover-l,
        "accent-ultra-light-h": $accent-ultra-light-h,
        "accent-ultra-light-s": $accent-ultra-light-s,
        "accent-ultra-light-l": $accent-ultra-light-l,
        "accent-light-h": $accent-light-h,
        "accent-light-s": $accent-light-s,
        "accent-light-l": $accent-light-l,
        "accent-semi-light-h": $accent-semi-light-h,
        "accent-semi-light-s": $accent-semi-light-s,
        "accent-semi-light-l": $accent-semi-light-l,
        "accent-semi-dark-h": $accent-semi-dark-h,
        "accent-semi-dark-s": $accent-semi-dark-s,
        "accent-semi-dark-l": $accent-semi-dark-l,
        "accent-dark-h": $accent-dark-h,
        "accent-dark-s": $accent-dark-s,
        "accent-dark-l": $accent-dark-l,
        "accent-ultra-dark-h": $accent-ultra-dark-h,
        "accent-ultra-dark-s": $accent-ultra-dark-s,
        "accent-ultra-dark-l": $accent-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-accent-main-trans == off {
    $color-accent: map-remove($color-accent, "trans");
  }
  @if $option-accent-light-trans == off {
    $color-accent: map-remove($color-accent, "light-trans");
  }
  @if $option-accent-dark-trans == off {
    $color-accent: map-remove($color-accent, "dark-trans");
  }
  @if $option-accent-ultra-dark-trans == off {
    $color-accent: map-remove($color-accent, "ultra-dark-trans");
  }

}

@if $option-accent-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-accent: map-merge($color-accent, (
      "main": map-merge(map-get($color-accent, "main"), (
        "accent-comp": hsl($accent-h + 180, $accent-s, $accent-l)
      )),
      "partials": map-merge(map-get($color-accent, "partials"), (
        "accent-comp-h": $accent-h + 180
      ))
    ));
  }
  // Add medium shade back if enabled
  @if $option-medium-shade == on {
    $color-accent: map-merge($color-accent, (
      "main": map-merge(map-get($color-accent, "main"), (
        "accent-medium": hsl($accent-medium-h, $accent-medium-s, $accent-medium-l)
      )),
      "partials": map-merge(map-get($color-accent, "partials"), (
        "accent-medium-h": $accent-medium-h,
        "accent-medium-s": $accent-medium-s,
        "accent-medium-l": $accent-medium-l
      ))
    ));
  }
}
// Accent Options
$option-accent-clr-alt: off !default;

// Accent Alt Vars
$accent-alt-hex: #e56c70 !default;
$accent-r-alt: 229 !default;
$accent-g-alt: 108 !default;
$accent-b-alt: 112 !default;
$accent-h-alt: 358 !default;
$accent-s-alt: 70% !default;
$accent-l-alt: 66% !default;
$accent-hover-h-alt: 358 !default;
$accent-hover-s-alt: 70% !default;
$accent-hover-l-alt: 1.15 !default;
$accent-ultra-light-h-alt: 358 !default;
$accent-ultra-light-s-alt: 70% !default;
$accent-ultra-light-l-alt: 95% !default;
$accent-light-h-alt: 358 !default;
$accent-light-s-alt: 70% !default;
$accent-light-l-alt: 85% !default;
$accent-medium-h-alt: 358 !default;
$accent-medium-s-alt: 70% !default;
$accent-medium-l-alt: 50% !default;
$accent-dark-h-alt: 358 !default;
$accent-dark-s-alt: 70% !default;
$accent-dark-l-alt: 25% !default;
$accent-ultra-dark-h-alt: 358 !default;
$accent-ultra-dark-s-alt: 70% !default;
$accent-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$accent-semi-light-h-alt: 358 !default;
$accent-semi-light-s-alt: 70% !default;
$accent-semi-light-l-alt: 60% !default;
$accent-semi-dark-h-alt: 358 !default;
$accent-semi-dark-s-alt: 70% !default;
$accent-semi-dark-l-alt: 40% !default;

// Accent Alt Color Map
$color-accent-alt:(); // Initialize Map
@if $option-accent-clr-alt == on and $option-accent-clr == on {
  $color-accent-alt: (
    "main": (
      "accent": $accent-alt-hex,
      "accent-hover": hsl($accent-hover-h-alt, $accent-hover-s-alt, $accent-hover-l-alt),
      "accent-ultra-light": hsl($accent-ultra-light-h-alt, $accent-ultra-light-s-alt, $accent-ultra-light-l-alt),
      "accent-light": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt),
      "accent-semi-light": hsl($accent-semi-light-h-alt, $accent-semi-light-s-alt, $accent-semi-light-l-alt),
      "accent-semi-dark": hsl($accent-semi-dark-h-alt, $accent-semi-dark-s-alt, $accent-semi-dark-l-alt),
      "accent-dark": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt),
      "accent-ultra-dark": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt),
      "accent-comp": hsl($accent-h-alt + 180, $accent-s-alt, $accent-l-alt),
    ),
    "trans": (
      "accent-trans-10": rgba($accent-alt-hex, .1),
      "accent-trans-20": rgba($accent-alt-hex, .2),
      "accent-trans-30": rgba($accent-alt-hex, .3),
      "accent-trans-40": rgba($accent-alt-hex, .4),
      "accent-trans-50": rgba($accent-alt-hex, .5),
      "accent-trans-60": rgba($accent-alt-hex, .6),
      "accent-trans-70": rgba($accent-alt-hex, .7),
      "accent-trans-80": rgba($accent-alt-hex, .8),
      "accent-trans-90": rgba($accent-alt-hex, .9),
    ),
    "light-trans": (
      "accent-light-trans-10": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .1),
      "accent-light-trans-20": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .2),
      "accent-light-trans-30": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .3),
      "accent-light-trans-40": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .4),
      "accent-light-trans-50": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .5),
      "accent-light-trans-60": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .6),
      "accent-light-trans-70": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .7),
      "accent-light-trans-80": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .8),
      "accent-light-trans-90": hsl($accent-light-h-alt, $accent-light-s-alt, $accent-light-l-alt, .9),
    ),
    "dark-trans": (
      "accent-dark-trans-10": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .1),
      "accent-dark-trans-20": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .2),
      "accent-dark-trans-30": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .3),
      "accent-dark-trans-40": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .4),
      "accent-dark-trans-50": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .5),
      "accent-dark-trans-60": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .6),
      "accent-dark-trans-70": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .7),
      "accent-dark-trans-80": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .8),
      "accent-dark-trans-90": hsl($accent-dark-h-alt, $accent-dark-s-alt, $accent-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "accent-ultra-dark-trans-10": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .1),
      "accent-ultra-dark-trans-20": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .2),
      "accent-ultra-dark-trans-30": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .3),
      "accent-ultra-dark-trans-40": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .4),
      "accent-ultra-dark-trans-50": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .5),
      "accent-ultra-dark-trans-60": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .6),
      "accent-ultra-dark-trans-70": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .7),
      "accent-ultra-dark-trans-80": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .8),
      "accent-ultra-dark-trans-90": hsl($accent-ultra-dark-h-alt, $accent-ultra-dark-s-alt, $accent-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "accent-hex": $accent-alt-hex,
        "accent-hsl": $accent-h $accent-s $accent-l-alt,
        "accent-rgb": $accent-r $accent-g $accent-b-alt,
        "accent-r": $accent-r-alt,
        "accent-g": $accent-g-alt,
        "accent-b": $accent-b-alt,
        "accent-h": $accent-h-alt,
        "accent-s": $accent-s-alt,
        "accent-l": $accent-l-alt,
        "accent-hover-h": $accent-hover-h-alt,
        "accent-hover-s": $accent-hover-s-alt,
        "accent-hover-l": $accent-hover-l-alt,
        "accent-ultra-light-h": $accent-ultra-light-h-alt,
        "accent-ultra-light-s": $accent-ultra-light-s-alt,
        "accent-ultra-light-l": $accent-ultra-light-l-alt,
        "accent-light-h": $accent-light-h-alt,
        "accent-light-s": $accent-light-s-alt,
        "accent-light-l": $accent-light-l-alt,
        "accent-semi-light-h": $accent-semi-light-h-alt,
        "accent-semi-light-s": $accent-semi-light-s-alt,
        "accent-semi-light-l": $accent-semi-light-l-alt,
        "accent-semi-dark-h": $accent-semi-dark-h-alt,
        "accent-semi-dark-s": $accent-semi-dark-s-alt,
        "accent-semi-dark-l": $accent-semi-dark-l-alt,
        "accent-dark-h": $accent-dark-h-alt,
        "accent-dark-s": $accent-dark-s-alt,
        "accent-dark-l": $accent-dark-l-alt,
        "accent-ultra-dark-h": $accent-ultra-dark-h-alt,
        "accent-ultra-dark-s": $accent-ultra-dark-s-alt,
        "accent-ultra-dark-l": $accent-ultra-dark-l-alt,
        "accent-comp-h": $accent-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-accent-clr-alt == on and $option-accent-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-accent-alt: map-merge($color-accent-alt, (
      "main": map-merge(map-get($color-accent-alt, "main"), (
        "accent-medium": hsl($accent-medium-h-alt, $accent-medium-s-alt, $accent-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-accent-alt, "partials"), (
        "accent-medium-h": $accent-medium-h-alt,
        "accent-medium-s": $accent-medium-s-alt,
        "accent-medium-l": $accent-medium-l-alt
      ))
    ));
  }
}
// base Options
$option-base-clr: on !default;
$option-base-main-trans: on !default;
$option-base-light-trans: on !default;
$option-base-dark-trans: on !default;
$option-base-ultra-dark-trans: on !default;

// base Vars
$base-hex: #e56c70 !default;
$base-r: 229 !default;
$base-g: 108 !default;
$base-b: 112 !default;
$base-h: 358 !default;
$base-s: 70% !default;
$base-l: 66% !default;
$base-hover-h: 358 !default;
$base-hover-s: 70% !default;
$base-hover-l: 1.15 !default;
$base-ultra-light-h: 358 !default;
$base-ultra-light-s: 70% !default;
$base-ultra-light-l: 95% !default;
$base-light-h: 358 !default;
$base-light-s: 70% !default;
$base-light-l: 85% !default;
$base-medium-h: 358 !default;
$base-medium-s: 70% !default;
$base-medium-l: 50% !default;
$base-dark-h: 358 !default;
$base-dark-s: 70% !default;
$base-dark-l: 25% !default;
$base-ultra-dark-h: 358 !default;
$base-ultra-dark-s: 70% !default;
$base-ultra-dark-l: 10% !default;
// Added in 3.0
$base-semi-light-h: 358 !default;
$base-semi-light-s: 70% !default;
$base-semi-light-l: 60% !default;
$base-semi-dark-h: 358 !default;
$base-semi-dark-s: 70% !default;
$base-semi-dark-l: 40% !default;


// Base Color Map
$color-base:(); // Initialize Map
@if $option-base-clr == on {
  $color-base: (
    "main": (
      "base": $base-hex,
      "base-hover": hsl($base-hover-h, $base-hover-s, $base-hover-l),
      "base-ultra-light": hsl($base-ultra-light-h, $base-ultra-light-s, $base-ultra-light-l),
      "base-light": hsl($base-light-h, $base-light-s, $base-light-l),
      "base-semi-light": hsl($base-semi-light-h, $base-semi-light-s, $base-semi-light-l),
      "base-semi-dark": hsl($base-semi-dark-h, $base-semi-dark-s, $base-semi-dark-l),
      "base-dark": hsl($base-dark-h, $base-dark-s, $base-dark-l),
      "base-ultra-dark": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l),
    ),
    "trans": (
      "base-trans-10": rgba($base-hex, .1),
      "base-trans-20": rgba($base-hex, .2),
      "base-trans-30": rgba($base-hex, .3),
      "base-trans-40": rgba($base-hex, .4),
      "base-trans-50": rgba($base-hex, .5),
      "base-trans-60": rgba($base-hex, .6),
      "base-trans-70": rgba($base-hex, .7),
      "base-trans-80": rgba($base-hex, .8),
      "base-trans-90": rgba($base-hex, .9),
    ),
    "light-trans": (
      "base-light-trans-10": hsl($base-light-h, $base-light-s, $base-light-l, .1),
      "base-light-trans-20": hsl($base-light-h, $base-light-s, $base-light-l, .2),
      "base-light-trans-30": hsl($base-light-h, $base-light-s, $base-light-l, .3),
      "base-light-trans-40": hsl($base-light-h, $base-light-s, $base-light-l, .4),
      "base-light-trans-50": hsl($base-light-h, $base-light-s, $base-light-l, .5),
      "base-light-trans-60": hsl($base-light-h, $base-light-s, $base-light-l, .6),
      "base-light-trans-70": hsl($base-light-h, $base-light-s, $base-light-l, .7),
      "base-light-trans-80": hsl($base-light-h, $base-light-s, $base-light-l, .8),
      "base-light-trans-90": hsl($base-light-h, $base-light-s, $base-light-l, .9),
    ),
    "dark-trans": (
      "base-dark-trans-10": hsl($base-dark-h, $base-dark-s, $base-dark-l, .1),
      "base-dark-trans-20": hsl($base-dark-h, $base-dark-s, $base-dark-l, .2),
      "base-dark-trans-30": hsl($base-dark-h, $base-dark-s, $base-dark-l, .3),
      "base-dark-trans-40": hsl($base-dark-h, $base-dark-s, $base-dark-l, .4),
      "base-dark-trans-50": hsl($base-dark-h, $base-dark-s, $base-dark-l, .5),
      "base-dark-trans-60": hsl($base-dark-h, $base-dark-s, $base-dark-l, .6),
      "base-dark-trans-70": hsl($base-dark-h, $base-dark-s, $base-dark-l, .7),
      "base-dark-trans-80": hsl($base-dark-h, $base-dark-s, $base-dark-l, .8),
      "base-dark-trans-90": hsl($base-dark-h, $base-dark-s, $base-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "base-ultra-dark-trans-10": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .1),
      "base-ultra-dark-trans-20": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .2),
      "base-ultra-dark-trans-30": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .3),
      "base-ultra-dark-trans-40": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .4),
      "base-ultra-dark-trans-50": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .5),
      "base-ultra-dark-trans-60": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .6),
      "base-ultra-dark-trans-70": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .7),
      "base-ultra-dark-trans-80": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .8),
      "base-ultra-dark-trans-90": hsl($base-ultra-dark-h, $base-ultra-dark-s, $base-ultra-dark-l, .9),
    ),
    "partials": (
      "base-hex": $base-hex,
        "base-hsl": $base-h $base-s $base-l,
        "base-rgb": $base-r $base-g $base-b,
        "base-r": $base-r,
        "base-g": $base-g,
        "base-b": $base-b,
        "base-h": $base-h,
        "base-s": $base-s,
        "base-l": $base-l,
        "base-hover-h": $base-hover-h,
        "base-hover-s": $base-hover-s,
        "base-hover-l": $base-hover-l,
        "base-ultra-light-h": $base-ultra-light-h,
        "base-ultra-light-s": $base-ultra-light-s,
        "base-ultra-light-l": $base-ultra-light-l,
        "base-light-h": $base-light-h,
        "base-light-s": $base-light-s,
        "base-light-l": $base-light-l,
        "base-semi-light-h": $base-semi-light-h,
        "base-semi-light-s": $base-semi-light-s,
        "base-semi-light-l": $base-semi-light-l,
        "base-semi-dark-h": $base-semi-dark-h,
        "base-semi-dark-s": $base-semi-dark-s,
        "base-semi-dark-l": $base-semi-dark-l,
        "base-dark-h": $base-dark-h,
        "base-dark-s": $base-dark-s,
        "base-dark-l": $base-dark-l,
        "base-ultra-dark-h": $base-ultra-dark-h,
        "base-ultra-dark-s": $base-ultra-dark-s,
        "base-ultra-dark-l": $base-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-base-main-trans == off {
    $color-base: map-remove($color-base, "trans");
  }
  @if $option-base-light-trans == off {
    $color-base: map-remove($color-base, "light-trans");
  }
  @if $option-base-dark-trans == off {
    $color-base: map-remove($color-base, "dark-trans");
  }
  @if $option-base-ultra-dark-trans == off {
    $color-base: map-remove($color-base, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-base-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-base: map-merge($color-base, (
      "main": map-merge(map-get($color-base, "main"), (
        "base-comp": hsl($base-h + 180, $base-s, $base-l)
      )),
      "partials": map-merge(map-get($color-base, "partials"), (
        "base-comp-h": $base-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-base: map-merge($color-base, (
      "main": map-merge(map-get($color-base, "main"), (
        "base-medium": hsl($base-medium-h, $base-medium-s, $base-medium-l)
      )),
      "partials": map-merge(map-get($color-base, "partials"), (
        "base-medium-h": $base-medium-h,
        "base-medium-s": $base-medium-s,
        "base-medium-l": $base-medium-l
      ))
    ));
  }
}
// base Options
$option-base-clr-alt: off !default;

// base Alt Vars
$base-alt-hex: #e56c70 !default;
$base-r-alt: 229 !default;
$base-g-alt: 108 !default;
$base-b-alt: 112 !default;
$base-h-alt: 358 !default;
$base-s-alt: 70% !default;
$base-l-alt: 66% !default;
$base-hover-h-alt: 358 !default;
$base-hover-s-alt: 70% !default;
$base-hover-l-alt: 1.15 !default;
$base-ultra-light-h-alt: 358 !default;
$base-ultra-light-s-alt: 70% !default;
$base-ultra-light-l-alt: 95% !default;
$base-light-h-alt: 358 !default;
$base-light-s-alt: 70% !default;
$base-light-l-alt: 85% !default;
$base-medium-h-alt: 358 !default;
$base-medium-s-alt: 70% !default;
$base-medium-l-alt: 50% !default;
$base-dark-h-alt: 358 !default;
$base-dark-s-alt: 70% !default;
$base-dark-l-alt: 25% !default;
$base-ultra-dark-h-alt: 358 !default;
$base-ultra-dark-s-alt: 70% !default;
$base-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$base-semi-light-h-alt: 358 !default;
$base-semi-light-s-alt: 70% !default;
$base-semi-light-l-alt: 60% !default;
$base-semi-dark-h-alt: 358 !default;
$base-semi-dark-s-alt: 70% !default;
$base-semi-dark-l-alt: 40% !default;

// Base Alt Color Map
$color-base-alt:(); // Initialize Map
@if $option-base-clr-alt == on and $option-base-clr == on {
  $color-base-alt: (
    "main": (
      "base": $base-alt-hex,
      "base-hover": hsl($base-hover-h-alt, $base-hover-s-alt, $base-hover-l-alt),
      "base-ultra-light": hsl($base-ultra-light-h-alt, $base-ultra-light-s-alt, $base-ultra-light-l-alt),
      "base-light": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt),
      "base-semi-light": hsl($base-semi-light-h-alt, $base-semi-light-s-alt, $base-semi-light-l-alt),
      "base-semi-dark": hsl($base-semi-dark-h-alt, $base-semi-dark-s-alt, $base-semi-dark-l-alt),
      "base-dark": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt),
      "base-ultra-dark": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt),
      "base-comp": hsl($base-h-alt + 180, $base-s-alt, $base-l-alt),
    ),
    "trans": (
      "base-trans-10": rgba($base-alt-hex, .1),
      "base-trans-20": rgba($base-alt-hex, .2),
      "base-trans-30": rgba($base-alt-hex, .3),
      "base-trans-40": rgba($base-alt-hex, .4),
      "base-trans-50": rgba($base-alt-hex, .5),
      "base-trans-60": rgba($base-alt-hex, .6),
      "base-trans-70": rgba($base-alt-hex, .7),
      "base-trans-80": rgba($base-alt-hex, .8),
      "base-trans-90": rgba($base-alt-hex, .9),
    ),
    "light-trans": (
      "base-light-trans-10": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .1),
      "base-light-trans-20": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .2),
      "base-light-trans-30": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .3),
      "base-light-trans-40": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .4),
      "base-light-trans-50": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .5),
      "base-light-trans-60": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .6),
      "base-light-trans-70": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .7),
      "base-light-trans-80": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .8),
      "base-light-trans-90": hsl($base-light-h-alt, $base-light-s-alt, $base-light-l-alt, .9),
    ),
    "dark-trans": (
      "base-dark-trans-10": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .1),
      "base-dark-trans-20": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .2),
      "base-dark-trans-30": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .3),
      "base-dark-trans-40": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .4),
      "base-dark-trans-50": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .5),
      "base-dark-trans-60": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .6),
      "base-dark-trans-70": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .7),
      "base-dark-trans-80": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .8),
      "base-dark-trans-90": hsl($base-dark-h-alt, $base-dark-s-alt, $base-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "base-ultra-dark-trans-10": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .1),
      "base-ultra-dark-trans-20": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .2),
      "base-ultra-dark-trans-30": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .3),
      "base-ultra-dark-trans-40": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .4),
      "base-ultra-dark-trans-50": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .5),
      "base-ultra-dark-trans-60": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .6),
      "base-ultra-dark-trans-70": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .7),
      "base-ultra-dark-trans-80": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .8),
      "base-ultra-dark-trans-90": hsl($base-ultra-dark-h-alt, $base-ultra-dark-s-alt, $base-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "base-hex": $base-alt-hex,
        "base-hsl": $base-h $base-s $base-l-alt,
        "base-rgb": $base-r $base-g $base-b-alt,
        "base-r": $base-r-alt,
        "base-g": $base-g-alt,
        "base-b": $base-b-alt,
        "base-h": $base-h-alt,
        "base-s": $base-s-alt,
        "base-l": $base-l-alt,
        "base-hover-h": $base-hover-h-alt,
        "base-hover-s": $base-hover-s-alt,
        "base-hover-l": $base-hover-l-alt,
        "base-ultra-light-h": $base-ultra-light-h-alt,
        "base-ultra-light-s": $base-ultra-light-s-alt,
        "base-ultra-light-l": $base-ultra-light-l-alt,
        "base-light-h": $base-light-h-alt,
        "base-light-s": $base-light-s-alt,
        "base-light-l": $base-light-l-alt,
        "base-semi-light-h": $base-semi-light-h-alt,
        "base-semi-light-s": $base-semi-light-s-alt,
        "base-semi-light-l": $base-semi-light-l-alt,
        "base-semi-dark-h": $base-semi-dark-h-alt,
        "base-semi-dark-s": $base-semi-dark-s-alt,
        "base-semi-dark-l": $base-semi-dark-l-alt,
        "base-dark-h": $base-dark-h-alt,
        "base-dark-s": $base-dark-s-alt,
        "base-dark-l": $base-dark-l-alt,
        "base-ultra-dark-h": $base-ultra-dark-h-alt,
        "base-ultra-dark-s": $base-ultra-dark-s-alt,
        "base-ultra-dark-l": $base-ultra-dark-l-alt,
        "base-comp-h": $base-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-base-clr-alt == on and $option-base-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-base-alt: map-merge($color-base-alt, (
      "main": map-merge(map-get($color-base-alt, "main"), (
        "base-medium": hsl($base-medium-h-alt, $base-medium-s-alt, $base-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-base-alt, "partials"), (
        "base-medium-h": $base-medium-h-alt,
        "base-medium-s": $base-medium-s-alt,
        "base-medium-l": $base-medium-l-alt
      ))
    ));
  }
}
// neutral Options
$option-neutral-clr: on !default;
$option-neutral-main-trans: on !default;
$option-neutral-light-trans: on !default;
$option-neutral-dark-trans: on !default;
$option-neutral-ultra-dark-trans: on !default;

// neutral Vars
$neutral-hex: #e56c70 !default;
$neutral-r: 229 !default;
$neutral-g: 108 !default;
$neutral-b: 112 !default;
$neutral-h: 358 !default;
$neutral-s: 70% !default;
$neutral-l: 66% !default;
$neutral-hover-h: 358 !default;
$neutral-hover-s: 70% !default;
$neutral-hover-l: 1.15 !default;
$neutral-ultra-light-h: 358 !default;
$neutral-ultra-light-s: 70% !default;
$neutral-ultra-light-l: 95% !default;
$neutral-light-h: 358 !default;
$neutral-light-s: 70% !default;
$neutral-light-l: 85% !default;
$neutral-medium-h: 358 !default;
$neutral-medium-s: 70% !default;
$neutral-medium-l: 50% !default;
$neutral-dark-h: 358 !default;
$neutral-dark-s: 70% !default;
$neutral-dark-l: 25% !default;
$neutral-ultra-dark-h: 358 !default;
$neutral-ultra-dark-s: 70% !default;
$neutral-ultra-dark-l: 10% !default;
// Added in 3.0
$neutral-semi-light-h: 358 !default;
$neutral-semi-light-s: 70% !default;
$neutral-semi-light-l: 60% !default;
$neutral-semi-dark-h: 358 !default;
$neutral-semi-dark-s: 70% !default;
$neutral-semi-dark-l: 40% !default;


// Neutral Color Map
$color-neutral:(); // Initialize Map
@if $option-neutral-clr == on {
  $color-neutral: (
    "main": (
      "neutral": $neutral-hex,
      "neutral-hover": hsl($neutral-hover-h, $neutral-hover-s, $neutral-hover-l),
      "neutral-ultra-light": hsl($neutral-ultra-light-h, $neutral-ultra-light-s, $neutral-ultra-light-l),
      "neutral-light": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l),
      "neutral-semi-light": hsl($neutral-semi-light-h, $neutral-semi-light-s, $neutral-semi-light-l),
      "neutral-semi-dark": hsl($neutral-semi-dark-h, $neutral-semi-dark-s, $neutral-semi-dark-l),
      "neutral-dark": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l),
      "neutral-ultra-dark": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l),
    ),
    "trans": (
      "neutral-trans-10": rgba($neutral-hex, .1),
      "neutral-trans-20": rgba($neutral-hex, .2),
      "neutral-trans-30": rgba($neutral-hex, .3),
      "neutral-trans-40": rgba($neutral-hex, .4),
      "neutral-trans-50": rgba($neutral-hex, .5),
      "neutral-trans-60": rgba($neutral-hex, .6),
      "neutral-trans-70": rgba($neutral-hex, .7),
      "neutral-trans-80": rgba($neutral-hex, .8),
      "neutral-trans-90": rgba($neutral-hex, .9),
    ),
    "light-trans": (
      "neutral-light-trans-10": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .1),
      "neutral-light-trans-20": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .2),
      "neutral-light-trans-30": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .3),
      "neutral-light-trans-40": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .4),
      "neutral-light-trans-50": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .5),
      "neutral-light-trans-60": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .6),
      "neutral-light-trans-70": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .7),
      "neutral-light-trans-80": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .8),
      "neutral-light-trans-90": hsl($neutral-light-h, $neutral-light-s, $neutral-light-l, .9),
    ),
    "dark-trans": (
      "neutral-dark-trans-10": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .1),
      "neutral-dark-trans-20": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .2),
      "neutral-dark-trans-30": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .3),
      "neutral-dark-trans-40": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .4),
      "neutral-dark-trans-50": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .5),
      "neutral-dark-trans-60": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .6),
      "neutral-dark-trans-70": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .7),
      "neutral-dark-trans-80": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .8),
      "neutral-dark-trans-90": hsl($neutral-dark-h, $neutral-dark-s, $neutral-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "neutral-ultra-dark-trans-10": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .1),
      "neutral-ultra-dark-trans-20": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .2),
      "neutral-ultra-dark-trans-30": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .3),
      "neutral-ultra-dark-trans-40": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .4),
      "neutral-ultra-dark-trans-50": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .5),
      "neutral-ultra-dark-trans-60": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .6),
      "neutral-ultra-dark-trans-70": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .7),
      "neutral-ultra-dark-trans-80": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .8),
      "neutral-ultra-dark-trans-90": hsl($neutral-ultra-dark-h, $neutral-ultra-dark-s, $neutral-ultra-dark-l, .9),
    ),
    "partials": (
      "neutral-hex": $neutral-hex,
        "neutral-hsl": $neutral-h $neutral-s $neutral-l,
        "neutral-rgb": $neutral-r $neutral-g $neutral-b,
        "neutral-r": $neutral-r,
        "neutral-g": $neutral-g,
        "neutral-b": $neutral-b,
        "neutral-h": $neutral-h,
        "neutral-s": $neutral-s,
        "neutral-l": $neutral-l,
        "neutral-hover-h": $neutral-hover-h,
        "neutral-hover-s": $neutral-hover-s,
        "neutral-hover-l": $neutral-hover-l,
        "neutral-ultra-light-h": $neutral-ultra-light-h,
        "neutral-ultra-light-s": $neutral-ultra-light-s,
        "neutral-ultra-light-l": $neutral-ultra-light-l,
        "neutral-light-h": $neutral-light-h,
        "neutral-light-s": $neutral-light-s,
        "neutral-light-l": $neutral-light-l,
        "neutral-semi-light-h": $neutral-semi-light-h,
        "neutral-semi-light-s": $neutral-semi-light-s,
        "neutral-semi-light-l": $neutral-semi-light-l,
        "neutral-semi-dark-h": $neutral-semi-dark-h,
        "neutral-semi-dark-s": $neutral-semi-dark-s,
        "neutral-semi-dark-l": $neutral-semi-dark-l,
        "neutral-dark-h": $neutral-dark-h,
        "neutral-dark-s": $neutral-dark-s,
        "neutral-dark-l": $neutral-dark-l,
        "neutral-ultra-dark-h": $neutral-ultra-dark-h,
        "neutral-ultra-dark-s": $neutral-ultra-dark-s,
        "neutral-ultra-dark-l": $neutral-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-neutral-main-trans == off {
    $color-neutral: map-remove($color-neutral, "trans");
  }
  @if $option-neutral-light-trans == off {
    $color-neutral: map-remove($color-neutral, "light-trans");
  }
  @if $option-neutral-dark-trans == off {
    $color-neutral: map-remove($color-neutral, "dark-trans");
  }
  @if $option-neutral-ultra-dark-trans == off {
    $color-neutral: map-remove($color-neutral, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-neutral-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-neutral: map-merge($color-neutral, (
      "main": map-merge(map-get($color-neutral, "main"), (
        "neutral-comp": hsl($neutral-h + 180, $neutral-s, $neutral-l)
      )),
      "partials": map-merge(map-get($color-neutral, "partials"), (
        "neutral-comp-h": $neutral-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-neutral: map-merge($color-neutral, (
      "main": map-merge(map-get($color-neutral, "main"), (
        "neutral-medium": hsl($neutral-medium-h, $neutral-medium-s, $neutral-medium-l)
      )),
      "partials": map-merge(map-get($color-neutral, "partials"), (
        "neutral-medium-h": $neutral-medium-h,
        "neutral-medium-s": $neutral-medium-s,
        "neutral-medium-l": $neutral-medium-l
      ))
    ));
  }
}

// neutral Options
$option-neutral-clr-alt: off !default;

// neutral Alt Vars
$neutral-alt-hex: #e56c70 !default;
$neutral-r-alt: 229 !default;
$neutral-g-alt: 108 !default;
$neutral-b-alt: 112 !default;
$neutral-h-alt: 358 !default;
$neutral-s-alt: 70% !default;
$neutral-l-alt: 66% !default;
$neutral-hover-h-alt: 358 !default;
$neutral-hover-s-alt: 70% !default;
$neutral-hover-l-alt: 1.15 !default;
$neutral-ultra-light-h-alt: 358 !default;
$neutral-ultra-light-s-alt: 70% !default;
$neutral-ultra-light-l-alt: 95% !default;
$neutral-light-h-alt: 358 !default;
$neutral-light-s-alt: 70% !default;
$neutral-light-l-alt: 85% !default;
$neutral-medium-h-alt: 358 !default;
$neutral-medium-s-alt: 70% !default;
$neutral-medium-l-alt: 50% !default;
$neutral-dark-h-alt: 358 !default;
$neutral-dark-s-alt: 70% !default;
$neutral-dark-l-alt: 25% !default;
$neutral-ultra-dark-h-alt: 358 !default;
$neutral-ultra-dark-s-alt: 70% !default;
$neutral-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$neutral-semi-light-h-alt: 358 !default;
$neutral-semi-light-s-alt: 70% !default;
$neutral-semi-light-l-alt: 60% !default;
$neutral-semi-dark-h-alt: 358 !default;
$neutral-semi-dark-s-alt: 70% !default;
$neutral-semi-dark-l-alt: 40% !default;

// Neutral Alt Color Map
$color-neutral-alt:(); // Initialize Map
@if $option-neutral-clr-alt == on and $option-neutral-clr == on {
  $color-neutral-alt: (
    "main": (
      "neutral": $neutral-alt-hex,
      "neutral-hover": hsl($neutral-hover-h-alt, $neutral-hover-s-alt, $neutral-hover-l-alt),
      "neutral-ultra-light": hsl($neutral-ultra-light-h-alt, $neutral-ultra-light-s-alt, $neutral-ultra-light-l-alt),
      "neutral-light": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt),
      "neutral-semi-light": hsl($neutral-semi-light-h-alt, $neutral-semi-light-s-alt, $neutral-semi-light-l-alt),
      "neutral-semi-dark": hsl($neutral-semi-dark-h-alt, $neutral-semi-dark-s-alt, $neutral-semi-dark-l-alt),
      "neutral-dark": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt),
      "neutral-ultra-dark": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt),
      "neutral-comp": hsl($neutral-h-alt + 180, $neutral-s-alt, $neutral-l-alt),
    ),
    "trans": (
      "neutral-trans-10": rgba($neutral-alt-hex, .1),
      "neutral-trans-20": rgba($neutral-alt-hex, .2),
      "neutral-trans-30": rgba($neutral-alt-hex, .3),
      "neutral-trans-40": rgba($neutral-alt-hex, .4),
      "neutral-trans-50": rgba($neutral-alt-hex, .5),
      "neutral-trans-60": rgba($neutral-alt-hex, .6),
      "neutral-trans-70": rgba($neutral-alt-hex, .7),
      "neutral-trans-80": rgba($neutral-alt-hex, .8),
      "neutral-trans-90": rgba($neutral-alt-hex, .9),
    ),
    "light-trans": (
      "neutral-light-trans-10": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .1),
      "neutral-light-trans-20": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .2),
      "neutral-light-trans-30": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .3),
      "neutral-light-trans-40": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .4),
      "neutral-light-trans-50": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .5),
      "neutral-light-trans-60": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .6),
      "neutral-light-trans-70": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .7),
      "neutral-light-trans-80": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .8),
      "neutral-light-trans-90": hsl($neutral-light-h-alt, $neutral-light-s-alt, $neutral-light-l-alt, .9),
    ),
    "dark-trans": (
      "neutral-dark-trans-10": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .1),
      "neutral-dark-trans-20": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .2),
      "neutral-dark-trans-30": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .3),
      "neutral-dark-trans-40": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .4),
      "neutral-dark-trans-50": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .5),
      "neutral-dark-trans-60": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .6),
      "neutral-dark-trans-70": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .7),
      "neutral-dark-trans-80": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .8),
      "neutral-dark-trans-90": hsl($neutral-dark-h-alt, $neutral-dark-s-alt, $neutral-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "neutral-ultra-dark-trans-10": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .1),
      "neutral-ultra-dark-trans-20": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .2),
      "neutral-ultra-dark-trans-30": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .3),
      "neutral-ultra-dark-trans-40": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .4),
      "neutral-ultra-dark-trans-50": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .5),
      "neutral-ultra-dark-trans-60": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .6),
      "neutral-ultra-dark-trans-70": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .7),
      "neutral-ultra-dark-trans-80": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .8),
      "neutral-ultra-dark-trans-90": hsl($neutral-ultra-dark-h-alt, $neutral-ultra-dark-s-alt, $neutral-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "neutral-hex": $neutral-alt-hex,
        "neutral-hsl": $neutral-h $neutral-s $neutral-l-alt,
        "neutral-rgb": $neutral-r $neutral-g $neutral-b-alt,
        "neutral-r": $neutral-r-alt,
        "neutral-g": $neutral-g-alt,
        "neutral-b": $neutral-b-alt,
        "neutral-h": $neutral-h-alt,
        "neutral-s": $neutral-s-alt,
        "neutral-l": $neutral-l-alt,
        "neutral-hover-h": $neutral-hover-h-alt,
        "neutral-hover-s": $neutral-hover-s-alt,
        "neutral-hover-l": $neutral-hover-l-alt,
        "neutral-ultra-light-h": $neutral-ultra-light-h-alt,
        "neutral-ultra-light-s": $neutral-ultra-light-s-alt,
        "neutral-ultra-light-l": $neutral-ultra-light-l-alt,
        "neutral-light-h": $neutral-light-h-alt,
        "neutral-light-s": $neutral-light-s-alt,
        "neutral-light-l": $neutral-light-l-alt,
        "neutral-semi-light-h": $neutral-semi-light-h-alt,
        "neutral-semi-light-s": $neutral-semi-light-s-alt,
        "neutral-semi-light-l": $neutral-semi-light-l-alt,
        "neutral-semi-dark-h": $neutral-semi-dark-h-alt,
        "neutral-semi-dark-s": $neutral-semi-dark-s-alt,
        "neutral-semi-dark-l": $neutral-semi-dark-l-alt,
        "neutral-dark-h": $neutral-dark-h-alt,
        "neutral-dark-s": $neutral-dark-s-alt,
        "neutral-dark-l": $neutral-dark-l-alt,
        "neutral-ultra-dark-h": $neutral-ultra-dark-h-alt,
        "neutral-ultra-dark-s": $neutral-ultra-dark-s-alt,
        "neutral-ultra-dark-l": $neutral-ultra-dark-l-alt,
        "neutral-comp-h": $neutral-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-neutral-clr-alt == on and $option-neutral-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-neutral-alt: map-merge($color-neutral-alt, (
      "main": map-merge(map-get($color-neutral-alt, "main"), (
        "neutral-medium": hsl($neutral-medium-h-alt, $neutral-medium-s-alt, $neutral-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-neutral-alt, "partials"), (
        "neutral-medium-h": $neutral-medium-h-alt,
        "neutral-medium-s": $neutral-medium-s-alt,
        "neutral-medium-l": $neutral-medium-l-alt
      ))
    ));
  }
}
// Black and White Map
$color-bw:(
  "main": (
    "white": #fff,
    "black": #000,
  ),
  "dark-trans": (
    "black-trans-10": hsl(0, 0%, 0%, 0.1),
    "black-trans-20": hsl(0, 0%, 0%, 0.2),
    "black-trans-30": hsl(0, 0%, 0%, 0.3),
    "black-trans-40": hsl(0, 0%, 0%, 0.4),
    "black-trans-50": hsl(0, 0%, 0%, 0.5),
    "black-trans-60": hsl(0, 0%, 0%, 0.6),
    "black-trans-70": hsl(0, 0%, 0%, 0.7),
    "black-trans-80": hsl(0, 0%, 0%, 0.8),
    "black-trans-90": hsl(0, 0%, 0%, 0.9),
  ),
  "light-trans": (
    "white-trans-10": rgb(255, 255, 255, 0.1),
    "white-trans-20": rgb(255, 255, 255, 0.2),
    "white-trans-30": rgb(255, 255, 255, 0.3),
    "white-trans-40": rgb(255, 255, 255, 0.4),
    "white-trans-50": rgb(255, 255, 255, 0.5),
    "white-trans-60": rgb(255, 255, 255, 0.6),
    "white-trans-70": rgb(255, 255, 255, 0.7),
    "white-trans-80": rgb(255, 255, 255, 0.8),
    "white-trans-90": rgb(255, 255, 255, 0.9),
  ),
);
// Black and White Alt Map
$color-bw-alt:(
  "main": (
    "white": #000,
    "black": #fff,
  ),
  "dark-trans": (
    "black-trans-10": rgb(255, 255, 255, 0.1),
    "black-trans-20": rgb(255, 255, 255, 0.2),
    "black-trans-30": rgb(255, 255, 255, 0.3),
    "black-trans-40": rgb(255, 255, 255, 0.4),
    "black-trans-50": rgb(255, 255, 255, 0.5),
    "black-trans-60": rgb(255, 255, 255, 0.6),
    "black-trans-70": rgb(255, 255, 255, 0.7),
    "black-trans-80": rgb(255, 255, 255, 0.8),
    "black-trans-90": rgb(255, 255, 255, 0.9),
  ),
  "light-trans": (
    "white-trans-10": hsl(0, 0%, 0%, 0.1),
    "white-trans-20": hsl(0, 0%, 0%, 0.2),
    "white-trans-30": hsl(0, 0%, 0%, 0.3),
    "white-trans-40": hsl(0, 0%, 0%, 0.4),
    "white-trans-50": hsl(0, 0%, 0%, 0.5),
    "white-trans-60": hsl(0, 0%, 0%, 0.6),
    "white-trans-70": hsl(0, 0%, 0%, 0.7),
    "white-trans-80": hsl(0, 0%, 0%, 0.8),
    "white-trans-90": hsl(0, 0%, 0%, 0.9),
  ),
);

// Import Status Colors
// danger Options
$option-danger-clr: on !default;
$option-danger-main-trans: on !default;
$option-danger-light-trans: on !default;
$option-danger-dark-trans: on !default;
$option-danger-ultra-dark-trans: on !default;

// danger Vars
$danger-hex: #e56c70 !default;
$danger-r: 229 !default;
$danger-g: 108 !default;
$danger-b: 112 !default;
$danger-h: 358 !default;
$danger-s: 70% !default;
$danger-l: 66% !default;
$danger-hover-h: 358 !default;
$danger-hover-s: 70% !default;
$danger-hover-l: 1.15 !default;
$danger-ultra-light-h: 358 !default;
$danger-ultra-light-s: 70% !default;
$danger-ultra-light-l: 95% !default;
$danger-light-h: 358 !default;
$danger-light-s: 70% !default;
$danger-light-l: 85% !default;
$danger-medium-h: 358 !default;
$danger-medium-s: 70% !default;
$danger-medium-l: 50% !default;
$danger-dark-h: 358 !default;
$danger-dark-s: 70% !default;
$danger-dark-l: 25% !default;
$danger-ultra-dark-h: 358 !default;
$danger-ultra-dark-s: 70% !default;
$danger-ultra-dark-l: 10% !default;
// Added in 3.0
$danger-semi-light-h: 358 !default;
$danger-semi-light-s: 70% !default;
$danger-semi-light-l: 60% !default;
$danger-semi-dark-h: 358 !default;
$danger-semi-dark-s: 70% !default;
$danger-semi-dark-l: 40% !default;


// Danger Color Map
$color-danger:(); // Initialize Map
@if $option-danger-clr == on {
  $color-danger: (
    "main": (
      "danger": $danger-hex,
      "danger-hover": hsl($danger-hover-h, $danger-hover-s, $danger-hover-l),
      "danger-ultra-light": hsl($danger-ultra-light-h, $danger-ultra-light-s, $danger-ultra-light-l),
      "danger-light": hsl($danger-light-h, $danger-light-s, $danger-light-l),
      "danger-semi-light": hsl($danger-semi-light-h, $danger-semi-light-s, $danger-semi-light-l),
      "danger-semi-dark": hsl($danger-semi-dark-h, $danger-semi-dark-s, $danger-semi-dark-l),
      "danger-dark": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l),
      "danger-ultra-dark": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l),
    ),
    "trans": (
      "danger-trans-10": rgba($danger-hex, .1),
      "danger-trans-20": rgba($danger-hex, .2),
      "danger-trans-30": rgba($danger-hex, .3),
      "danger-trans-40": rgba($danger-hex, .4),
      "danger-trans-50": rgba($danger-hex, .5),
      "danger-trans-60": rgba($danger-hex, .6),
      "danger-trans-70": rgba($danger-hex, .7),
      "danger-trans-80": rgba($danger-hex, .8),
      "danger-trans-90": rgba($danger-hex, .9),
    ),
    "light-trans": (
      "danger-light-trans-10": hsl($danger-light-h, $danger-light-s, $danger-light-l, .1),
      "danger-light-trans-20": hsl($danger-light-h, $danger-light-s, $danger-light-l, .2),
      "danger-light-trans-30": hsl($danger-light-h, $danger-light-s, $danger-light-l, .3),
      "danger-light-trans-40": hsl($danger-light-h, $danger-light-s, $danger-light-l, .4),
      "danger-light-trans-50": hsl($danger-light-h, $danger-light-s, $danger-light-l, .5),
      "danger-light-trans-60": hsl($danger-light-h, $danger-light-s, $danger-light-l, .6),
      "danger-light-trans-70": hsl($danger-light-h, $danger-light-s, $danger-light-l, .7),
      "danger-light-trans-80": hsl($danger-light-h, $danger-light-s, $danger-light-l, .8),
      "danger-light-trans-90": hsl($danger-light-h, $danger-light-s, $danger-light-l, .9),
    ),
    "dark-trans": (
      "danger-dark-trans-10": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .1),
      "danger-dark-trans-20": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .2),
      "danger-dark-trans-30": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .3),
      "danger-dark-trans-40": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .4),
      "danger-dark-trans-50": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .5),
      "danger-dark-trans-60": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .6),
      "danger-dark-trans-70": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .7),
      "danger-dark-trans-80": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .8),
      "danger-dark-trans-90": hsl($danger-dark-h, $danger-dark-s, $danger-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "danger-ultra-dark-trans-10": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .1),
      "danger-ultra-dark-trans-20": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .2),
      "danger-ultra-dark-trans-30": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .3),
      "danger-ultra-dark-trans-40": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .4),
      "danger-ultra-dark-trans-50": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .5),
      "danger-ultra-dark-trans-60": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .6),
      "danger-ultra-dark-trans-70": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .7),
      "danger-ultra-dark-trans-80": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .8),
      "danger-ultra-dark-trans-90": hsl($danger-ultra-dark-h, $danger-ultra-dark-s, $danger-ultra-dark-l, .9),
    ),
    "partials": (
      "danger-hex": $danger-hex,
        "danger-hsl": $danger-h $danger-s $danger-l,
        "danger-rgb": $danger-r $danger-g $danger-b,
        "danger-r": $danger-r,
        "danger-g": $danger-g,
        "danger-b": $danger-b,
        "danger-h": $danger-h,
        "danger-s": $danger-s,
        "danger-l": $danger-l,
        "danger-hover-h": $danger-hover-h,
        "danger-hover-s": $danger-hover-s,
        "danger-hover-l": $danger-hover-l,
        "danger-ultra-light-h": $danger-ultra-light-h,
        "danger-ultra-light-s": $danger-ultra-light-s,
        "danger-ultra-light-l": $danger-ultra-light-l,
        "danger-light-h": $danger-light-h,
        "danger-light-s": $danger-light-s,
        "danger-light-l": $danger-light-l,
        "danger-semi-light-h": $danger-semi-light-h,
        "danger-semi-light-s": $danger-semi-light-s,
        "danger-semi-light-l": $danger-semi-light-l,
        "danger-semi-dark-h": $danger-semi-dark-h,
        "danger-semi-dark-s": $danger-semi-dark-s,
        "danger-semi-dark-l": $danger-semi-dark-l,
        "danger-dark-h": $danger-dark-h,
        "danger-dark-s": $danger-dark-s,
        "danger-dark-l": $danger-dark-l,
        "danger-ultra-dark-h": $danger-ultra-dark-h,
        "danger-ultra-dark-s": $danger-ultra-dark-s,
        "danger-ultra-dark-l": $danger-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-danger-main-trans == off {
    $color-danger: map-remove($color-danger, "trans");
  }
  @if $option-danger-light-trans == off {
    $color-danger: map-remove($color-danger, "light-trans");
  }
  @if $option-danger-dark-trans == off {
    $color-danger: map-remove($color-danger, "dark-trans");
  }
  @if $option-danger-ultra-dark-trans == off {
    $color-danger: map-remove($color-danger, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-danger-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-danger: map-merge($color-danger, (
      "main": map-merge(map-get($color-danger, "main"), (
        "danger-comp": hsl($danger-h + 180, $danger-s, $danger-l)
      )),
      "partials": map-merge(map-get($color-danger, "partials"), (
        "danger-comp-h": $danger-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-danger: map-merge($color-danger, (
      "main": map-merge(map-get($color-danger, "main"), (
        "danger-medium": hsl($danger-medium-h, $danger-medium-s, $danger-medium-l)
      )),
      "partials": map-merge(map-get($color-danger, "partials"), (
        "danger-medium-h": $danger-medium-h,
        "danger-medium-s": $danger-medium-s,
        "danger-medium-l": $danger-medium-l
      ))
    ));
  }
}
// danger Options
$option-danger-clr-alt: off !default;

// danger Alt Vars
$danger-alt-hex: #e56c70 !default;
$danger-r-alt: 229 !default;
$danger-g-alt: 108 !default;
$danger-b-alt: 112 !default;
$danger-h-alt: 358 !default;
$danger-s-alt: 70% !default;
$danger-l-alt: 66% !default;
$danger-hover-h-alt: 358 !default;
$danger-hover-s-alt: 70% !default;
$danger-hover-l-alt: 1.15 !default;
$danger-ultra-light-h-alt: 358 !default;
$danger-ultra-light-s-alt: 70% !default;
$danger-ultra-light-l-alt: 95% !default;
$danger-light-h-alt: 358 !default;
$danger-light-s-alt: 70% !default;
$danger-light-l-alt: 85% !default;
$danger-medium-h-alt: 358 !default;
$danger-medium-s-alt: 70% !default;
$danger-medium-l-alt: 50% !default;
$danger-dark-h-alt: 358 !default;
$danger-dark-s-alt: 70% !default;
$danger-dark-l-alt: 25% !default;
$danger-ultra-dark-h-alt: 358 !default;
$danger-ultra-dark-s-alt: 70% !default;
$danger-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$danger-semi-light-h-alt: 358 !default;
$danger-semi-light-s-alt: 70% !default;
$danger-semi-light-l-alt: 60% !default;
$danger-semi-dark-h-alt: 358 !default;
$danger-semi-dark-s-alt: 70% !default;
$danger-semi-dark-l-alt: 40% !default;

// Danger Alt Color Map
$color-danger-alt:(); // Initialize Map
@if $option-danger-clr-alt == on and $option-danger-clr == on {
  $color-danger-alt: (
    "main": (
      "danger": $danger-alt-hex,
      "danger-hover": hsl($danger-hover-h-alt, $danger-hover-s-alt, $danger-hover-l-alt),
      "danger-ultra-light": hsl($danger-ultra-light-h-alt, $danger-ultra-light-s-alt, $danger-ultra-light-l-alt),
      "danger-light": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt),
      "danger-semi-light": hsl($danger-semi-light-h-alt, $danger-semi-light-s-alt, $danger-semi-light-l-alt),
      "danger-semi-dark": hsl($danger-semi-dark-h-alt, $danger-semi-dark-s-alt, $danger-semi-dark-l-alt),
      "danger-dark": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt),
      "danger-ultra-dark": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt),
      "danger-comp": hsl($danger-h-alt + 180, $danger-s-alt, $danger-l-alt),
    ),
    "trans": (
      "danger-trans-10": rgba($danger-alt-hex, .1),
      "danger-trans-20": rgba($danger-alt-hex, .2),
      "danger-trans-30": rgba($danger-alt-hex, .3),
      "danger-trans-40": rgba($danger-alt-hex, .4),
      "danger-trans-50": rgba($danger-alt-hex, .5),
      "danger-trans-60": rgba($danger-alt-hex, .6),
      "danger-trans-70": rgba($danger-alt-hex, .7),
      "danger-trans-80": rgba($danger-alt-hex, .8),
      "danger-trans-90": rgba($danger-alt-hex, .9),
    ),
    "light-trans": (
      "danger-light-trans-10": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .1),
      "danger-light-trans-20": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .2),
      "danger-light-trans-30": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .3),
      "danger-light-trans-40": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .4),
      "danger-light-trans-50": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .5),
      "danger-light-trans-60": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .6),
      "danger-light-trans-70": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .7),
      "danger-light-trans-80": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .8),
      "danger-light-trans-90": hsl($danger-light-h-alt, $danger-light-s-alt, $danger-light-l-alt, .9),
    ),
    "dark-trans": (
      "danger-dark-trans-10": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .1),
      "danger-dark-trans-20": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .2),
      "danger-dark-trans-30": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .3),
      "danger-dark-trans-40": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .4),
      "danger-dark-trans-50": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .5),
      "danger-dark-trans-60": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .6),
      "danger-dark-trans-70": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .7),
      "danger-dark-trans-80": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .8),
      "danger-dark-trans-90": hsl($danger-dark-h-alt, $danger-dark-s-alt, $danger-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "danger-ultra-dark-trans-10": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .1),
      "danger-ultra-dark-trans-20": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .2),
      "danger-ultra-dark-trans-30": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .3),
      "danger-ultra-dark-trans-40": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .4),
      "danger-ultra-dark-trans-50": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .5),
      "danger-ultra-dark-trans-60": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .6),
      "danger-ultra-dark-trans-70": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .7),
      "danger-ultra-dark-trans-80": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .8),
      "danger-ultra-dark-trans-90": hsl($danger-ultra-dark-h-alt, $danger-ultra-dark-s-alt, $danger-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "danger-hex": $danger-alt-hex,
        "danger-hsl": $danger-h $danger-s $danger-l-alt,
        "danger-rgb": $danger-r $danger-g $danger-b-alt,
        "danger-r": $danger-r-alt,
        "danger-g": $danger-g-alt,
        "danger-b": $danger-b-alt,
        "danger-h": $danger-h-alt,
        "danger-s": $danger-s-alt,
        "danger-l": $danger-l-alt,
        "danger-hover-h": $danger-hover-h-alt,
        "danger-hover-s": $danger-hover-s-alt,
        "danger-hover-l": $danger-hover-l-alt,
        "danger-ultra-light-h": $danger-ultra-light-h-alt,
        "danger-ultra-light-s": $danger-ultra-light-s-alt,
        "danger-ultra-light-l": $danger-ultra-light-l-alt,
        "danger-light-h": $danger-light-h-alt,
        "danger-light-s": $danger-light-s-alt,
        "danger-light-l": $danger-light-l-alt,
        "danger-semi-light-h": $danger-semi-light-h-alt,
        "danger-semi-light-s": $danger-semi-light-s-alt,
        "danger-semi-light-l": $danger-semi-light-l-alt,
        "danger-semi-dark-h": $danger-semi-dark-h-alt,
        "danger-semi-dark-s": $danger-semi-dark-s-alt,
        "danger-semi-dark-l": $danger-semi-dark-l-alt,
        "danger-dark-h": $danger-dark-h-alt,
        "danger-dark-s": $danger-dark-s-alt,
        "danger-dark-l": $danger-dark-l-alt,
        "danger-ultra-dark-h": $danger-ultra-dark-h-alt,
        "danger-ultra-dark-s": $danger-ultra-dark-s-alt,
        "danger-ultra-dark-l": $danger-ultra-dark-l-alt,
        "danger-comp-h": $danger-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-danger-clr-alt == on and $option-danger-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-danger-alt: map-merge($color-danger-alt, (
      "main": map-merge(map-get($color-danger-alt, "main"), (
        "danger-medium": hsl($danger-medium-h-alt, $danger-medium-s-alt, $danger-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-danger-alt, "partials"), (
        "danger-medium-h": $danger-medium-h-alt,
        "danger-medium-s": $danger-medium-s-alt,
        "danger-medium-l": $danger-medium-l-alt
      ))
    ));
  }
}
// warning Options
$option-warning-clr: on !default;
$option-warning-main-trans: on !default;
$option-warning-light-trans: on !default;
$option-warning-dark-trans: on !default;
$option-warning-ultra-dark-trans: on !default;

// warning Vars
$warning-hex: #e56c70 !default;
$warning-r: 229 !default;
$warning-g: 108 !default;
$warning-b: 112 !default;
$warning-h: 358 !default;
$warning-s: 70% !default;
$warning-l: 66% !default;
$warning-hover-h: 358 !default;
$warning-hover-s: 70% !default;
$warning-hover-l: 1.15 !default;
$warning-ultra-light-h: 358 !default;
$warning-ultra-light-s: 70% !default;
$warning-ultra-light-l: 95% !default;
$warning-light-h: 358 !default;
$warning-light-s: 70% !default;
$warning-light-l: 85% !default;
$warning-medium-h: 358 !default;
$warning-medium-s: 70% !default;
$warning-medium-l: 50% !default;
$warning-dark-h: 358 !default;
$warning-dark-s: 70% !default;
$warning-dark-l: 25% !default;
$warning-ultra-dark-h: 358 !default;
$warning-ultra-dark-s: 70% !default;
$warning-ultra-dark-l: 10% !default;
// Added in 3.0
$warning-semi-light-h: 358 !default;
$warning-semi-light-s: 70% !default;
$warning-semi-light-l: 60% !default;
$warning-semi-dark-h: 358 !default;
$warning-semi-dark-s: 70% !default;
$warning-semi-dark-l: 40% !default;


// Warning Color Map
$color-warning:(); // Initialize Map
@if $option-warning-clr == on {
  $color-warning: (
    "main": (
      "warning": $warning-hex,
      "warning-hover": hsl($warning-hover-h, $warning-hover-s, $warning-hover-l),
      "warning-ultra-light": hsl($warning-ultra-light-h, $warning-ultra-light-s, $warning-ultra-light-l),
      "warning-light": hsl($warning-light-h, $warning-light-s, $warning-light-l),
      "warning-semi-light": hsl($warning-semi-light-h, $warning-semi-light-s, $warning-semi-light-l),
      "warning-semi-dark": hsl($warning-semi-dark-h, $warning-semi-dark-s, $warning-semi-dark-l),
      "warning-dark": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l),
      "warning-ultra-dark": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l),
    ),
    "trans": (
      "warning-trans-10": rgba($warning-hex, .1),
      "warning-trans-20": rgba($warning-hex, .2),
      "warning-trans-30": rgba($warning-hex, .3),
      "warning-trans-40": rgba($warning-hex, .4),
      "warning-trans-50": rgba($warning-hex, .5),
      "warning-trans-60": rgba($warning-hex, .6),
      "warning-trans-70": rgba($warning-hex, .7),
      "warning-trans-80": rgba($warning-hex, .8),
      "warning-trans-90": rgba($warning-hex, .9),
    ),
    "light-trans": (
      "warning-light-trans-10": hsl($warning-light-h, $warning-light-s, $warning-light-l, .1),
      "warning-light-trans-20": hsl($warning-light-h, $warning-light-s, $warning-light-l, .2),
      "warning-light-trans-30": hsl($warning-light-h, $warning-light-s, $warning-light-l, .3),
      "warning-light-trans-40": hsl($warning-light-h, $warning-light-s, $warning-light-l, .4),
      "warning-light-trans-50": hsl($warning-light-h, $warning-light-s, $warning-light-l, .5),
      "warning-light-trans-60": hsl($warning-light-h, $warning-light-s, $warning-light-l, .6),
      "warning-light-trans-70": hsl($warning-light-h, $warning-light-s, $warning-light-l, .7),
      "warning-light-trans-80": hsl($warning-light-h, $warning-light-s, $warning-light-l, .8),
      "warning-light-trans-90": hsl($warning-light-h, $warning-light-s, $warning-light-l, .9),
    ),
    "dark-trans": (
      "warning-dark-trans-10": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .1),
      "warning-dark-trans-20": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .2),
      "warning-dark-trans-30": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .3),
      "warning-dark-trans-40": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .4),
      "warning-dark-trans-50": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .5),
      "warning-dark-trans-60": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .6),
      "warning-dark-trans-70": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .7),
      "warning-dark-trans-80": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .8),
      "warning-dark-trans-90": hsl($warning-dark-h, $warning-dark-s, $warning-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "warning-ultra-dark-trans-10": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .1),
      "warning-ultra-dark-trans-20": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .2),
      "warning-ultra-dark-trans-30": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .3),
      "warning-ultra-dark-trans-40": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .4),
      "warning-ultra-dark-trans-50": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .5),
      "warning-ultra-dark-trans-60": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .6),
      "warning-ultra-dark-trans-70": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .7),
      "warning-ultra-dark-trans-80": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .8),
      "warning-ultra-dark-trans-90": hsl($warning-ultra-dark-h, $warning-ultra-dark-s, $warning-ultra-dark-l, .9),
    ),
    "partials": (
      "warning-hex": $warning-hex,
        "warning-hsl": $warning-h $warning-s $warning-l,
        "warning-rgb": $warning-r $warning-g $warning-b,
        "warning-r": $warning-r,
        "warning-g": $warning-g,
        "warning-b": $warning-b,
        "warning-h": $warning-h,
        "warning-s": $warning-s,
        "warning-l": $warning-l,
        "warning-hover-h": $warning-hover-h,
        "warning-hover-s": $warning-hover-s,
        "warning-hover-l": $warning-hover-l,
        "warning-ultra-light-h": $warning-ultra-light-h,
        "warning-ultra-light-s": $warning-ultra-light-s,
        "warning-ultra-light-l": $warning-ultra-light-l,
        "warning-light-h": $warning-light-h,
        "warning-light-s": $warning-light-s,
        "warning-light-l": $warning-light-l,
        "warning-semi-light-h": $warning-semi-light-h,
        "warning-semi-light-s": $warning-semi-light-s,
        "warning-semi-light-l": $warning-semi-light-l,
        "warning-semi-dark-h": $warning-semi-dark-h,
        "warning-semi-dark-s": $warning-semi-dark-s,
        "warning-semi-dark-l": $warning-semi-dark-l,
        "warning-dark-h": $warning-dark-h,
        "warning-dark-s": $warning-dark-s,
        "warning-dark-l": $warning-dark-l,
        "warning-ultra-dark-h": $warning-ultra-dark-h,
        "warning-ultra-dark-s": $warning-ultra-dark-s,
        "warning-ultra-dark-l": $warning-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-warning-main-trans == off {
    $color-warning: map-remove($color-warning, "trans");
  }
  @if $option-warning-light-trans == off {
    $color-warning: map-remove($color-warning, "light-trans");
  }
  @if $option-warning-dark-trans == off {
    $color-warning: map-remove($color-warning, "dark-trans");
  }
  @if $option-warning-ultra-dark-trans == off {
    $color-warning: map-remove($color-warning, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-warning-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-warning: map-merge($color-warning, (
      "main": map-merge(map-get($color-warning, "main"), (
        "warning-comp": hsl($warning-h + 180, $warning-s, $warning-l)
      )),
      "partials": map-merge(map-get($color-warning, "partials"), (
        "warning-comp-h": $warning-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-warning: map-merge($color-warning, (
      "main": map-merge(map-get($color-warning, "main"), (
        "warning-medium": hsl($warning-medium-h, $warning-medium-s, $warning-medium-l)
      )),
      "partials": map-merge(map-get($color-warning, "partials"), (
        "warning-medium-h": $warning-medium-h,
        "warning-medium-s": $warning-medium-s,
        "warning-medium-l": $warning-medium-l
      ))
    ));
  }
}
// warning Options
$option-warning-clr-alt: off !default;

// warning Alt Vars
$warning-alt-hex: #e56c70 !default;
$warning-r-alt: 229 !default;
$warning-g-alt: 108 !default;
$warning-b-alt: 112 !default;
$warning-h-alt: 358 !default;
$warning-s-alt: 70% !default;
$warning-l-alt: 66% !default;
$warning-hover-h-alt: 358 !default;
$warning-hover-s-alt: 70% !default;
$warning-hover-l-alt: 1.15 !default;
$warning-ultra-light-h-alt: 358 !default;
$warning-ultra-light-s-alt: 70% !default;
$warning-ultra-light-l-alt: 95% !default;
$warning-light-h-alt: 358 !default;
$warning-light-s-alt: 70% !default;
$warning-light-l-alt: 85% !default;
$warning-medium-h-alt: 358 !default;
$warning-medium-s-alt: 70% !default;
$warning-medium-l-alt: 50% !default;
$warning-dark-h-alt: 358 !default;
$warning-dark-s-alt: 70% !default;
$warning-dark-l-alt: 25% !default;
$warning-ultra-dark-h-alt: 358 !default;
$warning-ultra-dark-s-alt: 70% !default;
$warning-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$warning-semi-light-h-alt: 358 !default;
$warning-semi-light-s-alt: 70% !default;
$warning-semi-light-l-alt: 60% !default;
$warning-semi-dark-h-alt: 358 !default;
$warning-semi-dark-s-alt: 70% !default;
$warning-semi-dark-l-alt: 40% !default;


// Warning Alt Color Map
$color-warning-alt:(); // Initialize Map
@if $option-warning-clr-alt == on and $option-warning-clr == on {
  $color-warning-alt: (
    "main": (
      "warning": $warning-alt-hex,
      "warning-hover": hsl($warning-hover-h-alt, $warning-hover-s-alt, $warning-hover-l-alt),
      "warning-ultra-light": hsl($warning-ultra-light-h-alt, $warning-ultra-light-s-alt, $warning-ultra-light-l-alt),
      "warning-light": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt),
      "warning-semi-light": hsl($warning-semi-light-h-alt, $warning-semi-light-s-alt, $warning-semi-light-l-alt),
      "warning-semi-dark": hsl($warning-semi-dark-h-alt, $warning-semi-dark-s-alt, $warning-semi-dark-l-alt),
      "warning-dark": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt),
      "warning-ultra-dark": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt),
      "warning-comp": hsl($warning-h-alt + 180, $warning-s-alt, $warning-l-alt),
    ),
    "trans": (
      "warning-trans-10": rgba($warning-alt-hex, .1),
      "warning-trans-20": rgba($warning-alt-hex, .2),
      "warning-trans-30": rgba($warning-alt-hex, .3),
      "warning-trans-40": rgba($warning-alt-hex, .4),
      "warning-trans-50": rgba($warning-alt-hex, .5),
      "warning-trans-60": rgba($warning-alt-hex, .6),
      "warning-trans-70": rgba($warning-alt-hex, .7),
      "warning-trans-80": rgba($warning-alt-hex, .8),
      "warning-trans-90": rgba($warning-alt-hex, .9),
    ),
    "light-trans": (
      "warning-light-trans-10": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .1),
      "warning-light-trans-20": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .2),
      "warning-light-trans-30": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .3),
      "warning-light-trans-40": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .4),
      "warning-light-trans-50": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .5),
      "warning-light-trans-60": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .6),
      "warning-light-trans-70": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .7),
      "warning-light-trans-80": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .8),
      "warning-light-trans-90": hsl($warning-light-h-alt, $warning-light-s-alt, $warning-light-l-alt, .9),
    ),
    "dark-trans": (
      "warning-dark-trans-10": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .1),
      "warning-dark-trans-20": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .2),
      "warning-dark-trans-30": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .3),
      "warning-dark-trans-40": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .4),
      "warning-dark-trans-50": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .5),
      "warning-dark-trans-60": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .6),
      "warning-dark-trans-70": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .7),
      "warning-dark-trans-80": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .8),
      "warning-dark-trans-90": hsl($warning-dark-h-alt, $warning-dark-s-alt, $warning-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "warning-ultra-dark-trans-10": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .1),
      "warning-ultra-dark-trans-20": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .2),
      "warning-ultra-dark-trans-30": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .3),
      "warning-ultra-dark-trans-40": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .4),
      "warning-ultra-dark-trans-50": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .5),
      "warning-ultra-dark-trans-60": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .6),
      "warning-ultra-dark-trans-70": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .7),
      "warning-ultra-dark-trans-80": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .8),
      "warning-ultra-dark-trans-90": hsl($warning-ultra-dark-h-alt, $warning-ultra-dark-s-alt, $warning-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "warning-hex": $warning-alt-hex,
        "warning-hsl": $warning-h $warning-s $warning-l-alt,
        "warning-rgb": $warning-r $warning-g $warning-b-alt,
        "warning-r": $warning-r-alt,
        "warning-g": $warning-g-alt,
        "warning-b": $warning-b-alt,
        "warning-h": $warning-h-alt,
        "warning-s": $warning-s-alt,
        "warning-l": $warning-l-alt,
        "warning-hover-h": $warning-hover-h-alt,
        "warning-hover-s": $warning-hover-s-alt,
        "warning-hover-l": $warning-hover-l-alt,
        "warning-ultra-light-h": $warning-ultra-light-h-alt,
        "warning-ultra-light-s": $warning-ultra-light-s-alt,
        "warning-ultra-light-l": $warning-ultra-light-l-alt,
        "warning-light-h": $warning-light-h-alt,
        "warning-light-s": $warning-light-s-alt,
        "warning-light-l": $warning-light-l-alt,
        "warning-semi-light-h": $warning-semi-light-h-alt,
        "warning-semi-light-s": $warning-semi-light-s-alt,
        "warning-semi-light-l": $warning-semi-light-l-alt,
        "warning-semi-dark-h": $warning-semi-dark-h-alt,
        "warning-semi-dark-s": $warning-semi-dark-s-alt,
        "warning-semi-dark-l": $warning-semi-dark-l-alt,
        "warning-dark-h": $warning-dark-h-alt,
        "warning-dark-s": $warning-dark-s-alt,
        "warning-dark-l": $warning-dark-l-alt,
        "warning-ultra-dark-h": $warning-ultra-dark-h-alt,
        "warning-ultra-dark-s": $warning-ultra-dark-s-alt,
        "warning-ultra-dark-l": $warning-ultra-dark-l-alt,
        "warning-comp-h": $warning-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-warning-clr-alt == on and $option-warning-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-warning-alt: map-merge($color-warning-alt, (
      "main": map-merge(map-get($color-warning-alt, "main"), (
        "warning-medium": hsl($warning-medium-h-alt, $warning-medium-s-alt, $warning-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-warning-alt, "partials"), (
        "warning-medium-h": $warning-medium-h-alt,
        "warning-medium-s": $warning-medium-s-alt,
        "warning-medium-l": $warning-medium-l-alt
      ))
    ));
  }
}
// info Options
$option-info-clr: on !default;
$option-info-main-trans: on !default;
$option-info-light-trans: on !default;
$option-info-dark-trans: on !default;
$option-info-ultra-dark-trans: on !default;

// info Vars
$info-hex: #e56c70 !default;
$info-r: 229 !default;
$info-g: 108 !default;
$info-b: 112 !default;
$info-h: 358 !default;
$info-s: 70% !default;
$info-l: 66% !default;
$info-hover-h: 358 !default;
$info-hover-s: 70% !default;
$info-hover-l: 1.15 !default;
$info-ultra-light-h: 358 !default;
$info-ultra-light-s: 70% !default;
$info-ultra-light-l: 95% !default;
$info-light-h: 358 !default;
$info-light-s: 70% !default;
$info-light-l: 85% !default;
$info-medium-h: 358 !default;
$info-medium-s: 70% !default;
$info-medium-l: 50% !default;
$info-dark-h: 358 !default;
$info-dark-s: 70% !default;
$info-dark-l: 25% !default;
$info-ultra-dark-h: 358 !default;
$info-ultra-dark-s: 70% !default;
$info-ultra-dark-l: 10% !default;
// Added in 3.0
$info-semi-light-h: 358 !default;
$info-semi-light-s: 70% !default;
$info-semi-light-l: 60% !default;
$info-semi-dark-h: 358 !default;
$info-semi-dark-s: 70% !default;
$info-semi-dark-l: 40% !default;


// Info Color Map
$color-info:(); // Initialize Map
@if $option-info-clr == on {
  $color-info: (
    "main": (
      "info": $info-hex,
      "info-hover": hsl($info-hover-h, $info-hover-s, $info-hover-l),
      "info-ultra-light": hsl($info-ultra-light-h, $info-ultra-light-s, $info-ultra-light-l),
      "info-light": hsl($info-light-h, $info-light-s, $info-light-l),
      "info-semi-light": hsl($info-semi-light-h, $info-semi-light-s, $info-semi-light-l),
      "info-semi-dark": hsl($info-semi-dark-h, $info-semi-dark-s, $info-semi-dark-l),
      "info-dark": hsl($info-dark-h, $info-dark-s, $info-dark-l),
      "info-ultra-dark": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l),
    ),
    "trans": (
      "info-trans-10": rgba($info-hex, .1),
      "info-trans-20": rgba($info-hex, .2),
      "info-trans-30": rgba($info-hex, .3),
      "info-trans-40": rgba($info-hex, .4),
      "info-trans-50": rgba($info-hex, .5),
      "info-trans-60": rgba($info-hex, .6),
      "info-trans-70": rgba($info-hex, .7),
      "info-trans-80": rgba($info-hex, .8),
      "info-trans-90": rgba($info-hex, .9),
    ),
    "light-trans": (
      "info-light-trans-10": hsl($info-light-h, $info-light-s, $info-light-l, .1),
      "info-light-trans-20": hsl($info-light-h, $info-light-s, $info-light-l, .2),
      "info-light-trans-30": hsl($info-light-h, $info-light-s, $info-light-l, .3),
      "info-light-trans-40": hsl($info-light-h, $info-light-s, $info-light-l, .4),
      "info-light-trans-50": hsl($info-light-h, $info-light-s, $info-light-l, .5),
      "info-light-trans-60": hsl($info-light-h, $info-light-s, $info-light-l, .6),
      "info-light-trans-70": hsl($info-light-h, $info-light-s, $info-light-l, .7),
      "info-light-trans-80": hsl($info-light-h, $info-light-s, $info-light-l, .8),
      "info-light-trans-90": hsl($info-light-h, $info-light-s, $info-light-l, .9),
    ),
    "dark-trans": (
      "info-dark-trans-10": hsl($info-dark-h, $info-dark-s, $info-dark-l, .1),
      "info-dark-trans-20": hsl($info-dark-h, $info-dark-s, $info-dark-l, .2),
      "info-dark-trans-30": hsl($info-dark-h, $info-dark-s, $info-dark-l, .3),
      "info-dark-trans-40": hsl($info-dark-h, $info-dark-s, $info-dark-l, .4),
      "info-dark-trans-50": hsl($info-dark-h, $info-dark-s, $info-dark-l, .5),
      "info-dark-trans-60": hsl($info-dark-h, $info-dark-s, $info-dark-l, .6),
      "info-dark-trans-70": hsl($info-dark-h, $info-dark-s, $info-dark-l, .7),
      "info-dark-trans-80": hsl($info-dark-h, $info-dark-s, $info-dark-l, .8),
      "info-dark-trans-90": hsl($info-dark-h, $info-dark-s, $info-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "info-ultra-dark-trans-10": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .1),
      "info-ultra-dark-trans-20": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .2),
      "info-ultra-dark-trans-30": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .3),
      "info-ultra-dark-trans-40": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .4),
      "info-ultra-dark-trans-50": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .5),
      "info-ultra-dark-trans-60": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .6),
      "info-ultra-dark-trans-70": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .7),
      "info-ultra-dark-trans-80": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .8),
      "info-ultra-dark-trans-90": hsl($info-ultra-dark-h, $info-ultra-dark-s, $info-ultra-dark-l, .9),
    ),
    "partials": (
      "info-hex": $info-hex,
        "info-hsl": $info-h $info-s $info-l,
        "info-rgb": $info-r $info-g $info-b,
        "info-r": $info-r,
        "info-g": $info-g,
        "info-b": $info-b,
        "info-h": $info-h,
        "info-s": $info-s,
        "info-l": $info-l,
        "info-hover-h": $info-hover-h,
        "info-hover-s": $info-hover-s,
        "info-hover-l": $info-hover-l,
        "info-ultra-light-h": $info-ultra-light-h,
        "info-ultra-light-s": $info-ultra-light-s,
        "info-ultra-light-l": $info-ultra-light-l,
        "info-light-h": $info-light-h,
        "info-light-s": $info-light-s,
        "info-light-l": $info-light-l,
        "info-semi-light-h": $info-semi-light-h,
        "info-semi-light-s": $info-semi-light-s,
        "info-semi-light-l": $info-semi-light-l,
        "info-semi-dark-h": $info-semi-dark-h,
        "info-semi-dark-s": $info-semi-dark-s,
        "info-semi-dark-l": $info-semi-dark-l,
        "info-dark-h": $info-dark-h,
        "info-dark-s": $info-dark-s,
        "info-dark-l": $info-dark-l,
        "info-ultra-dark-h": $info-ultra-dark-h,
        "info-ultra-dark-s": $info-ultra-dark-s,
        "info-ultra-dark-l": $info-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-info-main-trans == off {
    $color-info: map-remove($color-info, "trans");
  }
  @if $option-info-light-trans == off {
    $color-info: map-remove($color-info, "light-trans");
  }
  @if $option-info-dark-trans == off {
    $color-info: map-remove($color-info, "dark-trans");
  }
  @if $option-info-ultra-dark-trans == off {
    $color-info: map-remove($color-info, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-info-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-info: map-merge($color-info, (
      "main": map-merge(map-get($color-info, "main"), (
        "info-comp": hsl($info-h + 180, $info-s, $info-l)
      )),
      "partials": map-merge(map-get($color-info, "partials"), (
        "info-comp-h": $info-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-info: map-merge($color-info, (
      "main": map-merge(map-get($color-info, "main"), (
        "info-medium": hsl($info-medium-h, $info-medium-s, $info-medium-l)
      )),
      "partials": map-merge(map-get($color-info, "partials"), (
        "info-medium-h": $info-medium-h,
        "info-medium-s": $info-medium-s,
        "info-medium-l": $info-medium-l
      ))
    ));
  }
}
// info Options
$option-info-clr-alt: off !default;

// info Alt Vars
$info-alt-hex: #e56c70 !default;
$info-r-alt: 229 !default;
$info-g-alt: 108 !default;
$info-b-alt: 112 !default;
$info-h-alt: 358 !default;
$info-s-alt: 70% !default;
$info-l-alt: 66% !default;
$info-hover-h-alt: 358 !default;
$info-hover-s-alt: 70% !default;
$info-hover-l-alt: 1.15 !default;
$info-ultra-light-h-alt: 358 !default;
$info-ultra-light-s-alt: 70% !default;
$info-ultra-light-l-alt: 95% !default;
$info-light-h-alt: 358 !default;
$info-light-s-alt: 70% !default;
$info-light-l-alt: 85% !default;
$info-medium-h-alt: 358 !default;
$info-medium-s-alt: 70% !default;
$info-medium-l-alt: 50% !default;
$info-dark-h-alt: 358 !default;
$info-dark-s-alt: 70% !default;
$info-dark-l-alt: 25% !default;
$info-ultra-dark-h-alt: 358 !default;
$info-ultra-dark-s-alt: 70% !default;
$info-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$info-semi-light-h-alt: 358 !default;
$info-semi-light-s-alt: 70% !default;
$info-semi-light-l-alt: 60% !default;
$info-semi-dark-h-alt: 358 !default;
$info-semi-dark-s-alt: 70% !default;
$info-semi-dark-l-alt: 40% !default;

// Info Alt Color Map
$color-info-alt:(); // Initialize Map
@if $option-info-clr-alt == on and $option-info-clr == on {
  $color-info-alt: (
    "main": (
      "info": $info-alt-hex,
      "info-hover": hsl($info-hover-h-alt, $info-hover-s-alt, $info-hover-l-alt),
      "info-ultra-light": hsl($info-ultra-light-h-alt, $info-ultra-light-s-alt, $info-ultra-light-l-alt),
      "info-light": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt),
      "info-semi-light": hsl($info-semi-light-h-alt, $info-semi-light-s-alt, $info-semi-light-l-alt),
      "info-semi-dark": hsl($info-semi-dark-h-alt, $info-semi-dark-s-alt, $info-semi-dark-l-alt),
      "info-dark": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt),
      "info-ultra-dark": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt),
      "info-comp": hsl($info-h-alt + 180, $info-s-alt, $info-l-alt),
    ),
    "trans": (
      "info-trans-10": rgba($info-alt-hex, .1),
      "info-trans-20": rgba($info-alt-hex, .2),
      "info-trans-30": rgba($info-alt-hex, .3),
      "info-trans-40": rgba($info-alt-hex, .4),
      "info-trans-50": rgba($info-alt-hex, .5),
      "info-trans-60": rgba($info-alt-hex, .6),
      "info-trans-70": rgba($info-alt-hex, .7),
      "info-trans-80": rgba($info-alt-hex, .8),
      "info-trans-90": rgba($info-alt-hex, .9),
    ),
    "light-trans": (
      "info-light-trans-10": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .1),
      "info-light-trans-20": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .2),
      "info-light-trans-30": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .3),
      "info-light-trans-40": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .4),
      "info-light-trans-50": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .5),
      "info-light-trans-60": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .6),
      "info-light-trans-70": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .7),
      "info-light-trans-80": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .8),
      "info-light-trans-90": hsl($info-light-h-alt, $info-light-s-alt, $info-light-l-alt, .9),
    ),
    "dark-trans": (
      "info-dark-trans-10": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .1),
      "info-dark-trans-20": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .2),
      "info-dark-trans-30": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .3),
      "info-dark-trans-40": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .4),
      "info-dark-trans-50": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .5),
      "info-dark-trans-60": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .6),
      "info-dark-trans-70": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .7),
      "info-dark-trans-80": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .8),
      "info-dark-trans-90": hsl($info-dark-h-alt, $info-dark-s-alt, $info-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "info-ultra-dark-trans-10": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .1),
      "info-ultra-dark-trans-20": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .2),
      "info-ultra-dark-trans-30": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .3),
      "info-ultra-dark-trans-40": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .4),
      "info-ultra-dark-trans-50": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .5),
      "info-ultra-dark-trans-60": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .6),
      "info-ultra-dark-trans-70": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .7),
      "info-ultra-dark-trans-80": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .8),
      "info-ultra-dark-trans-90": hsl($info-ultra-dark-h-alt, $info-ultra-dark-s-alt, $info-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "info-hex": $info-alt-hex,
        "info-hsl": $info-h $info-s $info-l-alt,
        "info-rgb": $info-r $info-g $info-b-alt,
        "info-r": $info-r-alt,
        "info-g": $info-g-alt,
        "info-b": $info-b-alt,
        "info-h": $info-h-alt,
        "info-s": $info-s-alt,
        "info-l": $info-l-alt,
        "info-hover-h": $info-hover-h-alt,
        "info-hover-s": $info-hover-s-alt,
        "info-hover-l": $info-hover-l-alt,
        "info-ultra-light-h": $info-ultra-light-h-alt,
        "info-ultra-light-s": $info-ultra-light-s-alt,
        "info-ultra-light-l": $info-ultra-light-l-alt,
        "info-light-h": $info-light-h-alt,
        "info-light-s": $info-light-s-alt,
        "info-light-l": $info-light-l-alt,
        "info-semi-light-h": $info-semi-light-h-alt,
        "info-semi-light-s": $info-semi-light-s-alt,
        "info-semi-light-l": $info-semi-light-l-alt,
        "info-semi-dark-h": $info-semi-dark-h-alt,
        "info-semi-dark-s": $info-semi-dark-s-alt,
        "info-semi-dark-l": $info-semi-dark-l-alt,
        "info-dark-h": $info-dark-h-alt,
        "info-dark-s": $info-dark-s-alt,
        "info-dark-l": $info-dark-l-alt,
        "info-ultra-dark-h": $info-ultra-dark-h-alt,
        "info-ultra-dark-s": $info-ultra-dark-s-alt,
        "info-ultra-dark-l": $info-ultra-dark-l-alt,
        "info-comp-h": $info-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-info-clr-alt == on and $option-info-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-info-alt: map-merge($color-info-alt, (
      "main": map-merge(map-get($color-info-alt, "main"), (
        "info-medium": hsl($info-medium-h-alt, $info-medium-s-alt, $info-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-info-alt, "partials"), (
        "info-medium-h": $info-medium-h-alt,
        "info-medium-s": $info-medium-s-alt,
        "info-medium-l": $info-medium-l-alt
      ))
    ));
  }
}
// success Options
$option-success-clr: on !default;
$option-success-main-trans: on !default;
$option-success-light-trans: on !default;
$option-success-dark-trans: on !default;
$option-success-ultra-dark-trans: on !default;

// success Vars
$success-hex: #e56c70 !default;
$success-r: 229 !default;
$success-g: 108 !default;
$success-b: 112 !default;
$success-h: 358 !default;
$success-s: 70% !default;
$success-l: 66% !default;
$success-hover-h: 358 !default;
$success-hover-s: 70% !default;
$success-hover-l: 1.15 !default;
$success-ultra-light-h: 358 !default;
$success-ultra-light-s: 70% !default;
$success-ultra-light-l: 95% !default;
$success-light-h: 358 !default;
$success-light-s: 70% !default;
$success-light-l: 85% !default;
$success-medium-h: 358 !default;
$success-medium-s: 70% !default;
$success-medium-l: 50% !default;
$success-dark-h: 358 !default;
$success-dark-s: 70% !default;
$success-dark-l: 25% !default;
$success-ultra-dark-h: 358 !default;
$success-ultra-dark-s: 70% !default;
$success-ultra-dark-l: 10% !default;
// Added in 3.0
$success-semi-light-h: 358 !default;
$success-semi-light-s: 70% !default;
$success-semi-light-l: 60% !default;
$success-semi-dark-h: 358 !default;
$success-semi-dark-s: 70% !default;
$success-semi-dark-l: 40% !default;


// Success Color Map
$color-success:(); // Initialize Map
@if $option-success-clr == on {
  $color-success: (
    "main": (
      "success": $success-hex,
      "success-hover": hsl($success-hover-h, $success-hover-s, $success-hover-l),
      "success-ultra-light": hsl($success-ultra-light-h, $success-ultra-light-s, $success-ultra-light-l),
      "success-light": hsl($success-light-h, $success-light-s, $success-light-l),
      "success-semi-light": hsl($success-semi-light-h, $success-semi-light-s, $success-semi-light-l),
      "success-semi-dark": hsl($success-semi-dark-h, $success-semi-dark-s, $success-semi-dark-l),
      "success-dark": hsl($success-dark-h, $success-dark-s, $success-dark-l),
      "success-ultra-dark": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l),
    ),
    "trans": (
      "success-trans-10": rgba($success-hex, .1),
      "success-trans-20": rgba($success-hex, .2),
      "success-trans-30": rgba($success-hex, .3),
      "success-trans-40": rgba($success-hex, .4),
      "success-trans-50": rgba($success-hex, .5),
      "success-trans-60": rgba($success-hex, .6),
      "success-trans-70": rgba($success-hex, .7),
      "success-trans-80": rgba($success-hex, .8),
      "success-trans-90": rgba($success-hex, .9),
    ),
    "light-trans": (
      "success-light-trans-10": hsl($success-light-h, $success-light-s, $success-light-l, .1),
      "success-light-trans-20": hsl($success-light-h, $success-light-s, $success-light-l, .2),
      "success-light-trans-30": hsl($success-light-h, $success-light-s, $success-light-l, .3),
      "success-light-trans-40": hsl($success-light-h, $success-light-s, $success-light-l, .4),
      "success-light-trans-50": hsl($success-light-h, $success-light-s, $success-light-l, .5),
      "success-light-trans-60": hsl($success-light-h, $success-light-s, $success-light-l, .6),
      "success-light-trans-70": hsl($success-light-h, $success-light-s, $success-light-l, .7),
      "success-light-trans-80": hsl($success-light-h, $success-light-s, $success-light-l, .8),
      "success-light-trans-90": hsl($success-light-h, $success-light-s, $success-light-l, .9),
    ),
    "dark-trans": (
      "success-dark-trans-10": hsl($success-dark-h, $success-dark-s, $success-dark-l, .1),
      "success-dark-trans-20": hsl($success-dark-h, $success-dark-s, $success-dark-l, .2),
      "success-dark-trans-30": hsl($success-dark-h, $success-dark-s, $success-dark-l, .3),
      "success-dark-trans-40": hsl($success-dark-h, $success-dark-s, $success-dark-l, .4),
      "success-dark-trans-50": hsl($success-dark-h, $success-dark-s, $success-dark-l, .5),
      "success-dark-trans-60": hsl($success-dark-h, $success-dark-s, $success-dark-l, .6),
      "success-dark-trans-70": hsl($success-dark-h, $success-dark-s, $success-dark-l, .7),
      "success-dark-trans-80": hsl($success-dark-h, $success-dark-s, $success-dark-l, .8),
      "success-dark-trans-90": hsl($success-dark-h, $success-dark-s, $success-dark-l, .9),
    ),
    "ultra-dark-trans": (
      "success-ultra-dark-trans-10": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .1),
      "success-ultra-dark-trans-20": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .2),
      "success-ultra-dark-trans-30": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .3),
      "success-ultra-dark-trans-40": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .4),
      "success-ultra-dark-trans-50": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .5),
      "success-ultra-dark-trans-60": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .6),
      "success-ultra-dark-trans-70": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .7),
      "success-ultra-dark-trans-80": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .8),
      "success-ultra-dark-trans-90": hsl($success-ultra-dark-h, $success-ultra-dark-s, $success-ultra-dark-l, .9),
    ),
    "partials": (
      "success-hex": $success-hex,
        "success-hsl": $success-h $success-s $success-l,
        "success-rgb": $success-r $success-g $success-b,
        "success-r": $success-r,
        "success-g": $success-g,
        "success-b": $success-b,
        "success-h": $success-h,
        "success-s": $success-s,
        "success-l": $success-l,
        "success-hover-h": $success-hover-h,
        "success-hover-s": $success-hover-s,
        "success-hover-l": $success-hover-l,
        "success-ultra-light-h": $success-ultra-light-h,
        "success-ultra-light-s": $success-ultra-light-s,
        "success-ultra-light-l": $success-ultra-light-l,
        "success-light-h": $success-light-h,
        "success-light-s": $success-light-s,
        "success-light-l": $success-light-l,
        "success-semi-light-h": $success-semi-light-h,
        "success-semi-light-s": $success-semi-light-s,
        "success-semi-light-l": $success-semi-light-l,
        "success-semi-dark-h": $success-semi-dark-h,
        "success-semi-dark-s": $success-semi-dark-s,
        "success-semi-dark-l": $success-semi-dark-l,
        "success-dark-h": $success-dark-h,
        "success-dark-s": $success-dark-s,
        "success-dark-l": $success-dark-l,
        "success-ultra-dark-h": $success-ultra-dark-h,
        "success-ultra-dark-s": $success-ultra-dark-s,
        "success-ultra-dark-l": $success-ultra-dark-l,
    ),
  );

  // Transparency options
  @if $option-success-main-trans == off {
    $color-success: map-remove($color-success, "trans");
  }
  @if $option-success-light-trans == off {
    $color-success: map-remove($color-success, "light-trans");
  }
  @if $option-success-dark-trans == off {
    $color-success: map-remove($color-success, "dark-trans");
  }
  @if $option-success-ultra-dark-trans == off {
    $color-success: map-remove($color-success, "ultra-dark-trans");
  }

}

// Handle Deprecated Options
@if $option-success-clr == on {
  // Add complimentary color back if enabled
  @if $option-comp-colors == on {
    $color-success: map-merge($color-success, (
      "main": map-merge(map-get($color-success, "main"), (
        "success-comp": hsl($success-h + 180, $success-s, $success-l)
      )),
      "partials": map-merge(map-get($color-success, "partials"), (
        "success-comp-h": $success-h + 180
      ))
    ));
  }
  // Add medium back if enabled
  @if $option-medium-shade == on {
    $color-success: map-merge($color-success, (
      "main": map-merge(map-get($color-success, "main"), (
        "success-medium": hsl($success-medium-h, $success-medium-s, $success-medium-l)
      )),
      "partials": map-merge(map-get($color-success, "partials"), (
        "success-medium-h": $success-medium-h,
        "success-medium-s": $success-medium-s,
        "success-medium-l": $success-medium-l
      ))
    ));
  }
}
// success Options
$option-success-clr-alt: off !default;

// success Alt Vars
$success-alt-hex: #e56c70 !default;
$success-r-alt: 229 !default;
$success-g-alt: 108 !default;
$success-b-alt: 112 !default;
$success-h-alt: 358 !default;
$success-s-alt: 70% !default;
$success-l-alt: 66% !default;
$success-hover-h-alt: 358 !default;
$success-hover-s-alt: 70% !default;
$success-hover-l-alt: 1.15 !default;
$success-ultra-light-h-alt: 358 !default;
$success-ultra-light-s-alt: 70% !default;
$success-ultra-light-l-alt: 95% !default;
$success-light-h-alt: 358 !default;
$success-light-s-alt: 70% !default;
$success-light-l-alt: 85% !default;
$success-medium-h-alt: 358 !default;
$success-medium-s-alt: 70% !default;
$success-medium-l-alt: 50% !default;
$success-dark-h-alt: 358 !default;
$success-dark-s-alt: 70% !default;
$success-dark-l-alt: 25% !default;
$success-ultra-dark-h-alt: 358 !default;
$success-ultra-dark-s-alt: 70% !default;
$success-ultra-dark-l-alt: 10% !default;
// Added in 3.0
$success-semi-light-h-alt: 358 !default;
$success-semi-light-s-alt: 70% !default;
$success-semi-light-l-alt: 60% !default;
$success-semi-dark-h-alt: 358 !default;
$success-semi-dark-s-alt: 70% !default;
$success-semi-dark-l-alt: 40% !default;

// Success Alt Color Map
$color-success-alt:(); // Initialize Map
@if $option-success-clr-alt == on and $option-success-clr == on {
  $color-success-alt: (
    "main": (
      "success": $success-alt-hex,
      "success-hover": hsl($success-hover-h-alt, $success-hover-s-alt, $success-hover-l-alt),
      "success-ultra-light": hsl($success-ultra-light-h-alt, $success-ultra-light-s-alt, $success-ultra-light-l-alt),
      "success-light": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt),
      "success-semi-light": hsl($success-semi-light-h-alt, $success-semi-light-s-alt, $success-semi-light-l-alt),
      "success-semi-dark": hsl($success-semi-dark-h-alt, $success-semi-dark-s-alt, $success-semi-dark-l-alt),
      "success-dark": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt),
      "success-ultra-dark": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt),
      "success-comp": hsl($success-h-alt + 180, $success-s-alt, $success-l-alt),
    ),
    "trans": (
      "success-trans-10": rgba($success-alt-hex, .1),
      "success-trans-20": rgba($success-alt-hex, .2),
      "success-trans-30": rgba($success-alt-hex, .3),
      "success-trans-40": rgba($success-alt-hex, .4),
      "success-trans-50": rgba($success-alt-hex, .5),
      "success-trans-60": rgba($success-alt-hex, .6),
      "success-trans-70": rgba($success-alt-hex, .7),
      "success-trans-80": rgba($success-alt-hex, .8),
      "success-trans-90": rgba($success-alt-hex, .9),
    ),
    "light-trans": (
      "success-light-trans-10": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .1),
      "success-light-trans-20": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .2),
      "success-light-trans-30": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .3),
      "success-light-trans-40": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .4),
      "success-light-trans-50": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .5),
      "success-light-trans-60": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .6),
      "success-light-trans-70": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .7),
      "success-light-trans-80": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .8),
      "success-light-trans-90": hsl($success-light-h-alt, $success-light-s-alt, $success-light-l-alt, .9),
    ),
    "dark-trans": (
      "success-dark-trans-10": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .1),
      "success-dark-trans-20": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .2),
      "success-dark-trans-30": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .3),
      "success-dark-trans-40": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .4),
      "success-dark-trans-50": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .5),
      "success-dark-trans-60": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .6),
      "success-dark-trans-70": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .7),
      "success-dark-trans-80": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .8),
      "success-dark-trans-90": hsl($success-dark-h-alt, $success-dark-s-alt, $success-dark-l-alt, .9),
    ),
    "ultra-dark-trans": (
      "success-ultra-dark-trans-10": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .1),
      "success-ultra-dark-trans-20": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .2),
      "success-ultra-dark-trans-30": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .3),
      "success-ultra-dark-trans-40": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .4),
      "success-ultra-dark-trans-50": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .5),
      "success-ultra-dark-trans-60": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .6),
      "success-ultra-dark-trans-70": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .7),
      "success-ultra-dark-trans-80": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .8),
      "success-ultra-dark-trans-90": hsl($success-ultra-dark-h-alt, $success-ultra-dark-s-alt, $success-ultra-dark-l-alt, .9),
    ),
    "partials": (
      "success-hex": $success-alt-hex,
        "success-hsl": $success-h $success-s $success-l-alt,
        "success-rgb": $success-r $success-g $success-b-alt,
        "success-r": $success-r-alt,
        "success-g": $success-g-alt,
        "success-b": $success-b-alt,
        "success-h": $success-h-alt,
        "success-s": $success-s-alt,
        "success-l": $success-l-alt,
        "success-hover-h": $success-hover-h-alt,
        "success-hover-s": $success-hover-s-alt,
        "success-hover-l": $success-hover-l-alt,
        "success-ultra-light-h": $success-ultra-light-h-alt,
        "success-ultra-light-s": $success-ultra-light-s-alt,
        "success-ultra-light-l": $success-ultra-light-l-alt,
        "success-light-h": $success-light-h-alt,
        "success-light-s": $success-light-s-alt,
        "success-light-l": $success-light-l-alt,
        "success-semi-light-h": $success-semi-light-h-alt,
        "success-semi-light-s": $success-semi-light-s-alt,
        "success-semi-light-l": $success-semi-light-l-alt,
        "success-semi-dark-h": $success-semi-dark-h-alt,
        "success-semi-dark-s": $success-semi-dark-s-alt,
        "success-semi-dark-l": $success-semi-dark-l-alt,
        "success-dark-h": $success-dark-h-alt,
        "success-dark-s": $success-dark-s-alt,
        "success-dark-l": $success-dark-l-alt,
        "success-ultra-dark-h": $success-ultra-dark-h-alt,
        "success-ultra-dark-s": $success-ultra-dark-s-alt,
        "success-ultra-dark-l": $success-ultra-dark-l-alt,
        "success-comp-h": $success-h-alt + 180,
    ),
  );
}

// Handle deprecated color options
@if $option-success-clr-alt == on and $option-success-clr == on {
  // Add medium back
  @if $option-medium-shade == on {
    $color-success-alt: map-merge($color-success-alt, (
      "main": map-merge(map-get($color-success-alt, "main"), (
        "success-medium": hsl($success-medium-h-alt, $success-medium-s-alt, $success-medium-l-alt)
      )),
      "partials": map-merge(map-get($color-success-alt, "partials"), (
        "success-medium-h": $success-medium-h-alt,
        "success-medium-s": $success-medium-s-alt,
        "success-medium-l": $success-medium-l-alt
      ))
    ));
  }
}


///// Generate Main Colors List
$color-maps: $color-action, $color-primary, $color-secondary, $color-tertiary, $color-accent, $color-base, $color-shade, $color-neutral, $color-bw;
$alt-color-maps: $color-action-alt, $color-primary-alt, $color-secondary-alt, $color-tertiary-alt, $color-accent-alt, $color-base-alt, $color-shade-alt, $color-neutral-alt, $color-bw-alt; 

///// Generate Status Colors List
$status-color-maps: $color-danger, $color-warning, $color-info, $color-success;
$alt-status-color-maps: $color-danger-alt, $color-warning-alt, $color-info-alt, $color-success-alt;

//// Generate a core colors map (main colors & shades, no transparencies or partials)
//// For generating utilities that don't need partials or transparencies

// Main

$core-colors:(); // Initialize map
@each $map in $color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the main key
    $core-colors: map-merge($core-colors, map-get($map, "main")); // Get the main colors
  }
}

$alt-core-colors:(); // Initialize map
@each $map in $alt-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the main key
    $alt-core-colors: map-merge($alt-core-colors, map-get($map, "main")); // Get the main colors
  }
}

// Status

$core-status-colors:(); // Initialize map
@each $map in $status-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the main key
    $core-status-colors: map-merge($core-status-colors, map-get($map, "main")); // Get the main colors
  }
}

$alt-core-status-colors:(); // Initialize map
@each $map in $alt-status-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the main key
    $alt-core-status-colors: map-merge($alt-core-status-colors, map-get($map, "main")); // Get the main colors
  }
}

//// Create a map with partials only
// Main
$color-partials:(); // Initialize map
@each $map in $color-maps {
  @if map-has-key($map, "partials") { // Check to see if it has the partials key
    $color-partials: map-merge($color-partials, map-get($map, "partials")); // Remove the "partials" group
  }
}
$alt-color-partials:(); // Initialize map
@each $map in $alt-color-maps {
  @if map-has-key($map, "partials") { // Check to see if it has the partials key
    $alt-color-partials: map-merge($alt-color-partials, map-get($map, "partials")); // Remove the "partials" group
  }
}
// Status
$status-color-partials:(); // Initialize map
@each $map in $status-color-maps {
  @if map-has-key($map, "partials") { // Check to see if it has the partials key
    $status-color-partials: map-merge($status-color-partials, map-get($map, "partials")); // Remove the "partials" group
  }
}
$alt-status-color-partials:(); // Initialize map
@each $map in $alt-status-color-maps {
  @if map-has-key($map, "partials") { // Check to see if it has the partials key
    $alt-status-color-partials: map-merge($alt-status-color-partials, map-get($map, "partials")); // Remove the "partials" group
  }
}

//// Create a map with everything except partials
//// Needed for easily excluding partials from certain places

$all-colors:(); // Initialize map
@each $map in $color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the "main" key
    $all-colors: map-merge($all-colors, map-get($map, "main")); // Get the main colors
  }
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $all-colors: map-merge($all-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $all-colors: map-merge($all-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $all-colors: map-merge($all-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $all-colors: map-merge($all-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}
$alt-all-colors:(); // Initialize map
@each $map in $alt-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the "main" key
    $alt-all-colors: map-merge($alt-all-colors, map-get($map, "main")); // Get the main colors
  }
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $alt-all-colors: map-merge($alt-all-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $alt-all-colors: map-merge($alt-all-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $alt-all-colors: map-merge($alt-all-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $alt-all-colors: map-merge($alt-all-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}

$all-status-colors:(); // Initialize map
@each $map in $status-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the "main" key
    $all-status-colors: map-merge($all-status-colors, map-get($map, "main")); // Get the main colors
  }
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $all-status-colors: map-merge($all-status-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $all-status-colors: map-merge($all-status-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $all-status-colors: map-merge($all-status-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $all-status-colors: map-merge($all-status-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}
$alt-all-status-colors:(); // Initialize map
@each $map in $alt-status-color-maps {
  @if map-has-key($map, "main") { // Check to see if it has the "main" key
    $alt-all-status-colors: map-merge($alt-all-status-colors, map-get($map, "main")); // Get the main colors
  }
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $alt-all-status-colors: map-merge($alt-all-status-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $alt-all-status-colors: map-merge($alt-all-status-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $alt-all-status-colors: map-merge($alt-all-status-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $alt-all-status-colors: map-merge($alt-all-status-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}

/// Generate Trans Colors Map
/// Needed for gnerating transparency utilities
$trans-colors:(); // Initialize map
@each $map in $color-maps {
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $trans-colors: map-merge($trans-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $trans-colors: map-merge($trans-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $trans-colors: map-merge($trans-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $trans-colors: map-merge($trans-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}
$alt-trans-colors:(); // Initialize map
@each $map in $alt-color-maps {
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $alt-trans-colors: map-merge($alt-trans-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $alt-trans-colors: map-merge($alt-trans-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $alt-trans-colors: map-merge($alt-trans-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $alt-trans-colors: map-merge($alt-trans-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}

$trans-status-colors:(); // Initialize map
@each $map in $status-color-maps {
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $trans-status-colors: map-merge($trans-status-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $trans-status-colors: map-merge($trans-status-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $trans-status-colors: map-merge($trans-status-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $trans-status-colors: map-merge($trans-status-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}
$alt-trans-status-colors:(); // Initialize map
@each $map in $alt-status-color-maps {
  @if map-has-key($map, "trans") { // Check to see if it has the "trans" key
    $alt-trans-status-colors: map-merge($alt-trans-status-colors, map-get($map, "trans")); // Get the trans colors
  }
  @if map-has-key($map, "light-trans") { // Check to see if it has the "light-trans" key
    $alt-trans-status-colors: map-merge($alt-trans-status-colors, map-get($map, "light-trans")); // Get the light trans colors
  }
  @if map-has-key($map, "dark-trans") { // Check to see if it has the "dark-trans" key
    $alt-trans-status-colors: map-merge($alt-trans-status-colors, map-get($map, "dark-trans")); // Get the dark trans colors
  }
  @if map-has-key($map, "ultra-dark-trans") { // Check to see if it has the "ultra-dark-trans" key
    $alt-trans-status-colors: map-merge($alt-trans-status-colors, map-get($map, "ultra-dark-trans")); // Get the ultra-dark trans colors
  }
}


// // Color Loops

// @mixin loop-colors($colors...) {
//   $total-colors: length($colors);
  
//   @for $i from 1 through $total-colors {
//     $color: nth($colors, $i);
//     &:nth-child(#{$total-colors}n + #{$i}) {
//       @content($color);
//     }
//   }
// }
// $option-color-scheme: off !default;
$website-color-scheme: light !default;

// Check to see if any alternate colors are on
// and activate color-scheme conditionally

$option-color-scheme: off;

@if $option-action-clr-alt == on
    or $option-primary-clr-alt == on
    or $option-secondary-clr-alt == on
    or $option-accent-clr-alt == on
    or $option-base-clr-alt == on
    or $option-shade-clr-alt == on
    or $option-neutral-clr-alt == on
    or $option-success-clr-alt == on
    or $option-warning-clr-alt == on
    or $option-info-clr-alt == on
    or $option-danger-clr-alt == on {
        $option-color-scheme: on;
        } @else {
        $option-color-scheme: off;
}

// Programmatic color scheme protection
$color-scheme-main-selectors: ":root", ".color-scheme--main";
$colorscheme-locked-selectors: null !default;

@if $colorscheme-locked-selectors !=null {
	$color-scheme-main-selectors: join($color-scheme-main-selectors, $colorscheme-locked-selectors);
}


// Import Vars & Options
// Focus Styles
$focus-style: outline !default;
$focus-color: var(--action) !default;
$focus-offset: 0.25em !default;
$focus-width: .2rem !default;

// Selection Styles
$selection-bg: null !default;
$selection-text: null !default;
$selection-bg-alt: null !default;
$selection-text-alt: null !default;
// Header Heights
$header-height-xxl: 0 !default;
$header-height: 0 !default; // Base
$header-height-xl: 0 !default;
$header-height-l: 0 !default;
$header-height-m: 0 !default;
$header-height-s: 0 !default;
$header-height-xs: 0 !default;

$header-heights: (
    xl: $header-height-xl,
    l: $header-height-l,
    m: $header-height-m,
    s: $header-height-s,
);

@if $option-breakpoint-xxl == on {
    $header-heights: map-merge($header-heights, (xxl: $header-height-xxl));
}
@if $option-breakpoint-xs == on {
    $header-heights: map-merge($header-heights, (xs: $header-height-xs));
}

$option-use-header-height-for-scroll-offset: on !default;

// Scroll Margin
$scroll-margin-xxl: 0 !default;
$scroll-margin: 0 !default; // Base
$scroll-margin-xl: 0 !default;
$scroll-margin-l: 0 !default;
$scroll-margin-m: 0 !default;
$scroll-margin-s: 0 !default;
$scroll-margin-xs: 0 !default;

$offset-xxl: $scroll-margin-xxl;
$offset: $scroll-margin;
$offset-xl: $scroll-margin-xl;
$offset-l: $scroll-margin-l;
$offset-m: $scroll-margin-m;
$offset-s: $scroll-margin-s;
$offset-xs: $scroll-margin-s;

// If header height is used for scroll offset,
// then combine the header height with the scroll margin
// and overwrite the offset variables with the new value.
@if $option-use-header-height-for-scroll-offset == on {
    $offset-xxl: $scroll-margin-xxl + $header-height-xxl;
    $offset: $scroll-margin + $header-height;
    $offset-xl: $scroll-margin-xl + $header-height-xl;
    $offset-l: $scroll-margin-l + $header-height-l;
    $offset-m: $scroll-margin-m + $header-height-m;
    $offset-s: $scroll-margin-s + $header-height-s;
    $offset-xs: $scroll-margin-s + $header-height-xs;
}

$offsets: (
    xl: $offset-xl,
    l: $offset-l,
    m: $offset-m,
    s: $offset-s,
);

@if $breakpoint-xxl == on {
    $offsets: map-merge($offsets, (xxl: $offset-xxl));
}
@if $breakpoint-xs == on {
    $offsets: map-merge($offsets, (xs: $offset-xs));
}
$box-shadow-1-name: m !default;
$box-shadow-2-name: l !default;
$box-shadow-3-name: xl !default;

$box-shadow-1-value: 0 4px 4px -10px hsla($neutral-h, $neutral-s, $neutral-l, 0.04),
  0 13px 13px -10px hsla($neutral-h, $neutral-s, $neutral-l, 0.06),
  0 40px 60px -10px hsla($neutral-h, $neutral-s, $neutral-l, 0.08) !default;

$box-shadow-2-value: 0 2.7px 3.6px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.04),
  0 7.5px 10px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.06),
  0 18px 24.1px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.08),
  0 60px 80px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.1) !default;

$box-shadow-3-value: 2.8px 2.8px 2.2px hsla($neutral-h, $neutral-s, $neutral-l, 0.02),
  0 6.7px 5.3px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.04),
  0 12.5px 10px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.06),
  0 22.3px 17.9px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.08),
  0 41.8px 33.4px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.1),
  0 80px 80px -5px hsla($neutral-h, $neutral-s, $neutral-l, 0.105) !default;
$option-boxed-layout: off !default;

$device-bg-color: null !default;
$body-max-width: null !default;
$body-box-shadow: null !default;
$body-margin-top: null !default;
$body-border-color: null !default;
$body-border-style: null !default;
$body-border-width: null !default;
$body-border-radius: null !default;
$option-container-gap: off !default;
$option-content-gap: off !default;
$option-grid-gap: off !default;
// Feature Switch
$option-cards: off !default;
// Turn on automatic card targeting via $card-selector-auto
$option-auto-card-selector: off !default;
// Create an initial card targeting list
$card-selectors: ".card" !default;
// Set the default method of auto selecting cards
$card-selector-auto: ":is([class*='card']:where(:not([class*='__'], [class*='wrapper'], [class*='cards'], [class*='group'])))" !default;
// If the user wants to use the auto selector, add it to the default selector list
@if $option-auto-card-selector == on {
  $card-selectors: ".card, #{$card-selectors}, #{$card-selector-auto}";
}
// Option for using container queries
$option-card-container-queries: off !default;
// Option for using grid for card layouts
$option-cards-use-grid: off !default;

/// Card Framework Variables
$primary-card-style: light !default;
$card-display: if($option-cards-use-grid == on, grid, flex);
// Light Card Colors
$light-card-background: var(--white) !default;
$light-card-background-hover: var(--black) !default;
$light-card-heading-color: null !default;
$light-card-text-color: var(--text-dark-muted) !default;
$light-card-link-color: null !default;
$light-card-link-hover-color: null !default;
$light-card-button-style: null !default;
$light-card-icon-style: null !default;
$light-card-avatar-border-color: null !default;
$light-card-border-color: null !default;
$light-card-shadow: null !default;
// Dark Card Colors
$dark-card-background: var(--black) !default;
$dark-card-background-hover: var(--black) !default;
$dark-card-heading-color: var(--white) !default;
$dark-card-text-color: var(--text-light-muted) !default;
$dark-card-link-color: var(--primary) !default;
$dark-card-link-hover-color: var(--primary-hover) !default;
$dark-card-button-style: null !default;
$dark-card-icon-style: null !default;
$dark-card-avatar-border-color: null !default;
$dark-card-border-color: null !default;
$dark-card-shadow: null !default;
// Spacing
$card-padding: var(--space-m) !default;
$card-gap: calc(var(--content-gap) / 2) !default;
// Border
$option-card-concentric-radius: off !default;
$card-border-width: var(--border-width) !default;
$card-border-style: var(--border-style) !default;
$card-radius: 1rem !default;
// Typography
$card-heading-size: var(--h3) !default;
$card-text-size: 1em !default;
$card-button-font-size: var(--text-s) !default;
// Icons
$card-icon-size: 48px !default;
$card-line-height: 1.4 !default;
$card-icon-radius: null !default;
// Avatars
$card-avatar-radius: 50vw !default;
$card-avatar-border-width: null !default;
$card-avatar-border-style: null !default;
$card-avatar-size: 98px !default;
$card-avatar-aspect-ratio: 1;
// Media
$card-media-radius: var(--radius) !default;
$card-media-aspect-ratio: null !default;
$card-media-object-fit: null !default;

// Card Styles Map
$card-styles: (
  'global': (
    'card-padding': $card-padding,
    'card-gap': $card-gap,
    'card-border-width': $card-border-width,
    'card-border-style': $card-border-style,
		'card-display': $card-display,
    'card-radius': $card-radius,
    'card-heading-size': $card-heading-size,
    'card-text-size': $card-text-size,
    'card-button-font-size': $card-button-font-size,
    'card-icon-size': $card-icon-size,
    'card-line-height': $card-line-height,
    'card-avatar-radius': $card-avatar-radius,
		'card-avatar-border-width': $card-avatar-border-width,
		'card-avatar-border-style': $card-avatar-border-style,
    'card-avatar-size': $card-avatar-size,
    'card-avatar-aspect-ratio': $card-avatar-aspect-ratio,
    'card-media-radius': $card-media-radius,
		'card-media-aspect-ratio': $card-media-aspect-ratio,
		'card-media-object-fit': $card-media-object-fit,
		'card-icon-radius': $card-icon-radius,
  ),
  'light': (
    'card-background': $light-card-background,
		'card-background-hover': $light-card-background-hover,
    'card-heading-color': $light-card-heading-color,
    'card-text-color': $light-card-text-color,
    'card-link-color': $light-card-link-color,
    'card-link-color-hover': $light-card-link-hover-color,
    'card-button-style': $light-card-button-style,
		'card-avatar-border-color': $light-card-avatar-border-color,
		'card-border-color': $light-card-border-color,
		'card-shadow': $light-card-shadow
  ),
  'dark': (
    'card-background': $dark-card-background,
		'card-background-hover': $dark-card-background-hover,
    'card-heading-color': $dark-card-heading-color,
    'card-text-color': $dark-card-text-color,
    'card-link-color': $dark-card-link-color,
    'card-link-color-hover': $dark-card-link-hover-color,
    'card-button-style': $dark-card-button-style,
		'card-avatar-border-color': $dark-card-avatar-border-color,
		'card-border-color': $dark-card-border-color,
		'card-shadow': $dark-card-shadow
  )
);

// Breakout maps
$card-styles-global: map-get($card-styles, global);
$card-styles-light: map-get($card-styles, light);
$card-styles-dark: map-get($card-styles, dark);

@mixin card($style: $primary-card-style, $output: all) {
	// Setup concentric radius variable
	--concentric-radius: calc(var(--radius) + var(--card-padding) / 2);
	// Check for "alt" style
	@if $style == alt {
		// If user wants alt style, check for primary style and serve the opposite
		@if $primary-card-style == "light" or $primary-card-style == "Light" {
			$style: dark;
		}
		@if $primary-card-style == "dark" or $primary-card-style == "Dark" {
			$style: light;
		}
	}
	// Loop through style properties
	@if $style == "light" or $style == "Light" {
		@each $prop, $value in $card-styles-light {
			@if $value != null {
				--#{$prop}: var(--light-#{$prop});
			}
		}
	}
	@if $style == "dark" or $style == "Dark" {
		@each $prop, $value in $card-styles-dark {
			@if $value != null {
				--#{$prop}: var(--dark-#{$prop});
			}
		}
	}
	// Output all properties ("all" is default)
	// This allows user to specify non-all output to avoid duplicating properties
	@if $output == all {
		// Main Styles
		display: var(--card-display, flex) !important;
		flex-direction: var(--card-flex-direction, column);
		position: relative;
		overflow: var(--card-overflow, clip);
		background-clip: padding-box;
		transition: var(--card-transition, var(--transition));
		font-size: var(--card-text-size, var(--text-s));
		// Border Styles
		/// Check and handle concentric radius option
		@if $option-card-concentric-radius == on {
			--card-radius: var(--concentric-radius);
		}
		border-width: var(--card-border-width, var(--border-width));
		border-style: var(--card-border-style, var(--border-style));
		border-color: var(--card-border-color, transparent);
		border-radius: var(--card-radius, var(--radius, 0));
		// Spacing
		padding: var(--card-padding, var(--space-m));
		gap: var(--card-gap, var(--content-gap));
		// Colors
		background: var(--card-background, var(--white));
		color: var(--card-text-color, var(--text-dark));
		// Typography
		line-height: var(--card-line-height, inherit);
		// Hover
		&:hover {
			background: var(--card-background-hover, var(--card-background));
		}
		// Media Styles
		& :where([class*="__media"]:not([class*="wrapper"])) {
			border-radius: var(--card-media-radius, var(--radius, 0));
			aspect-ratio: var(--card-media-aspect-ratio, 16/9);
			object-fit: var(--card-media-object-fit, fill);
			overflow: clip;
			inline-size: 100%;
			& img {
				object-fit: var(--card-media-object-fit, fill);
			}
		}
		// Avatar Styles
		& img[class*="__avatar"]:not([class*="wrapper"]), [class*="__avatar"] img {
			border-radius: var(--card-avatar-radius, 50vw);
			border-width: var(--card-avatar-border-width, 0);
			border-style: var(--card-avatar-border-style, solid);
			border-color: var(--card-avatar-border-color, transparent);
			inline-size: var(--card-avatar-size, 48px);
			block-size: var(--card-avatar-size, 48px);
			align-self: center;
			aspect-ratio: 1;
			object-fit: cover;
			overflow: clip;
			img {
				object-fit: cover;
			}
		}
		// Text Styles
		:is(h1,h2,h3,h4,h5,h6) {
			font-size: var(--card-heading-size, var(--h3));
			color: var(--card-heading-color, var(--text-dark));
		}
		// Link Styles
		// Must exclude headings, icons, and buttons
		:where(a):where(:not(h1 a,h2 a,h3 a,h4 a,h5 a,h6 a, [class*="btn--"], [data-icon])) {
			color: var(--card-link-color, var(--primary));
			&:hover {
				color: var(--card-link-hover-color, var(--primary-hover));
			}
		}
		// Shadow Styles
		@if $light-card-shadow != null or $dark-card-shadow != null {
			box-shadow: var(--card-shadow, none);
		}
	}
	// Main Icon Style
	& :where([class*="__icon"]) {
		--icon-radius: var(--card-icon-radius, var(--radius, 0));
		--icon-size: var(--card-icon-size, 48px);
		@if $style == dark {
			@include icon($dark-card-icon-style);
		}
		@if $style == light {
			@include icon($light-card-icon-style);
		}
	}
	// Other Icons
	& :where([data-icon]) {
		@if $style == dark {
			@include icon($dark-card-icon-style);
		}
		@if $style == light {
			@include icon($light-card-icon-style);
		}
	}
	// Button Adjustments
	[class*="btn--"] {
		--btn-font-size: var(--card-button-font-size, var(--text-s));
		@if $style == "light" or $style == "Light" {
			@include btn($light-card-button-style, no);
		}
		@if $style == "dark" or $style == "Dark" {
			@include btn($dark-card-button-style, no);
		}
	}
}

@mixin card-container($range-syntax) {
	@container card (#{$range-syntax}) {
		@content;
	}
}

$section-padding-block: var(--section-space-m) !default;
$option-object-fit: on !default; // 50 Lines
$option-auto-object-fit: off !default; // 50 Lines
// VARS
$base-space: 3 !default;
$base-space-min: 2.4 !default;
$space-scale: 1.5 !default;
$mob-space-scale: 1.3 !default;
$space-adjust-section: 4 !default;
$mob-space-adjust-section: 3 !default;
$section-padding-x-min: 2.4 !default;
$section-padding-x-max: 3 !default;
$section-padding-x-rem: append-rem($section-padding-x-min);
$gutter: fluidClamp($section-padding-x-min, $section-padding-x-max);
$gutter-max: $section-padding-x-max;
$gutter-min: $section-padding-x-max;

// PURE SPACING (FALLBACKS)
$section-padding-x-pure: $section-padding-x-min;
$space-xs-pure: 1.896rem !default;
$space-s-pure: 2.133rem !default;
$space-m-pure: 2.4rem !default;
$space-l-pure: 2.7rem !default;
$space-xl-pure: 3.038rem !default;
$space-xxl-pure: 3.42rem !default;
$section-space-xs-pure: 3.84rem !default;
$section-space-s-pure: 4.8rem !default;
$section-space-m-pure: 6rem !default;
$section-space-l-pure: 7.5rem !default;
$section-space-xl-pure: 9.375rem !default;
$section-space-xxl-pure: 11.719rem !default;

// SPACING SCALE MATH
$space-m-min: $base-space-min;
$space-m-max: $base-space;
$space-s-min: $space-m-min / $mob-space-scale;
$space-s-max: $space-m-max / $space-scale;
$space-xs-min: $space-s-min / $mob-space-scale;
$space-xs-max: $space-s-max / $space-scale;
$space-l-min: $space-m-min * $mob-space-scale;
$space-l-max: $space-m-max * $space-scale;
$space-xl-min: $space-l-min * $mob-space-scale;
$space-xl-max: $space-l-max * $space-scale;
$space-xxl-min: $space-xl-min * $mob-space-scale;
$space-xxl-max: $space-xl-max * $space-scale;

// SECTION SPACING MATH

$section-m-min: $space-m-min * $mob-space-adjust-section;
$section-m-max: $space-m-max * $space-adjust-section;

$section-xs-min: $space-xs-min * $mob-space-adjust-section;
$section-xs-max: $space-xs-max * $space-adjust-section;

$section-s-min: $space-s-min * $mob-space-adjust-section;
$section-s-max: $space-s-max * $space-adjust-section;

$section-l-min: $space-l-min * $mob-space-adjust-section;
$section-l-max: $space-l-max * $space-adjust-section;

$section-xl-min: $space-xl-min * $mob-space-adjust-section;
$section-xl-max: $space-xl-max * $space-adjust-section;

$section-xxl-min: $space-xxl-min * $mob-space-adjust-section;
$section-xxl-max: $space-xxl-max * $space-adjust-section;

$text-font-family: null !default;
$accent-font-family: null !default;
$body-color: var(--black) !default;
$text-wrap: pretty !default;

// Default Line Height
$base-text-lh: 1.5 !default; // User configurable
$text-xxl-line-height: null !default;
$text-xl-line-height: null !default;
$text-l-line-height: null !default;
$text-m-line-height: $base-text-lh; // Not user configurable
$text-s-line-height: null !default;
$text-xs-line-height: null !default;

// Default Line Max-width
$text-max-width: null !default;
$text-xxl-max-width: 20ch !default;
$text-xl-max-width: null !default;
$text-l-max-width: null !default;
$text-m-max-width: 100px !default;
$text-s-max-width: null !default;
$text-xs-max-width: null !default;

// Default Font-weight
$text-font-weight: null !default;
$text-xs-font-weight: null !default;
$text-s-font-weight: null !default;
$text-m-font-weight: null !default;
$text-l-font-weight: null !default;
$text-xl-font-weight: null !default;
$text-xxl-font-weight: null !default;

// Default Letter Spacing
$text-letter-spacing: null !default;
$text-xs-letter-spacing: null !default;
$text-s-letter-spacing: null !default;
$text-m-letter-spacing: null !default;
$text-l-letter-spacing: null !default;
$text-xl-letter-spacing: null !default;
$text-xxl-letter-spacing: null !default;

// Default Font Style
$text-font-style: null !default;
$text-xs-font-style: null !default;
$text-s-font-style: null !default;
$text-m-font-style: null !default;
$text-l-font-style: null !default;
$text-xl-font-style: null !default;
$text-xxl-font-style: null !default;

// Default Text-transform
$text-transform: null !default;
$text-xxl-text-transform: null !default;
$text-xl-text-transform: null !default;
$text-l-text-transform: null !default;
$text-m-text-transform: null !default;
$text-s-text-transform: null !default;
$text-xs-text-transform: null !default;

// Default Global Text Styles (All Headings)
$textDefaultStyles: (
    font-family: $text-font-family,
    color: $body-color,
    line-height: $base-text-lh,
    font-weight: $text-font-weight,
    letter-spacing: $text-letter-spacing,
    max-width: $text-max-width,
    font-style: $text-font-style,
    text-transform: $text-transform,
    text-wrap: $text-wrap,
);

// Individual Global Text Styles
$textGlobalStyles: (
    xxl: (
        font-weight: $text-xxl-font-weight,
        letter-spacing: $text-xxl-letter-spacing,
        line-height: $text-xxl-line-height,
        max-width: $text-xxl-max-width,
        font-style: $text-xxl-font-style,
        text-transform: $text-xxl-text-transform,
    ),
    xl: (
        font-weight: $text-xl-font-weight,
        letter-spacing: $text-xl-letter-spacing,
        line-height: $text-xl-line-height,
        max-width: $text-xl-max-width,
        font-style: $text-xl-font-style,
        text-transform: $text-xl-text-transform,
    ),
    l: (
        font-weight: $text-l-font-weight,
        letter-spacing: $text-l-letter-spacing,
        line-height: $text-l-line-height,
        max-width: $text-l-max-width,
        font-style: $text-l-font-style,
        text-transform: $text-l-text-transform,
    ),
    m: (
        font-weight: $text-m-font-weight,
        letter-spacing: $text-m-letter-spacing,
        line-height: $text-m-line-height,
        max-width: $text-m-max-width,
        font-style: $text-m-font-style,
        text-transform: $text-m-text-transform,
    ),
    s: (
        font-weight: $text-s-font-weight,
        letter-spacing: $text-s-letter-spacing,
        line-height: $text-s-line-height,
        max-width: $text-s-max-width,
        font-style: $text-s-font-style,
        text-transform: $text-s-text-transform,
    ),
    xs: (
        font-weight: $text-xs-font-weight,
        letter-spacing: $text-xs-letter-spacing,
        line-height: $text-xs-line-height,
        max-width: $text-xs-max-width,
        font-style: $text-xs-font-style,
        text-transform: $text-xs-text-transform,
    ),
);

// Global Heading Defaults
$heading-font-family: null !default;
$heading-color: null !default;
$base-heading-lh: 1.2 !default;
$heading-max-width: null !default;
$heading-weight: 700 !default;
$heading-letter-spacing: null !default;
$heading-font-style: null !default;
$heading-text-transform: null !default;
$heading-text-wrap: pretty !default;

// Default Font Family
$h1-font-family: null !default;
$h2-font-family: null !default;
$h3-font-family: null !default;
$h4-font-family: null !default;
$h5-font-family: null !default;
$h6-font-family: null !default;

// Default Line Height
$h1-line-height: null !default;
$h2-line-height: null !default;
$h3-line-height: null !default;
$h4-line-height: $base-heading-lh; // Not user configurable
$h5-line-height: null !default;
$h6-line-height: null !default;

// Default Line Length
$h1-max-width: null !default;
$h2-max-width: null !default;
$h3-max-width: null !default;
$h4-max-width: null !default;
$h5-max-width: null !default;
$h6-max-width: null !default;

// Default Font Weight
$h1-font-weight: null !default;
$h2-font-weight: null !default;
$h3-font-weight: null !default;
$h4-font-weight: null !default;
$h5-font-weight: null !default;
$h6-font-weight: null !default;

// Default Letter Spacing
$h1-letter-spacing: null !default;
$h2-letter-spacing: null !default;
$h3-letter-spacing: null !default;
$h4-letter-spacing: null !default;
$h5-letter-spacing: null !default;
$h6-letter-spacing: null !default;

// Default Font Style
$h1-font-style: null !default;
$h2-font-style: null !default;
$h3-font-style: null !default;
$h4-font-style: null !default;
$h5-font-style: null !default;
$h6-font-style: null !default;

// Default Color
$h1-color: null !default;
$h2-color: null !default;
$h3-color: null !default;
$h4-color: null !default;
$h5-color: null !default;
$h6-color: null !default;

// Default Text-transform
$h1-text-transform: null !default;
$h2-text-transform: null !default;
$h3-text-transform: null !default;
$h4-text-transform: null !default;
$h5-text-transform: null !default;
$h6-text-transform: null !default;

// Default Heading Styles (All Headings)
$headingDefaultStyles: (
    font-family: $heading-font-family,
    color: $heading-color,
    line-height: $base-heading-lh,
    font-weight: $heading-weight,
    letter-spacing: $heading-letter-spacing,
    max-width: $heading-max-width,
    font-style: $heading-font-style,
    text-transform: $heading-text-transform,
    text-wrap: $heading-text-wrap,
);

// Individual Global Heading Styles
$headingGlobalStyles: (
    h1: (
		font-family: $h1-font-family,
        font-weight: $h1-font-weight,
        letter-spacing: $h1-letter-spacing,
        line-height: $h1-line-height,
        max-width: $h1-max-width,
        font-style: $h1-font-style,
        color: $h1-color,
        text-transform: $h1-text-transform,
    ),
    h2: (
		font-family: $h2-font-family,
        font-weight: $h2-font-weight,
        letter-spacing: $h2-letter-spacing,
        line-height: $h2-line-height,
        max-width: $h2-max-width,
        font-style: $h2-font-style,
        color: $h2-color,
        text-transform: $h2-text-transform,
    ),
    h3: (
		font-family: $h3-font-family,
        font-weight: $h3-font-weight,
        letter-spacing: $h3-letter-spacing,
        line-height: $h3-line-height,
        max-width: $h3-max-width,
        font-style: $h3-font-style,
        color: $h3-color,
        text-transform: $h3-text-transform,
    ),
    h4: (
		font-family: $h4-font-family,
        font-weight: $h4-font-weight,
        letter-spacing: $h4-letter-spacing,
        line-height: $base-heading-lh,
        max-width: $h4-max-width,
        font-style: $h4-font-style,
        color: $h4-color,
        text-transform: $h4-text-transform,
    ),
    h5: (
		font-family: $h5-font-family,
        font-weight: $h5-font-weight,
        letter-spacing: $h5-letter-spacing,
        line-height: $h5-line-height,
        max-width: $h5-max-width,
        font-style: $h5-font-style,
        color: $h5-color,
        text-transform: $h5-text-transform,
    ),
    h6: (
		font-family: $h6-font-family,
        font-weight: $h6-font-weight,
        letter-spacing: $h6-letter-spacing,
        line-height: $h6-line-height,
        max-width: $h6-max-width,
        font-style: $h6-font-style,
        color: $h6-color,
        text-transform: $h6-text-transform,
    ),
);


// Bases

$root-font-size: 62.5% !default;

// Fluid Text
$base-text-desk: 1.8 !default;
$base-text-mob: 1.6 !default;
$text-scale: 1.333 !default;
$mob-text-scale: 1.2 !default;

$text-xs-stop: 1.1 !default;
$text-s-stop: 1.2 !default;

// Fluid Headings
$base-heading-desk: $base-text-desk !default;
$base-heading-mob: $base-text-mob !default;
$heading-scale: $text-scale !default;
$mob-heading-scale: $mob-text-scale !default;

$h6-stop: $text-xs-stop !default;
$h5-stop: $text-s-stop !default;

// Multiplier

$text-multiplier: 1.5 !default; // Controls the .text--larger class
$text-multiplier-min: 1.1 !default; // Adds mobile control for .text--larger class

// DEFAULT

$body-bg-color: var(--white) !default;

// PURE FALLBACKS

$text-xs-pure: 1.26rem !default;
$text-s-pure: 1.42rem !default;
$text-m-pure: 1.8rem !default;
$text-l-pure: 2.025rem !default;
$text-xl-pure: 2.28rem !default;
$text-xxl-pure: 2.565rem !default;

// TEXT SIZES

$text-m-max: $base-text-desk !default;
$text-m-min: $base-text-mob !default;
$text-xs-max: $base-text-desk / pow($text-scale, 2) !default;
$text-xs-min: $base-text-mob / pow($mob-text-scale, 2) !default;
$text-s-max: $base-text-desk / $text-scale !default;
$text-s-min: $base-text-mob / $mob-text-scale !default;
$text-l-max: $base-text-desk * pow($text-scale, 1) !default;
$text-l-min: $base-text-mob * pow($mob-text-scale, 1) !default;
$text-xl-max: $base-text-desk * pow($text-scale, 2) !default;
$text-xl-min: $base-text-mob * pow($mob-text-scale, 2) !default;
$text-xxl-max: $base-text-desk * pow($text-scale, 3) !default;
$text-xxl-min: $base-text-mob * pow($mob-text-scale, 3) !default;

// HEADING SIZES

$h4-max: $base-heading-desk !default;
$h4-min: $base-heading-mob !default;
$h6-max: $base-heading-desk / pow($heading-scale, 2) !default;
$h6-min: $base-heading-mob / pow($mob-heading-scale, 2) !default;
$h5-max: $base-heading-desk / $heading-scale !default;
$h5-min: $base-heading-mob / $mob-heading-scale !default;
$h3-max: $base-heading-desk * pow($heading-scale, 1) !default;
$h3-min: $base-heading-mob * pow($mob-heading-scale, 1) !default;
$h2-max: $base-heading-desk * pow($heading-scale, 2) !default;
$h2-min: $base-heading-mob * pow($mob-heading-scale, 2) !default;
$h1-max: $base-heading-desk * pow($heading-scale, 3) !default;
$h1-min: $base-heading-mob * pow($mob-heading-scale, 3) !default;

$col-width-s: append-rem($vp-max * .1) !default;
$col-width-m: append-rem($vp-max * .2) !default;
$col-width-l: append-rem($vp-max * .3) !default;

$col-rule-width-s: .1em !default;
$col-rule-width-m: .3em !default;
$col-rule-width-l: .5em !default;

// Options
$btn-exclusion-selectors-user: null !default;
$btn-exclusion-selectors: if($btn-exclusion-selectors-user, "#{$btn-exclusion-selectors-user}, .btn--none, .wp-block-button", ".btn--none, .wp-block-button");
@if $option-etch == on {
	$btn-exclusion-selectors: if($btn-exclusion-selectors-user, "#{$btn-exclusion-selectors-user}, .btn--none", ".btn--none");
}

// Global
$btn-border-width: 0.25rem !default;
$btn-outline-border-width: 0.25rem !default;
$btn-border-style: solid !default;
$btn-border-radius: 0.5em !default;
$btn-padding-block: 1em !default;
$btn-padding-inline: 1.5em !default;
$btn-text-transform: none !default;
$btn-font-style: normal !default;
$option-btn-text-size: off !default;
$btn-text-min: $text-m-min !default;
$btn-text-max: $text-m-max !default;
$btn-font-size: fluidClamp($btn-text-min, $btn-text-max);
$btn-letter-spacing: 0 !default;
$btn-line-height: 1.2 !default;
$btn-text-decoration: none !default;
$btn-text-decoration-hover: none !default;
$btn-font-weight: 400 !default;
$btn-min-width: append-rem(20) !default;
$btn-transition-duration: .3s !default;
$btn-use-global-transition-option: on !default;
$btn-transition: var(--transition) !default;
$btn-justify-content: center !default;
$btn-text-align: center !default;

// Primary Defaults
$option-primary-btn: on !default;
$option-primary-btn-shades: on !default;
$option-primary-btn-outline: on !default;

///// Main
$btn-primary-bg: var(--primary) !default;
$btn-primary-hover: var(--primary-hover) !default;
$btn-primary-text: var(--primary-ultra-light) !default;
$btn-primary-hover-text: var(--primary-ultra-light) !default;
$btn-primary-border-color: var(--primary) !default;
$btn-primary-hover-border-color: var(--primary-hover) !default;
$btn-primary-focus-color: var(--primary-light) !default;
///// Dark
$btn-primary-dark-bg: var(--primary-dark) !default;
$btn-primary-dark-hover: var(--primary-ultra-dark) !default;
$btn-primary-dark-text: var(--primary-ultra-light) !default;
$btn-primary-dark-hover-text: var(--primary-ultra-light) !default;
$btn-primary-dark-border-color: var(--primary-dark) !default;
$btn-primary-dark-hover-border-color: var(--primary-ultra-dark) !default;
$btn-primary-dark-focus-color: var(--primary-semi-dark) !default;
///// Light
$btn-primary-light-bg: var(--primary-ultra-light) !default;
$btn-primary-light-hover: var(--primary-light) !default;
$btn-primary-light-text: var(--primary) !default;
$btn-primary-light-hover-text: var(--primary-ultra-dark) !default;
$btn-primary-light-border-color: var(--primary-ultra-light) !default;
$btn-primary-light-hover-border-color: var(--primary-light) !default;
$btn-primary-light-focus-color: var(--primary-light) !default;
///// Outline
$btn-primary-outline-background: transparent !default;
$btn-primary-outline-background-hover: var(--primary-hover) !default;
$primary-outline-btn-text: var(--primary) !default;
$primary-outline-hover-text: var(--primary-ultra-light) !default;
$btn-primary-outline-border-color: var(--primary) !default;
$btn-primary-outline-border-hover: var(--primary-hover) !default;
$btn-primary-outline-focus-color: var(--primary-semi-light) !default;
///// Outline Dark
$btn-primary-outline-dark-background: transparent !default;
$btn-primary-outline-dark-background-hover: var(--primary-dark) !default;
$primary-outline-dark-btn-text: var(--primary-dark) !default;
$primary-outline-dark-hover-text: var(--primary-ultra-light) !default;
$btn-primary-outline-dark-border-color: var(--primary-dark) !default;
$btn-primary-outline-dark-border-hover: var(--primary-dark) !default;
$btn-primary-outline-dark-focus-color: var(--primary-semi-dark) !default;
///// Outline Light
$btn-primary-outline-light-background: transparent !default;
$btn-primary-outline-light-background-hover: var(--primary-ultra-light) !default;
$primary-outline-light-btn-text: var(--primary-ultra-light) !default;
$primary-outline-light-hover-text: var(--primary-dark) !default;
$btn-primary-outline-light-border-color: var(--primary-ultra-light) !default;
$btn-primary-outline-light-border-hover: var(--primary-ultra-light) !default;
$btn-primary-outline-light-focus-color: var(--primary-light) !default;

$btn-primary: (); // Initialize Map
@if $option-primary-btn == on {

    $btn-primary: (
        "primary": (
            btn-background: $btn-primary-bg,
            btn-background-hover: $btn-primary-hover,
            btn-text-color: $btn-primary-text,
            btn-text-color-hover: $btn-primary-hover-text,
            btn-border-color: $btn-primary-border-color,
            btn-border-color-hover: $btn-primary-hover-border-color,
            focus-color: $btn-primary-focus-color,
        ),
        "primary-dark": (
            btn-background: $btn-primary-dark-bg,
            btn-background-hover: $btn-primary-dark-hover,
            btn-text-color: $btn-primary-dark-text,
            btn-text-color-hover: $btn-primary-dark-hover-text,
            btn-border-color: $btn-primary-dark-border-color,
            btn-border-color-hover: $btn-primary-dark-hover-border-color,
            focus-color: $btn-primary-dark-focus-color,
        ),
        "primary-light": (
            btn-background: $btn-primary-light-bg,
            btn-background-hover: $btn-primary-light-hover,
            btn-text-color: $btn-primary-light-text,
            btn-text-color-hover: $btn-primary-light-hover-text,
            btn-border-color: $btn-primary-light-border-color,
            btn-border-color-hover: $btn-primary-light-hover-border-color,
            focus-color: $btn-primary-light-focus-color,
        ),
        "primary.btn--outline": (
            btn-background: $btn-primary-outline-background,
            btn-background-hover: $btn-primary-outline-background-hover,
            btn-text-color: $primary-outline-btn-text,
            btn-text-color-hover: $primary-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-primary-outline-border-color,
            btn-border-color-hover: $btn-primary-outline-border-hover,
            focus-color: $btn-primary-focus-color,
        ),
        "primary-dark.btn--outline": (
            btn-background: $btn-primary-outline-dark-background,
            btn-background-hover: $btn-primary-outline-dark-background-hover,
            btn-text-color: $primary-outline-dark-btn-text,
            btn-text-color-hover: $primary-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-primary-outline-dark-border-color,
            btn-border-color-hover: $btn-primary-outline-dark-border-hover,
            focus-color: $btn-primary-focus-color,
        ),
        "primary-light.btn--outline": (
            btn-background: $btn-primary-outline-light-background,
            btn-background-hover: $btn-primary-outline-light-background-hover,
            btn-text-color: $primary-outline-light-btn-text,
            btn-text-color-hover: $primary-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-primary-outline-light-border-color,
            btn-border-color-hover: $btn-primary-outline-light-border-hover,
            focus-color: $btn-primary-focus-color,
        ),
    );

    @if $option-primary-btn-outline == off {
        $btn-primary: map-remove($btn-primary, "primary.btn--outline");
        $btn-primary: map-remove($btn-primary, "primary-dark.btn--outline");
        $btn-primary: map-remove($btn-primary, "primary-light.btn--outline");
    }
    @if $option-primary-btn-shades == off {
        $btn-primary: map-remove($btn-primary, "primary-dark");
        $btn-primary: map-remove($btn-primary, "primary-light");
        $btn-primary: map-remove($btn-primary, "primary-dark.btn--outline");
        $btn-primary: map-remove($btn-primary, "primary-light.btn--outline-light");
    }

}

// Secondary Defaults
$option-secondary-btn: on !default;
$option-secondary-btn-shades: on !default;
$option-secondary-btn-outline: on !default;

///// Main
$btn-secondary-bg: var(--secondary) !default;
$btn-secondary-hover: var(--secondary-hover) !default;
$btn-secondary-text: var(--secondary-ultra-light) !default;
$btn-secondary-hover-text: var(--secondary-ultra-light) !default;
$btn-secondary-border-color: var(--secondary) !default;
$btn-secondary-hover-border-color: var(--secondary-hover) !default;
$btn-secondary-focus-color: var(--secondary-light) !default;
///// Dark
$btn-secondary-dark-bg: var(--secondary-dark) !default;
$btn-secondary-dark-hover: var(--secondary-ultra-dark) !default;
$btn-secondary-dark-text: var(--secondary-ultra-light) !default;
$btn-secondary-dark-hover-text: var(--secondary-ultra-light) !default;
$btn-secondary-dark-border-color: var(--secondary-dark) !default;
$btn-secondary-dark-hover-border-color: var(--secondary-ultra-dark) !default;
$btn-secondary-dark-focus-color: var(--secondary-semi-dark) !default;
///// Light
$btn-secondary-light-bg: var(--secondary-ultra-light) !default;
$btn-secondary-light-hover: var(--secondary-light) !default;
$btn-secondary-light-text: var(--secondary) !default;
$btn-secondary-light-hover-text: var(--secondary-ultra-dark) !default;
$btn-secondary-light-border-color: var(--secondary-ultra-light) !default;
$btn-secondary-light-hover-border-color: var(--secondary-light) !default;
$btn-secondary-light-focus-color: var(--secondary-light) !default;
///// Outline
$btn-secondary-outline-background: transparent !default;
$btn-secondary-outline-background-hover: var(--secondary-hover) !default;
$secondary-outline-btn-text: var(--secondary) !default;
$secondary-outline-hover-text: var(--secondary-ultra-light) !default;
$btn-secondary-outline-border-color: var(--secondary) !default;
$btn-secondary-outline-border-hover: var(--secondary-hover) !default;
$btn-secondary-outline-focus-color: var(--secondary-semi-light) !default;
///// Outline Dark
$btn-secondary-outline-dark-background: transparent !default;
$btn-secondary-outline-dark-background-hover: var(--secondary-dark) !default;
$secondary-outline-dark-btn-text: var(--secondary-dark) !default;
$secondary-outline-dark-hover-text: var(--secondary-ultra-light) !default;
$btn-secondary-outline-dark-border-color: var(--secondary-dark) !default;
$btn-secondary-outline-dark-border-hover: var(--secondary-dark) !default;
$btn-secondary-outline-dark-focus-color: var(--secondary-semi-dark) !default;
///// Outline Light
$btn-secondary-outline-light-background: transparent !default;
$btn-secondary-outline-light-background-hover: var(--secondary-ultra-light) !default;
$secondary-outline-light-btn-text: var(--secondary-ultra-light) !default;
$secondary-outline-light-hover-text: var(--secondary-dark) !default;
$btn-secondary-outline-light-border-color: var(--secondary-ultra-light) !default;
$btn-secondary-outline-light-border-hover: var(--secondary-ultra-light) !default;
$btn-secondary-outline-light-focus-color: var(--secondary-light) !default;

$btn-secondary: (); // Initialize Map
@if $option-secondary-btn == on {

    $btn-secondary: (
        "secondary": (
            btn-background: $btn-secondary-bg,
            btn-background-hover: $btn-secondary-hover,
            btn-text-color: $btn-secondary-text,
            btn-text-color-hover: $btn-secondary-hover-text,
            btn-border-color: $btn-secondary-border-color,
            btn-border-color-hover: $btn-secondary-hover-border-color,
            focus-color: $btn-secondary-focus-color,
        ),
        "secondary-dark": (
            btn-background: $btn-secondary-dark-bg,
            btn-background-hover: $btn-secondary-dark-hover,
            btn-text-color: $btn-secondary-dark-text,
            btn-text-color-hover: $btn-secondary-dark-hover-text,
            btn-border-color: $btn-secondary-dark-border-color,
            btn-border-color-hover: $btn-secondary-dark-hover-border-color,
            focus-color: $btn-secondary-dark-focus-color,
        ),
        "secondary-light": (
            btn-background: $btn-secondary-light-bg,
            btn-background-hover: $btn-secondary-light-hover,
            btn-text-color: $btn-secondary-light-text,
            btn-text-color-hover: $btn-secondary-light-hover-text,
            btn-border-color: $btn-secondary-light-border-color,
            btn-border-color-hover: $btn-secondary-light-hover-border-color,
            focus-color: $btn-secondary-light-focus-color,
        ),
        "secondary.btn--outline": (
            btn-background: $btn-secondary-outline-background,
            btn-background-hover: $btn-secondary-outline-background-hover,
            btn-text-color: $secondary-outline-btn-text,
            btn-text-color-hover: $secondary-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-secondary-outline-border-color,
            btn-border-color-hover: $btn-secondary-outline-border-hover,
            focus-color: $btn-secondary-focus-color,
        ),
        "secondary-dark.btn--outline": (
            btn-background: $btn-secondary-outline-dark-background,
            btn-background-hover: $btn-secondary-outline-dark-background-hover,
            btn-text-color: $secondary-outline-dark-btn-text,
            btn-text-color-hover: $secondary-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-secondary-outline-dark-border-color,
            btn-border-color-hover: $btn-secondary-outline-dark-border-hover,
            focus-color: $btn-secondary-focus-color,
        ),
        "secondary-light.btn--outline": (
            btn-background: $btn-secondary-outline-light-background,
            btn-background-hover: $btn-secondary-outline-light-background-hover,
            btn-text-color: $secondary-outline-light-btn-text,
            btn-text-color-hover: $secondary-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-secondary-outline-light-border-color,
            btn-border-color-hover: $btn-secondary-outline-light-border-hover,
            focus-color: $btn-secondary-focus-color,
        ),
    );

    @if $option-secondary-btn-outline == off {
        $btn-secondary: map-remove($btn-secondary, "secondary.btn--outline");
        $btn-secondary: map-remove($btn-secondary, "secondary-dark.btn--outline");
        $btn-secondary: map-remove($btn-secondary, "secondary-light.btn--outline");
    }
    @if $option-secondary-btn-shades == off {
        $btn-secondary: map-remove($btn-secondary, "secondary-dark");
        $btn-secondary: map-remove($btn-secondary, "secondary-light");
        $btn-secondary: map-remove($btn-secondary, "secondary-dark.btn--outline");
        $btn-secondary: map-remove($btn-secondary, "secondary-light.btn--outline-light");
    }

}
// Tertiary Defaults
$option-tertiary-btn: on !default;
$option-tertiary-btn-shades: on !default;
$option-tertiary-btn-outline: on !default;

///// Main
$btn-tertiary-bg: var(--tertiary) !default;
$btn-tertiary-hover: var(--tertiary-hover) !default;
$btn-tertiary-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-hover-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-border-color: var(--tertiary) !default;
$btn-tertiary-hover-border-color: var(--tertiary-hover) !default;
$btn-tertiary-focus-color: var(--tertiary-light) !default;
///// Dark
$btn-tertiary-dark-bg: var(--tertiary-dark) !default;
$btn-tertiary-dark-hover: var(--tertiary-ultra-dark) !default;
$btn-tertiary-dark-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-dark-hover-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-dark-border-color: var(--tertiary-dark) !default;
$btn-tertiary-dark-hover-border-color: var(--tertiary-ultra-dark) !default;
$btn-tertiary-dark-focus-color: var(--tertiary-semi-dark) !default;
///// Light
$btn-tertiary-light-bg: var(--tertiary-ultra-light) !default;
$btn-tertiary-light-hover: var(--tertiary-light) !default;
$btn-tertiary-light-text: var(--tertiary) !default;
$btn-tertiary-light-hover-text: var(--tertiary-ultra-dark) !default;
$btn-tertiary-light-border-color: var(--tertiary-ultra-light) !default;
$btn-tertiary-light-hover-border-color: var(--tertiary-light) !default;
$btn-tertiary-light-focus-color: var(--tertiary-light) !default;
///// Outline
$btn-tertiary-outline-background: transparent !default;
$btn-tertiary-outline-background-hover: var(--tertiary-hover) !default;
$tertiary-outline-btn-text: var(--tertiary) !default;
$tertiary-outline-hover-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-outline-border-color: var(--tertiary) !default;
$btn-tertiary-outline-border-hover: var(--tertiary-hover) !default;
$btn-tertiary-outline-focus-color: var(--tertiary-semi-light) !default;
///// Outline Dark
$btn-tertiary-outline-dark-background: transparent !default;
$btn-tertiary-outline-dark-background-hover: var(--tertiary-dark) !default;
$tertiary-outline-dark-btn-text: var(--tertiary-dark) !default;
$tertiary-outline-dark-hover-text: var(--tertiary-ultra-light) !default;
$btn-tertiary-outline-dark-border-color: var(--tertiary-dark) !default;
$btn-tertiary-outline-dark-border-hover: var(--tertiary-dark) !default;
$btn-tertiary-outline-dark-focus-color: var(--tertiary-semi-dark) !default;
///// Outline Light
$btn-tertiary-outline-light-background: transparent !default;
$btn-tertiary-outline-light-background-hover: var(--tertiary-ultra-light) !default;
$tertiary-outline-light-btn-text: var(--tertiary-ultra-light) !default;
$tertiary-outline-light-hover-text: var(--tertiary-dark) !default;
$btn-tertiary-outline-light-border-color: var(--tertiary-ultra-light) !default;
$btn-tertiary-outline-light-border-hover: var(--tertiary-ultra-light) !default;
$btn-tertiary-outline-light-focus-color: var(--tertiary-light) !default;

$btn-tertiary: (); // Initialize Map
@if $option-tertiary-btn == on {

    $btn-tertiary: (
        "tertiary": (
            btn-background: $btn-tertiary-bg,
            btn-background-hover: $btn-tertiary-hover,
            btn-text-color: $btn-tertiary-text,
            btn-text-color-hover: $btn-tertiary-hover-text,
            btn-border-color: $btn-tertiary-border-color,
            btn-border-color-hover: $btn-tertiary-hover-border-color,
            focus-color: $btn-tertiary-focus-color,
        ),
        "tertiary-dark": (
            btn-background: $btn-tertiary-dark-bg,
            btn-background-hover: $btn-tertiary-dark-hover,
            btn-text-color: $btn-tertiary-dark-text,
            btn-text-color-hover: $btn-tertiary-dark-hover-text,
            btn-border-color: $btn-tertiary-dark-border-color,
            btn-border-color-hover: $btn-tertiary-dark-hover-border-color,
            focus-color: $btn-tertiary-dark-focus-color,
        ),
        "tertiary-light": (
            btn-background: $btn-tertiary-light-bg,
            btn-background-hover: $btn-tertiary-light-hover,
            btn-text-color: $btn-tertiary-light-text,
            btn-text-color-hover: $btn-tertiary-light-hover-text,
            btn-border-color: $btn-tertiary-light-border-color,
            btn-border-color-hover: $btn-tertiary-light-hover-border-color,
            focus-color: $btn-tertiary-light-focus-color,
        ),
        "tertiary.btn--outline": (
            btn-background: $btn-tertiary-outline-background,
            btn-background-hover: $btn-tertiary-outline-background-hover,
            btn-text-color: $tertiary-outline-btn-text,
            btn-text-color-hover: $tertiary-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-tertiary-outline-border-color,
            btn-border-color-hover: $btn-tertiary-outline-border-hover,
            focus-color: $btn-tertiary-focus-color,
        ),
        "tertiary-dark.btn--outline": (
            btn-background: $btn-tertiary-outline-dark-background,
            btn-background-hover: $btn-tertiary-outline-dark-background-hover,
            btn-text-color: $tertiary-outline-dark-btn-text,
            btn-text-color-hover: $tertiary-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-tertiary-outline-dark-border-color,
            btn-border-color-hover: $btn-tertiary-outline-dark-border-hover,
            focus-color: $btn-tertiary-focus-color,
        ),
        "tertiary-light.btn--outline": (
            btn-background: $btn-tertiary-outline-light-background,
            btn-background-hover: $btn-tertiary-outline-light-background-hover,
            btn-text-color: $tertiary-outline-light-btn-text,
            btn-text-color-hover: $tertiary-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-tertiary-outline-light-border-color,
            btn-border-color-hover: $btn-tertiary-outline-light-border-hover,
            focus-color: $btn-tertiary-focus-color,
        ),
    );

    @if $option-tertiary-btn-outline == off {
        $btn-tertiary: map-remove($btn-tertiary, "tertiary.btn--outline");
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-dark.btn--outline");
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-light.btn--outline");
    }
    @if $option-tertiary-btn-shades == off {
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-dark");
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-light");
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-dark.btn--outline");
        $btn-tertiary: map-remove($btn-tertiary, "tertiary-light.btn--outline-light");
    }

}
// Accent Defaults
$option-accent-btn: on !default;
$option-accent-btn-shades: on !default;
$option-accent-btn-outline: on !default;

///// Main
$btn-accent-bg: var(--accent) !default;
$btn-accent-hover: var(--accent-hover) !default;
$btn-accent-text: var(--accent-ultra-light) !default;
$btn-accent-hover-text: var(--accent-ultra-light) !default;
$btn-accent-border-color: var(--accent) !default;
$btn-accent-hover-border-color: var(--accent-hover) !default;
$btn-accent-focus-color: var(--accent-light) !default;
///// Dark
$btn-accent-dark-bg: var(--accent-dark) !default;
$btn-accent-dark-hover: var(--accent-ultra-dark) !default;
$btn-accent-dark-text: var(--accent-ultra-light) !default;
$btn-accent-dark-hover-text: var(--accent-ultra-light) !default;
$btn-accent-dark-border-color: var(--accent-dark) !default;
$btn-accent-dark-hover-border-color: var(--accent-ultra-dark) !default;
$btn-accent-dark-focus-color: var(--accent-semi-dark) !default;
///// Light
$btn-accent-light-bg: var(--accent-ultra-light) !default;
$btn-accent-light-hover: var(--accent-light) !default;
$btn-accent-light-text: var(--accent) !default;
$btn-accent-light-hover-text: var(--accent-ultra-dark) !default;
$btn-accent-light-border-color: var(--accent-ultra-light) !default;
$btn-accent-light-hover-border-color: var(--accent-light) !default;
$btn-accent-light-focus-color: var(--accent-light) !default;
///// Outline
$btn-accent-outline-background: transparent !default;
$btn-accent-outline-background-hover: var(--accent-hover) !default;
$accent-outline-btn-text: var(--accent) !default;
$accent-outline-hover-text: var(--accent-ultra-light) !default;
$btn-accent-outline-border-color: var(--accent) !default;
$btn-accent-outline-border-hover: var(--accent-hover) !default;
$btn-accent-outline-focus-color: var(--accent-semi-light) !default;
///// Outline Dark
$btn-accent-outline-dark-background: transparent !default;
$btn-accent-outline-dark-background-hover: var(--accent-dark) !default;
$accent-outline-dark-btn-text: var(--accent-dark) !default;
$accent-outline-dark-hover-text: var(--accent-ultra-light) !default;
$btn-accent-outline-dark-border-color: var(--accent-dark) !default;
$btn-accent-outline-dark-border-hover: var(--accent-dark) !default;
$btn-accent-outline-dark-focus-color: var(--accent-semi-dark) !default;
///// Outline Light
$btn-accent-outline-light-background: transparent !default;
$btn-accent-outline-light-background-hover: var(--accent-ultra-light) !default;
$accent-outline-light-btn-text: var(--accent-ultra-light) !default;
$accent-outline-light-hover-text: var(--accent-dark) !default;
$btn-accent-outline-light-border-color: var(--accent-ultra-light) !default;
$btn-accent-outline-light-border-hover: var(--accent-ultra-light) !default;
$btn-accent-outline-light-focus-color: var(--accent-light) !default;

$btn-accent: (); // Initialize Map
@if $option-accent-btn == on {

    $btn-accent: (
        "accent": (
            btn-background: $btn-accent-bg,
            btn-background-hover: $btn-accent-hover,
            btn-text-color: $btn-accent-text,
            btn-text-color-hover: $btn-accent-hover-text,
            btn-border-color: $btn-accent-border-color,
            btn-border-color-hover: $btn-accent-hover-border-color,
            focus-color: $btn-accent-focus-color,
        ),
        "accent-dark": (
            btn-background: $btn-accent-dark-bg,
            btn-background-hover: $btn-accent-dark-hover,
            btn-text-color: $btn-accent-dark-text,
            btn-text-color-hover: $btn-accent-dark-hover-text,
            btn-border-color: $btn-accent-dark-border-color,
            btn-border-color-hover: $btn-accent-dark-hover-border-color,
            focus-color: $btn-accent-dark-focus-color,
        ),
        "accent-light": (
            btn-background: $btn-accent-light-bg,
            btn-background-hover: $btn-accent-light-hover,
            btn-text-color: $btn-accent-light-text,
            btn-text-color-hover: $btn-accent-light-hover-text,
            btn-border-color: $btn-accent-light-border-color,
            btn-border-color-hover: $btn-accent-light-hover-border-color,
            focus-color: $btn-accent-light-focus-color,
        ),
        "accent.btn--outline": (
            btn-background: $btn-accent-outline-background,
            btn-background-hover: $btn-accent-outline-background-hover,
            btn-text-color: $accent-outline-btn-text,
            btn-text-color-hover: $accent-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-accent-outline-border-color,
            btn-border-color-hover: $btn-accent-outline-border-hover,
            focus-color: $btn-accent-focus-color,
        ),
        "accent-dark.btn--outline": (
            btn-background: $btn-accent-outline-dark-background,
            btn-background-hover: $btn-accent-outline-dark-background-hover,
            btn-text-color: $accent-outline-dark-btn-text,
            btn-text-color-hover: $accent-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-accent-outline-dark-border-color,
            btn-border-color-hover: $btn-accent-outline-dark-border-hover,
            focus-color: $btn-accent-focus-color,
        ),
        "accent-light.btn--outline": (
            btn-background: $btn-accent-outline-light-background,
            btn-background-hover: $btn-accent-outline-light-background-hover,
            btn-text-color: $accent-outline-light-btn-text,
            btn-text-color-hover: $accent-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-accent-outline-light-border-color,
            btn-border-color-hover: $btn-accent-outline-light-border-hover,
            focus-color: $btn-accent-focus-color,
        ),
    );

    @if $option-accent-btn-outline == off {
        $btn-accent: map-remove($btn-accent, "accent.btn--outline");
        $btn-accent: map-remove($btn-accent, "accent-dark.btn--outline");
        $btn-accent: map-remove($btn-accent, "accent-light.btn--outline");
    }
    @if $option-accent-btn-shades == off {
        $btn-accent: map-remove($btn-accent, "accent-dark");
        $btn-accent: map-remove($btn-accent, "accent-light");
        $btn-accent: map-remove($btn-accent, "accent-dark.btn--outline");
        $btn-accent: map-remove($btn-accent, "accent-light.btn--outline-light");
    }

}
// Base Defaults
$option-base-btn: on !default;
$option-base-btn-shades: on !default;
$option-base-btn-outline: on !default;

///// Main
$btn-base-bg: var(--base) !default;
$btn-base-hover: var(--base-hover) !default;
$btn-base-text: var(--base-ultra-light) !default;
$btn-base-hover-text: var(--base-ultra-light) !default;
$btn-base-border-color: var(--base) !default;
$btn-base-hover-border-color: var(--base-hover) !default;
$btn-base-focus-color: var(--base-light) !default;
///// Dark
$btn-base-dark-bg: var(--base-dark) !default;
$btn-base-dark-hover: var(--base-ultra-dark) !default;
$btn-base-dark-text: var(--base-ultra-light) !default;
$btn-base-dark-hover-text: var(--base-ultra-light) !default;
$btn-base-dark-border-color: var(--base-dark) !default;
$btn-base-dark-hover-border-color: var(--base-ultra-dark) !default;
$btn-base-dark-focus-color: var(--base-semi-dark) !default;
///// Light
$btn-base-light-bg: var(--base-ultra-light) !default;
$btn-base-light-hover: var(--base-light) !default;
$btn-base-light-text: var(--base) !default;
$btn-base-light-hover-text: var(--base-ultra-dark) !default;
$btn-base-light-border-color: var(--base-ultra-light) !default;
$btn-base-light-hover-border-color: var(--base-light) !default;
$btn-base-light-focus-color: var(--base-light) !default;
///// Outline
$btn-base-outline-background: transparent !default;
$btn-base-outline-background-hover: var(--base-hover) !default;
$base-outline-btn-text: var(--base) !default;
$base-outline-hover-text: var(--base-ultra-light) !default;
$btn-base-outline-border-color: var(--base) !default;
$btn-base-outline-border-hover: var(--base-hover) !default;
$btn-base-outline-focus-color: var(--base-semi-light) !default;
///// Outline Dark
$btn-base-outline-dark-background: transparent !default;
$btn-base-outline-dark-background-hover: var(--base-dark) !default;
$base-outline-dark-btn-text: var(--base-dark) !default;
$base-outline-dark-hover-text: var(--base-ultra-light) !default;
$btn-base-outline-dark-border-color: var(--base-dark) !default;
$btn-base-outline-dark-border-hover: var(--base-dark) !default;
$btn-base-outline-dark-focus-color: var(--base-semi-dark) !default;
///// Outline Light
$btn-base-outline-light-background: transparent !default;
$btn-base-outline-light-background-hover: var(--base-ultra-light) !default;
$base-outline-light-btn-text: var(--base-ultra-light) !default;
$base-outline-light-hover-text: var(--base-dark) !default;
$btn-base-outline-light-border-color: var(--base-ultra-light) !default;
$btn-base-outline-light-border-hover: var(--base-ultra-light) !default;
$btn-base-outline-light-focus-color: var(--base-light) !default;

$btn-base: (); // Initialize Map
@if $option-base-btn == on {

    $btn-base: (
        "base": (
            btn-background: $btn-base-bg,
            btn-background-hover: $btn-base-hover,
            btn-text-color: $btn-base-text,
            btn-text-color-hover: $btn-base-hover-text,
            btn-border-color: $btn-base-border-color,
            btn-border-color-hover: $btn-base-hover-border-color,
            focus-color: $btn-base-focus-color,
        ),
        "base-dark": (
            btn-background: $btn-base-dark-bg,
            btn-background-hover: $btn-base-dark-hover,
            btn-text-color: $btn-base-dark-text,
            btn-text-color-hover: $btn-base-dark-hover-text,
            btn-border-color: $btn-base-dark-border-color,
            btn-border-color-hover: $btn-base-dark-hover-border-color,
            focus-color: $btn-base-dark-focus-color,
        ),
        "base-light": (
            btn-background: $btn-base-light-bg,
            btn-background-hover: $btn-base-light-hover,
            btn-text-color: $btn-base-light-text,
            btn-text-color-hover: $btn-base-light-hover-text,
            btn-border-color: $btn-base-light-border-color,
            btn-border-color-hover: $btn-base-light-hover-border-color,
            focus-color: $btn-base-light-focus-color,
        ),
        "base.btn--outline": (
            btn-background: $btn-base-outline-background,
            btn-background-hover: $btn-base-outline-background-hover,
            btn-text-color: $base-outline-btn-text,
            btn-text-color-hover: $base-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-base-outline-border-color,
            btn-border-color-hover: $btn-base-outline-border-hover,
            focus-color: $btn-base-focus-color,
        ),
        "base-dark.btn--outline": (
            btn-background: $btn-base-outline-dark-background,
            btn-background-hover: $btn-base-outline-dark-background-hover,
            btn-text-color: $base-outline-dark-btn-text,
            btn-text-color-hover: $base-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-base-outline-dark-border-color,
            btn-border-color-hover: $btn-base-outline-dark-border-hover,
            focus-color: $btn-base-focus-color,
        ),
        "base-light.btn--outline": (
            btn-background: $btn-base-outline-light-background,
            btn-background-hover: $btn-base-outline-light-background-hover,
            btn-text-color: $base-outline-light-btn-text,
            btn-text-color-hover: $base-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-base-outline-light-border-color,
            btn-border-color-hover: $btn-base-outline-light-border-hover,
            focus-color: $btn-base-focus-color,
        ),
    );

    @if $option-base-btn-outline == off {
        $btn-base: map-remove($btn-base, "base.btn--outline");
        $btn-base: map-remove($btn-base, "base-dark.btn--outline");
        $btn-base: map-remove($btn-base, "base-light.btn--outline");
    }
    @if $option-base-btn-shades == off {
        $btn-base: map-remove($btn-base, "base-dark");
        $btn-base: map-remove($btn-base, "base-light");
        $btn-base: map-remove($btn-base, "base-dark.btn--outline");
        $btn-base: map-remove($btn-base, "base-light.btn--outline-light");
    }

}
// Neutral Defaults
$option-neutral-btn: on !default;
$option-neutral-btn-shades: on !default;
$option-neutral-btn-outline: on !default;

///// Main
$btn-neutral-bg: var(--neutral) !default;
$btn-neutral-hover: var(--neutral-hover) !default;
$btn-neutral-text: var(--neutral-ultra-light) !default;
$btn-neutral-hover-text: var(--neutral-ultra-light) !default;
$btn-neutral-border-color: var(--neutral) !default;
$btn-neutral-hover-border-color: var(--neutral-hover) !default;
$btn-neutral-focus-color: var(--neutral-light) !default;
///// Dark
$btn-neutral-dark-bg: var(--neutral-dark) !default;
$btn-neutral-dark-hover: var(--neutral-ultra-dark) !default;
$btn-neutral-dark-text: var(--neutral-ultra-light) !default;
$btn-neutral-dark-hover-text: var(--neutral-ultra-light) !default;
$btn-neutral-dark-border-color: var(--neutral-dark) !default;
$btn-neutral-dark-hover-border-color: var(--neutral-ultra-dark) !default;
$btn-neutral-dark-focus-color: var(--neutral-semi-dark) !default;
///// Light
$btn-neutral-light-bg: var(--neutral-ultra-light) !default;
$btn-neutral-light-hover: var(--neutral-light) !default;
$btn-neutral-light-text: var(--neutral) !default;
$btn-neutral-light-hover-text: var(--neutral-ultra-dark) !default;
$btn-neutral-light-border-color: var(--neutral-ultra-light) !default;
$btn-neutral-light-hover-border-color: var(--neutral-light) !default;
$btn-neutral-light-focus-color: var(--neutral-light) !default;
///// Outline
$btn-neutral-outline-background: transparent !default;
$btn-neutral-outline-background-hover: var(--neutral-hover) !default;
$neutral-outline-btn-text: var(--neutral) !default;
$neutral-outline-hover-text: var(--neutral-ultra-light) !default;
$btn-neutral-outline-border-color: var(--neutral) !default;
$btn-neutral-outline-border-hover: var(--neutral-hover) !default;
$btn-neutral-outline-focus-color: var(--neutral-semi-light) !default;
///// Outline Dark
$btn-neutral-outline-dark-background: transparent !default;
$btn-neutral-outline-dark-background-hover: var(--neutral-dark) !default;
$neutral-outline-dark-btn-text: var(--neutral-dark) !default;
$neutral-outline-dark-hover-text: var(--neutral-ultra-light) !default;
$btn-neutral-outline-dark-border-color: var(--neutral-dark) !default;
$btn-neutral-outline-dark-border-hover: var(--neutral-dark) !default;
$btn-neutral-outline-dark-focus-color: var(--neutral-semi-dark) !default;
///// Outline Light
$btn-neutral-outline-light-background: transparent !default;
$btn-neutral-outline-light-background-hover: var(--neutral-ultra-light) !default;
$neutral-outline-light-btn-text: var(--neutral-ultra-light) !default;
$neutral-outline-light-hover-text: var(--neutral-dark) !default;
$btn-neutral-outline-light-border-color: var(--neutral-ultra-light) !default;
$btn-neutral-outline-light-border-hover: var(--neutral-ultra-light) !default;
$btn-neutral-outline-light-focus-color: var(--neutral-light) !default;

$btn-neutral: (); // Initialize Map
@if $option-neutral-btn == on {

    $btn-neutral: (
        "neutral": (
            btn-background: $btn-neutral-bg,
            btn-background-hover: $btn-neutral-hover,
            btn-text-color: $btn-neutral-text,
            btn-text-color-hover: $btn-neutral-hover-text,
            btn-border-color: $btn-neutral-border-color,
            btn-border-color-hover: $btn-neutral-hover-border-color,
            focus-color: $btn-neutral-focus-color,
        ),
        "neutral-dark": (
            btn-background: $btn-neutral-dark-bg,
            btn-background-hover: $btn-neutral-dark-hover,
            btn-text-color: $btn-neutral-dark-text,
            btn-text-color-hover: $btn-neutral-dark-hover-text,
            btn-border-color: $btn-neutral-dark-border-color,
            btn-border-color-hover: $btn-neutral-dark-hover-border-color,
            focus-color: $btn-neutral-dark-focus-color,
        ),
        "neutral-light": (
            btn-background: $btn-neutral-light-bg,
            btn-background-hover: $btn-neutral-light-hover,
            btn-text-color: $btn-neutral-light-text,
            btn-text-color-hover: $btn-neutral-light-hover-text,
            btn-border-color: $btn-neutral-light-border-color,
            btn-border-color-hover: $btn-neutral-light-hover-border-color,
            focus-color: $btn-neutral-light-focus-color,
        ),
        "neutral.btn--outline": (
            btn-background: $btn-neutral-outline-background,
            btn-background-hover: $btn-neutral-outline-background-hover,
            btn-text-color: $neutral-outline-btn-text,
            btn-text-color-hover: $neutral-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-neutral-outline-border-color,
            btn-border-color-hover: $btn-neutral-outline-border-hover,
            focus-color: $btn-neutral-outline-focus-color,
        ),
        "neutral-dark.btn--outline": (
            btn-background: $btn-neutral-outline-dark-background,
            btn-background-hover: $btn-neutral-outline-dark-background-hover,
            btn-text-color: $neutral-outline-dark-btn-text,
            btn-text-color-hover: $neutral-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-neutral-outline-dark-border-color,
            btn-border-color-hover: $btn-neutral-outline-dark-border-hover,
            focus-color: $btn-neutral-outline-dark-focus-color,
        ),
        "neutral-light.btn--outline": (
            btn-background: $btn-neutral-outline-light-background,
            btn-background-hover: $btn-neutral-outline-light-background-hover,
            btn-text-color: $neutral-outline-light-btn-text,
            btn-text-color-hover: $neutral-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-neutral-outline-light-border-color,
            btn-border-color-hover: $btn-neutral-outline-light-border-hover,
            focus-color: $btn-neutral-outline-light-focus-color,
        ),
    );

    @if $option-neutral-btn-outline == off {
        $btn-neutral: map-remove($btn-neutral, "neutral.btn--outline");
        $btn-neutral: map-remove($btn-neutral, "neutral-dark.btn--outline");
        $btn-neutral: map-remove($btn-neutral, "neutral-light.btn--outline");
    }
    @if $option-neutral-btn-shades == off {
        $btn-neutral: map-remove($btn-neutral, "neutral-dark");
        $btn-neutral: map-remove($btn-neutral, "neutral-light");
        $btn-neutral: map-remove($btn-neutral, "neutral-dark.btn--outline");
        $btn-neutral: map-remove($btn-neutral, "neutral-light.btn--outline-light");
    }

}

// Warning Defaults
$option-warning-btn: on !default;
$option-warning-btn-shades: on !default;
$option-warning-btn-outline: on !default;

///// Main
$btn-warning-bg: var(--warning) !default;
$btn-warning-hover: var(--warning-hover) !default;
$btn-warning-text: var(--warning-ultra-light) !default;
$btn-warning-hover-text: var(--warning-ultra-light) !default;
$btn-warning-border-color: var(--warning) !default;
$btn-warning-hover-border-color: var(--warning-hover) !default;
$btn-warning-focus-color: var(--warning-light) !default;
///// Dark
$btn-warning-dark-bg: var(--warning-dark) !default;
$btn-warning-dark-hover: var(--warning-ultra-dark) !default;
$btn-warning-dark-text: var(--warning-ultra-light) !default;
$btn-warning-dark-hover-text: var(--warning-ultra-light) !default;
$btn-warning-dark-border-color: var(--warning-dark) !default;
$btn-warning-dark-hover-border-color: var(--warning-ultra-dark) !default;
$btn-warning-dark-focus-color: var(--warning-semi-dark) !default;
///// Light
$btn-warning-light-bg: var(--warning-ultra-light) !default;
$btn-warning-light-hover: var(--warning-light) !default;
$btn-warning-light-text: var(--warning) !default;
$btn-warning-light-hover-text: var(--warning-ultra-dark) !default;
$btn-warning-light-border-color: var(--warning-ultra-light) !default;
$btn-warning-light-hover-border-color: var(--warning-light) !default;
$btn-warning-light-focus-color: var(--warning-light) !default;
///// Outline
$btn-warning-outline-background: transparent !default;
$btn-warning-outline-background-hover: var(--warning-hover) !default;
$warning-outline-btn-text: var(--warning) !default;
$warning-outline-hover-text: var(--warning-ultra-light) !default;
$btn-warning-outline-border-color: var(--warning) !default;
$btn-warning-outline-border-hover: var(--warning-hover) !default;
$btn-warning-outline-focus-color: var(--warning-semi-light) !default;
///// Outline Dark
$btn-warning-outline-dark-background: transparent !default;
$btn-warning-outline-dark-background-hover: var(--warning-dark) !default;
$warning-outline-dark-btn-text: var(--warning-dark) !default;
$warning-outline-dark-hover-text: var(--warning-ultra-light) !default;
$btn-warning-outline-dark-border-color: var(--warning-dark) !default;
$btn-warning-outline-dark-border-hover: var(--warning-dark) !default;
$btn-warning-outline-dark-focus-color: var(--warning-semi-dark) !default;
///// Outline Light
$btn-warning-outline-light-background: transparent !default;
$btn-warning-outline-light-background-hover: var(--warning-ultra-light) !default;
$warning-outline-light-btn-text: var(--warning-ultra-light) !default;
$warning-outline-light-hover-text: var(--warning-dark) !default;
$btn-warning-outline-light-border-color: var(--warning-ultra-light) !default;
$btn-warning-outline-light-border-hover: var(--warning-ultra-light) !default;
$btn-warning-outline-light-focus-color: var(--warning-light) !default;

$btn-warning: (); // Initialize Map
@if $option-warning-btn == on {

    $btn-warning: (
        "warning": (
            btn-background: $btn-warning-bg,
            btn-background-hover: $btn-warning-hover,
            btn-text-color: $btn-warning-text,
            btn-text-color-hover: $btn-warning-hover-text,
            btn-border-color: $btn-warning-border-color,
            btn-border-color-hover: $btn-warning-hover-border-color,
            focus-color: $btn-warning-focus-color,
        ),
        "warning-dark": (
            btn-background: $btn-warning-dark-bg,
            btn-background-hover: $btn-warning-dark-hover,
            btn-text-color: $btn-warning-dark-text,
            btn-text-color-hover: $btn-warning-dark-hover-text,
            btn-border-color: $btn-warning-dark-border-color,
            btn-border-color-hover: $btn-warning-dark-hover-border-color,
            focus-color: $btn-warning-dark-focus-color,
        ),
        "warning-light": (
            btn-background: $btn-warning-light-bg,
            btn-background-hover: $btn-warning-light-hover,
            btn-text-color: $btn-warning-light-text,
            btn-text-color-hover: $btn-warning-light-hover-text,
            btn-border-color: $btn-warning-light-border-color,
            btn-border-color-hover: $btn-warning-light-hover-border-color,
            focus-color: $btn-warning-light-focus-color,
        ),
        "warning.btn--outline": (
            btn-background: $btn-warning-outline-background,
            btn-background-hover: $btn-warning-outline-background-hover,
            btn-text-color: $warning-outline-btn-text,
            btn-text-color-hover: $warning-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-warning-outline-border-color,
            btn-border-color-hover: $btn-warning-outline-border-hover,
            focus-color: $btn-warning-focus-color,
        ),
        "warning-dark.btn--outline": (
            btn-background: $btn-warning-outline-dark-background,
            btn-background-hover: $btn-warning-outline-dark-background-hover,
            btn-text-color: $warning-outline-dark-btn-text,
            btn-text-color-hover: $warning-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-warning-outline-dark-border-color,
            btn-border-color-hover: $btn-warning-outline-dark-border-hover,
            focus-color: $btn-warning-focus-color,
        ),
        "warning-light.btn--outline": (
            btn-background: $btn-warning-outline-light-background,
            btn-background-hover: $btn-warning-outline-light-background-hover,
            btn-text-color: $warning-outline-light-btn-text,
            btn-text-color-hover: $warning-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-warning-outline-light-border-color,
            btn-border-color-hover: $btn-warning-outline-light-border-hover,
            focus-color: $btn-warning-focus-color,
        ),
    );

    @if $option-warning-btn-outline == off {
        $btn-warning: map-remove($btn-warning, "warning.btn--outline");
        $btn-warning: map-remove($btn-warning, "warning-dark.btn--outline");
        $btn-warning: map-remove($btn-warning, "warning-light.btn--outline");
    }
    @if $option-warning-btn-shades == off {
        $btn-warning: map-remove($btn-warning, "warning-dark");
        $btn-warning: map-remove($btn-warning, "warning-light");
        $btn-warning: map-remove($btn-warning, "warning-dark.btn--outline");
        $btn-warning: map-remove($btn-warning, "warning-light.btn--outline-light");
    }

}
// Info Defaults
$option-info-btn: on !default;
$option-info-btn-shades: on !default;
$option-info-btn-outline: on !default;

///// Main
$btn-info-bg: var(--info) !default;
$btn-info-hover: var(--info-hover) !default;
$btn-info-text: var(--info-ultra-light) !default;
$btn-info-hover-text: var(--info-ultra-light) !default;
$btn-info-border-color: var(--info) !default;
$btn-info-hover-border-color: var(--info-hover) !default;
$btn-info-focus-color: var(--info-light) !default;
///// Dark
$btn-info-dark-bg: var(--info-dark) !default;
$btn-info-dark-hover: var(--info-ultra-dark) !default;
$btn-info-dark-text: var(--info-ultra-light) !default;
$btn-info-dark-hover-text: var(--info-ultra-light) !default;
$btn-info-dark-border-color: var(--info-dark) !default;
$btn-info-dark-hover-border-color: var(--info-ultra-dark) !default;
$btn-info-dark-focus-color: var(--info-semi-dark) !default;
///// Light
$btn-info-light-bg: var(--info-ultra-light) !default;
$btn-info-light-hover: var(--info-light) !default;
$btn-info-light-text: var(--info) !default;
$btn-info-light-hover-text: var(--info-ultra-dark) !default;
$btn-info-light-border-color: var(--info-ultra-light) !default;
$btn-info-light-hover-border-color: var(--info-light) !default;
$btn-info-light-focus-color: var(--info-light) !default;
///// Outline
$btn-info-outline-background: transparent !default;
$btn-info-outline-background-hover: var(--info-hover) !default;
$info-outline-btn-text: var(--info) !default;
$info-outline-hover-text: var(--info-ultra-light) !default;
$btn-info-outline-border-color: var(--info) !default;
$btn-info-outline-border-hover: var(--info-hover) !default;
$btn-info-outline-focus-color: var(--info-semi-light) !default;
///// Outline Dark
$btn-info-outline-dark-background: transparent !default;
$btn-info-outline-dark-background-hover: var(--info-dark) !default;
$info-outline-dark-btn-text: var(--info-dark) !default;
$info-outline-dark-hover-text: var(--info-ultra-light) !default;
$btn-info-outline-dark-border-color: var(--info-dark) !default;
$btn-info-outline-dark-border-hover: var(--info-dark) !default;
$btn-info-outline-dark-focus-color: var(--info-semi-dark) !default;
///// Outline Light
$btn-info-outline-light-background: transparent !default;
$btn-info-outline-light-background-hover: var(--info-ultra-light) !default;
$info-outline-light-btn-text: var(--info-ultra-light) !default;
$info-outline-light-hover-text: var(--info-dark) !default;
$btn-info-outline-light-border-color: var(--info-ultra-light) !default;
$btn-info-outline-light-border-hover: var(--info-ultra-light) !default;
$btn-info-outline-light-focus-color: var(--info-light) !default;

$btn-info: (); // Initialize Map
@if $option-info-btn == on {

    $btn-info: (
        "info": (
            btn-background: $btn-info-bg,
            btn-background-hover: $btn-info-hover,
            btn-text-color: $btn-info-text,
            btn-text-color-hover: $btn-info-hover-text,
            btn-border-color: $btn-info-border-color,
            btn-border-color-hover: $btn-info-hover-border-color,
            focus-color: $btn-info-focus-color,
        ),
        "info-dark": (
            btn-background: $btn-info-dark-bg,
            btn-background-hover: $btn-info-dark-hover,
            btn-text-color: $btn-info-dark-text,
            btn-text-color-hover: $btn-info-dark-hover-text,
            btn-border-color: $btn-info-dark-border-color,
            btn-border-color-hover: $btn-info-dark-hover-border-color,
            focus-color: $btn-info-dark-focus-color,
        ),
        "info-light": (
            btn-background: $btn-info-light-bg,
            btn-background-hover: $btn-info-light-hover,
            btn-text-color: $btn-info-light-text,
            btn-text-color-hover: $btn-info-light-hover-text,
            btn-border-color: $btn-info-light-border-color,
            btn-border-color-hover: $btn-info-light-hover-border-color,
            focus-color: $btn-info-light-focus-color,
        ),
        "info.btn--outline": (
            btn-background: $btn-info-outline-background,
            btn-background-hover: $btn-info-outline-background-hover,
            btn-text-color: $info-outline-btn-text,
            btn-text-color-hover: $info-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-info-outline-border-color,
            btn-border-color-hover: $btn-info-outline-border-hover,
            focus-color: $btn-info-focus-color,
        ),
        "info-dark.btn--outline": (
            btn-background: $btn-info-outline-dark-background,
            btn-background-hover: $btn-info-outline-dark-background-hover,
            btn-text-color: $info-outline-dark-btn-text,
            btn-text-color-hover: $info-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-info-outline-dark-border-color,
            btn-border-color-hover: $btn-info-outline-dark-border-hover,
            focus-color: $btn-info-focus-color,
        ),
        "info-light.btn--outline": (
            btn-background: $btn-info-outline-light-background,
            btn-background-hover: $btn-info-outline-light-background-hover,
            btn-text-color: $info-outline-light-btn-text,
            btn-text-color-hover: $info-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-info-outline-light-border-color,
            btn-border-color-hover: $btn-info-outline-light-border-hover,
            focus-color: $btn-info-focus-color,
        ),
    );

    @if $option-info-btn-outline == off {
        $btn-info: map-remove($btn-info, "info.btn--outline");
        $btn-info: map-remove($btn-info, "info-dark.btn--outline");
        $btn-info: map-remove($btn-info, "info-light.btn--outline");
    }
    @if $option-info-btn-shades == off {
        $btn-info: map-remove($btn-info, "info-dark");
        $btn-info: map-remove($btn-info, "info-light");
        $btn-info: map-remove($btn-info, "info-dark.btn--outline");
        $btn-info: map-remove($btn-info, "info-light.btn--outline-light");
    }

}
// Danger Defaults
$option-danger-btn: on !default;
$option-danger-btn-shades: on !default;
$option-danger-btn-outline: on !default;

///// Main
$btn-danger-bg: var(--danger) !default;
$btn-danger-hover: var(--danger-hover) !default;
$btn-danger-text: var(--danger-ultra-light) !default;
$btn-danger-hover-text: var(--danger-ultra-light) !default;
$btn-danger-border-color: var(--danger) !default;
$btn-danger-hover-border-color: var(--danger-hover) !default;
$btn-danger-focus-color: var(--danger-light) !default;
///// Dark
$btn-danger-dark-bg: var(--danger-dark) !default;
$btn-danger-dark-hover: var(--danger-ultra-dark) !default;
$btn-danger-dark-text: var(--danger-ultra-light) !default;
$btn-danger-dark-hover-text: var(--danger-ultra-light) !default;
$btn-danger-dark-border-color: var(--danger-dark) !default;
$btn-danger-dark-hover-border-color: var(--danger-ultra-dark) !default;
$btn-danger-dark-focus-color: var(--danger-semi-dark) !default;
///// Light
$btn-danger-light-bg: var(--danger-ultra-light) !default;
$btn-danger-light-hover: var(--danger-light) !default;
$btn-danger-light-text: var(--danger) !default;
$btn-danger-light-hover-text: var(--danger-ultra-dark) !default;
$btn-danger-light-border-color: var(--danger-ultra-light) !default;
$btn-danger-light-hover-border-color: var(--danger-light) !default;
$btn-danger-light-focus-color: var(--danger-light) !default;
///// Outline
$btn-danger-outline-background: transparent !default;
$btn-danger-outline-background-hover: var(--danger-hover) !default;
$danger-outline-btn-text: var(--danger) !default;
$danger-outline-hover-text: var(--danger-ultra-light) !default;
$btn-danger-outline-border-color: var(--danger) !default;
$btn-danger-outline-border-hover: var(--danger-hover) !default;
$btn-danger-outline-focus-color: var(--danger-semi-light) !default;
///// Outline Dark
$btn-danger-outline-dark-background: transparent !default;
$btn-danger-outline-dark-background-hover: var(--danger-dark) !default;
$danger-outline-dark-btn-text: var(--danger-dark) !default;
$danger-outline-dark-hover-text: var(--danger-ultra-light) !default;
$btn-danger-outline-dark-border-color: var(--danger-dark) !default;
$btn-danger-outline-dark-border-hover: var(--danger-dark) !default;
$btn-danger-outline-dark-focus-color: var(--danger-semi-dark) !default;
///// Outline Light
$btn-danger-outline-light-background: transparent !default;
$btn-danger-outline-light-background-hover: var(--danger-ultra-light) !default;
$danger-outline-light-btn-text: var(--danger-ultra-light) !default;
$danger-outline-light-hover-text: var(--danger-dark) !default;
$btn-danger-outline-light-border-color: var(--danger-ultra-light) !default;
$btn-danger-outline-light-border-hover: var(--danger-ultra-light) !default;
$btn-danger-outline-light-focus-color: var(--danger-light) !default;

$btn-danger: (); // Initialize Map
@if $option-danger-btn == on {

    $btn-danger: (
        "danger": (
            btn-background: $btn-danger-bg,
            btn-background-hover: $btn-danger-hover,
            btn-text-color: $btn-danger-text,
            btn-text-color-hover: $btn-danger-hover-text,
            btn-border-color: $btn-danger-border-color,
            btn-border-color-hover: $btn-danger-hover-border-color,
            focus-color: $btn-danger-focus-color,
        ),
        "danger-dark": (
            btn-background: $btn-danger-dark-bg,
            btn-background-hover: $btn-danger-dark-hover,
            btn-text-color: $btn-danger-dark-text,
            btn-text-color-hover: $btn-danger-dark-hover-text,
            btn-border-color: $btn-danger-dark-border-color,
            btn-border-color-hover: $btn-danger-dark-hover-border-color,
            focus-color: $btn-danger-dark-focus-color,
        ),
        "danger-light": (
            btn-background: $btn-danger-light-bg,
            btn-background-hover: $btn-danger-light-hover,
            btn-text-color: $btn-danger-light-text,
            btn-text-color-hover: $btn-danger-light-hover-text,
            btn-border-color: $btn-danger-light-border-color,
            btn-border-color-hover: $btn-danger-light-hover-border-color,
            focus-color: $btn-danger-light-focus-color,
        ),
        "danger.btn--outline": (
            btn-background: $btn-danger-outline-background,
            btn-background-hover: $btn-danger-outline-background-hover,
            btn-text-color: $danger-outline-btn-text,
            btn-text-color-hover: $danger-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-danger-outline-border-color,
            btn-border-color-hover: $btn-danger-outline-border-hover,
            focus-color: $btn-danger-focus-color,
        ),
        "danger-dark.btn--outline": (
            btn-background: $btn-danger-outline-dark-background,
            btn-background-hover: $btn-danger-outline-dark-background-hover,
            btn-text-color: $danger-outline-dark-btn-text,
            btn-text-color-hover: $danger-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-danger-outline-dark-border-color,
            btn-border-color-hover: $btn-danger-outline-dark-border-hover,
            focus-color: $btn-danger-focus-color,
        ),
        "danger-light.btn--outline": (
            btn-background: $btn-danger-outline-light-background,
            btn-background-hover: $btn-danger-outline-light-background-hover,
            btn-text-color: $danger-outline-light-btn-text,
            btn-text-color-hover: $danger-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-danger-outline-light-border-color,
            btn-border-color-hover: $btn-danger-outline-light-border-hover,
            focus-color: $btn-danger-focus-color,
        ),
    );

    @if $option-danger-btn-outline == off {
        $btn-danger: map-remove($btn-danger, "danger.btn--outline");
        $btn-danger: map-remove($btn-danger, "danger-dark.btn--outline");
        $btn-danger: map-remove($btn-danger, "danger-light.btn--outline");
    }
    @if $option-danger-btn-shades == off {
        $btn-danger: map-remove($btn-danger, "danger-dark");
        $btn-danger: map-remove($btn-danger, "danger-light");
        $btn-danger: map-remove($btn-danger, "danger-dark.btn--outline");
        $btn-danger: map-remove($btn-danger, "danger-light.btn--outline-light");
    }

}
// Success Defaults
$option-success-btn: on !default;
$option-success-btn-shades: on !default;
$option-success-btn-outline: on !default;

///// Main
$btn-success-bg: var(--success) !default;
$btn-success-hover: var(--success-hover) !default;
$btn-success-text: var(--success-ultra-light) !default;
$btn-success-hover-text: var(--success-ultra-light) !default;
$btn-success-border-color: var(--success) !default;
$btn-success-hover-border-color: var(--success-hover) !default;
$btn-success-focus-color: var(--success-light) !default;
///// Dark
$btn-success-dark-bg: var(--success-dark) !default;
$btn-success-dark-hover: var(--success-ultra-dark) !default;
$btn-success-dark-text: var(--success-ultra-light) !default;
$btn-success-dark-hover-text: var(--success-ultra-light) !default;
$btn-success-dark-border-color: var(--success-dark) !default;
$btn-success-dark-hover-border-color: var(--success-ultra-dark) !default;
$btn-success-dark-focus-color: var(--success-semi-dark) !default;
///// Light
$btn-success-light-bg: var(--success-ultra-light) !default;
$btn-success-light-hover: var(--success-light) !default;
$btn-success-light-text: var(--success) !default;
$btn-success-light-hover-text: var(--success-ultra-dark) !default;
$btn-success-light-border-color: var(--success-ultra-light) !default;
$btn-success-light-hover-border-color: var(--success-light) !default;
$btn-success-light-focus-color: var(--success-light) !default;
///// Outline
$btn-success-outline-background: transparent !default;
$btn-success-outline-background-hover: var(--success-hover) !default;
$success-outline-btn-text: var(--success) !default;
$success-outline-hover-text: var(--success-ultra-light) !default;
$btn-success-outline-border-color: var(--success) !default;
$btn-success-outline-border-hover: var(--success-hover) !default;
$btn-success-outline-focus-color: var(--success-semi-light) !default;
///// Outline Dark
$btn-success-outline-dark-background: transparent !default;
$btn-success-outline-dark-background-hover: var(--success-dark) !default;
$success-outline-dark-btn-text: var(--success-dark) !default;
$success-outline-dark-hover-text: var(--success-ultra-light) !default;
$btn-success-outline-dark-border-color: var(--success-dark) !default;
$btn-success-outline-dark-border-hover: var(--success-dark) !default;
$btn-success-outline-dark-focus-color: var(--success-semi-dark) !default;
///// Outline Light
$btn-success-outline-light-background: transparent !default;
$btn-success-outline-light-background-hover: var(--success-ultra-light) !default;
$success-outline-light-btn-text: var(--success-ultra-light) !default;
$success-outline-light-hover-text: var(--success-dark) !default;
$btn-success-outline-light-border-color: var(--success-ultra-light) !default;
$btn-success-outline-light-border-hover: var(--success-ultra-light) !default;
$btn-success-outline-light-focus-color: var(--success-light) !default;

$btn-success: (); // Initialize Map
@if $option-success-btn == on {

    $btn-success: (
        "success": (
            btn-background: $btn-success-bg,
            btn-background-hover: $btn-success-hover,
            btn-text-color: $btn-success-text,
            btn-text-color-hover: $btn-success-hover-text,
            btn-border-color: $btn-success-border-color,
            btn-border-color-hover: $btn-success-hover-border-color,
            focus-color: $btn-success-focus-color,
        ),
        "success-dark": (
            btn-background: $btn-success-dark-bg,
            btn-background-hover: $btn-success-dark-hover,
            btn-text-color: $btn-success-dark-text,
            btn-text-color-hover: $btn-success-dark-hover-text,
            btn-border-color: $btn-success-dark-border-color,
            btn-border-color-hover: $btn-success-dark-hover-border-color,
            focus-color: $btn-success-dark-focus-color,
        ),
        "success-light": (
            btn-background: $btn-success-light-bg,
            btn-background-hover: $btn-success-light-hover,
            btn-text-color: $btn-success-light-text,
            btn-text-color-hover: $btn-success-light-hover-text,
            btn-border-color: $btn-success-light-border-color,
            btn-border-color-hover: $btn-success-light-hover-border-color,
            focus-color: $btn-success-light-focus-color,
        ),
        "success.btn--outline": (
            btn-background: $btn-success-outline-background,
            btn-background-hover: $btn-success-outline-background-hover,
            btn-text-color: $success-outline-btn-text,
            btn-text-color-hover: $success-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-success-outline-border-color,
            btn-border-color-hover: $btn-success-outline-border-hover,
            focus-color: $btn-success-focus-color,
        ),
        "success-dark.btn--outline": (
            btn-background: $btn-success-outline-dark-background,
            btn-background-hover: $btn-success-outline-dark-background-hover,
            btn-text-color: $success-outline-dark-btn-text,
            btn-text-color-hover: $success-outline-dark-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-success-outline-dark-border-color,
            btn-border-color-hover: $btn-success-outline-dark-border-hover,
            focus-color: $btn-success-focus-color,
        ),
        "success-light.btn--outline": (
            btn-background: $btn-success-outline-light-background,
            btn-background-hover: $btn-success-outline-light-background-hover,
            btn-text-color: $success-outline-light-btn-text,
            btn-text-color-hover: $success-outline-light-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-success-outline-light-border-color,
            btn-border-color-hover: $btn-success-outline-light-border-hover,
            focus-color: $btn-success-focus-color,
        ),
    );

    @if $option-success-btn-outline == off {
        $btn-success: map-remove($btn-success, "success.btn--outline");
        $btn-success: map-remove($btn-success, "success-dark.btn--outline");
        $btn-success: map-remove($btn-success, "success-light.btn--outline");
    }
    @if $option-success-btn-shades == off {
        $btn-success: map-remove($btn-success, "success-dark");
        $btn-success: map-remove($btn-success, "success-light");
        $btn-success: map-remove($btn-success, "success-dark.btn--outline");
        $btn-success: map-remove($btn-success, "success-light.btn--outline-light");
    }

}

// Deprecated in 3.0
// Action Defaults
$option-action-btn: on !default;
$option-action-btn-outline: on !default;

///// Main
$btn-action-bg: var(--action) !default;
$btn-action-hover: var(--action-hover) !default;
$btn-action-text: var(--action-ultra-light) !default;
$btn-action-hover-text: var(--action-ultra-light) !default;
$btn-action-border-color: var(--action) !default;
$btn-action-hover-border-color: var(--action-hover) !default;
$btn-action-focus-color: var(--action-light) !default;
///// Outline
$btn-action-outline-background: transparent !default;
$btn-action-outline-background-hover: var(--action-hover) !default;
$action-outline-btn-text: var(--action) !default;
$action-outline-hover-text: var(--action-ultra-light) !default;
$btn-action-outline-border-color: var(--action) !default;
$btn-action-outline-border-hover: var(--action-hover) !default;
$btn-action-outline-focus-color: var(--action-semi-light) !default;

$btn-action: (); // Initialize Map
@if $option-action-btn == on {

    $btn-action: (
        "action": (
            btn-background: $btn-action-bg,
            btn-background-hover: $btn-action-hover,
            btn-text-color: $btn-action-text,
            btn-text-color-hover: $btn-action-hover-text,
            btn-border-color: $btn-action-border-color,
            btn-border-color-hover: $btn-action-hover-border-color,
            focus-color: $btn-action-focus-color,
        ),
        "action.btn--outline": (
            btn-background: $btn-action-outline-background,
            btn-background-hover: $btn-action-outline-background-hover,
            btn-text-color: $action-outline-btn-text,
            btn-text-color-hover: $action-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-action-outline-border-color,
            btn-border-color-hover: $btn-action-outline-border-hover,
            focus-color: $btn-action-focus-color,
        ),
    );

    @if $option-action-btn-outline == off {
        $btn-action: map-remove($btn-action, "action.btn--outline");
    }

}
// Shade Defaults
$option-shade-btn: on !default;
$option-shade-btn-outline: on !default;

///// Main
$btn-shade-bg: var(--shade) !default;
$btn-shade-hover: var(--shade-hover) !default;
$btn-shade-text: var(--shade-ultra-light) !default;
$btn-shade-hover-text: var(--shade-ultra-light) !default;
$btn-shade-border-color: var(--shade) !default;
$btn-shade-hover-border-color: var(--shade-hover) !default;
$btn-shade-focus-color: var(--shade-light) !default;
///// Outline
$btn-shade-outline-background: transparent !default;
$btn-shade-outline-background-hover: var(--shade-hover) !default;
$shade-outline-btn-text: var(--shade) !default;
$shade-outline-hover-text: var(--shade-ultra-light) !default;
$btn-shade-outline-border-color: var(--shade) !default;
$btn-shade-outline-border-hover: var(--shade-hover) !default;
$btn-shade-outline-focus-color: var(--shade-semi-light) !default;

$btn-shade: (); // Initialize Map
@if $option-shade-btn == on {

    $btn-shade: (
        "shade": (
            btn-background: $btn-shade-bg,
            btn-background-hover: $btn-shade-hover,
            btn-text-color: $btn-shade-text,
            btn-text-color-hover: $btn-shade-hover-text,
            btn-border-color: $btn-shade-border-color,
            btn-border-color-hover: $btn-shade-hover-border-color,
            focus-color: $btn-shade-focus-color,
        ),
        "shade.btn--outline": (
            btn-background: $btn-shade-outline-background,
            btn-background-hover: $btn-shade-outline-background-hover,
            btn-text-color: $shade-outline-btn-text,
            btn-text-color-hover: $shade-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-shade-outline-border-color,
            btn-border-color-hover: $btn-shade-outline-border-hover,
            focus-color: $btn-shade-focus-color,
        ),
    );

    @if $option-shade-btn-outline == off {
        $btn-shade: map-remove($btn-shade, "shade.btn--outline");
    }

}
// Black Defaults
$option-black-btn: on !default;
$option-black-btn-outline: on !default;

///// Main
$btn-black-bg: var(--black) !default;
$btn-black-hover: var(--black-hover) !default;
$btn-black-text: var(--black-ultra-light) !default;
$btn-black-hover-text: var(--black-ultra-light) !default;
$btn-black-border-color: var(--black) !default;
$btn-black-hover-border-color: var(--black-hover) !default;
$btn-black-focus-color: var(--black-light) !default;
///// Outline
$btn-black-outline-background: transparent !default;
$btn-black-outline-background-hover: var(--black-hover) !default;
$black-outline-btn-text: var(--black) !default;
$black-outline-hover-text: var(--black-ultra-light) !default;
$btn-black-outline-border-color: var(--black) !default;
$btn-black-outline-border-hover: var(--black-hover) !default;
$btn-black-outline-focus-color: var(--black-semi-light) !default;

$btn-black: (); // Initialize Map
@if $option-black-btn == on {

    $btn-black: (
        "black": (
            btn-background: $btn-black-bg,
            btn-background-hover: $btn-black-hover,
            btn-text-color: $btn-black-text,
            btn-text-color-hover: $btn-black-hover-text,
            btn-border-color: $btn-black-border-color,
            btn-border-color-hover: $btn-black-hover-border-color,
            focus-color: $btn-black-focus-color,
        ),
        "black.btn--outline": (
            btn-background: $btn-black-outline-background,
            btn-background-hover: $btn-black-outline-background-hover,
            btn-text-color: $black-outline-btn-text,
            btn-text-color-hover: $black-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-black-outline-border-color,
            btn-border-color-hover: $btn-black-outline-border-hover,
            focus-color: $btn-black-focus-color,
        ),
    );

    @if $option-black-btn-outline == off {
        $btn-black: map-remove($btn-black, "black.btn--outline");
    }

}
// White Defaults
$option-white-btn: on !default;
$option-white-btn-outline: on !default;

///// Main
$btn-white-bg: var(--white) !default;
$btn-white-hover: var(--white-hover) !default;
$btn-white-text: var(--white-ultra-light) !default;
$btn-white-hover-text: var(--white-ultra-light) !default;
$btn-white-border-color: var(--white) !default;
$btn-white-hover-border-color: var(--white-hover) !default;
$btn-white-focus-color: var(--white-light) !default;
///// Outline
$btn-white-outline-background: transparent !default;
$btn-white-outline-background-hover: var(--white-hover) !default;
$white-outline-btn-text: var(--white) !default;
$white-outline-hover-text: var(--white-ultra-light) !default;
$btn-white-outline-border-color: var(--white) !default;
$btn-white-outline-border-hover: var(--white-hover) !default;
$btn-white-outline-focus-color: var(--white-semi-light) !default;

$btn-white: (); // Initialize Map
@if $option-white-btn == on {

    $btn-white: (
        "white": (
            btn-background: $btn-white-bg,
            btn-background-hover: $btn-white-hover,
            btn-text-color: $btn-white-text,
            btn-text-color-hover: $btn-white-hover-text,
            btn-border-color: $btn-white-border-color,
            btn-border-color-hover: $btn-white-hover-border-color,
            focus-color: $btn-white-focus-color,
        ),
        "white.btn--outline": (
            btn-background: $btn-white-outline-background,
            btn-background-hover: $btn-white-outline-background-hover,
            btn-text-color: $white-outline-btn-text,
            btn-text-color-hover: $white-outline-hover-text,
            btn-border-width: $btn-outline-border-width,
            btn-border-color: $btn-white-outline-border-color,
            btn-border-color-hover: $btn-white-outline-border-hover,
            focus-color: $btn-white-focus-color,
        ),
    );

    @if $option-white-btn-outline == off {
        $btn-white: map-remove($btn-white, "white.btn--outline");
    }

}
// Options
$option-link-classes-use-decoration-color: off !default;
$link-use-global-transition-option: on !default;
$option-link-default-not: off !default;

// Link Style Defaults
$link-color: var(--primary) !default;
$link-color-hover: var(--primary-hover) !default;
$link-transition: var(--transition) !default;
$link-decoration: null !default;
$link-decoration-hover: null !default;
$link-default-not: null !default;
$link-underline-offset: auto !default;
$link-weight: 400 !default;
$link-decoration-color: null !default;
$link-decoration-color-hover: null !default;
$link-decoration-thickness: null !default;

$link-default-styles: (
	link-color: $link-color,
	link-color-hover: $link-color-hover,
	link-transition: $link-transition,
	link-decoration: $link-decoration,
	link-decoration-hover: $link-decoration-hover,
	link-underline-offset: $link-underline-offset,
	link-weight: $link-weight,
	link-decoration-color: $link-decoration-color,
	link-decoration-color-hover: $link-decoration-color-hover,
	link-decoration-thickness: $link-decoration-thickness,
);

// Option
$option-indicate-external-links: off !default;

// Styles
$external-link-indicator-not: null !default;
$external-link-indicator: "\2197\FE0E" !default;
$external-link-indicator-color: currentColor !default;
$external-link-indicator-color-hover: currentColor !default;
$external-link-indicator-weight: inherit !default;
$external-link-indicator-size: 1em !default;
$external-link-indicator-gap: 0.25em !default;
$external-link-indicator-line-height: 1 !default;
$external-link-indicator-offset: 0 !default;
$external-link-indicator-alignment: center !default;
$external-link-indicator-position: end !default;
$external-link-indicator-accessibility-text: "Link to external site" !default;

$option-style-buttons-automatically: off !default;

// Spacing
$contextual-content-gap: var(--space-m) !default;
$contextual-container-gap: var(--space-xl) !default;
$contextual-grid-gap: var(--space-m) !default;

// Text Colors
$text-light: var(--white) !default;
$text-light-muted: var(--neutral-light) !default;
$text-dark: var(--black) !default;
$text-dark-muted: var(--neutral-dark) !default;

// Background Colors
$bg-ultra-light: var(--white) !default;
$bg-light: var(--neutral-light) !default;
$bg-dark: var(--neutral-dark) !default;
$bg-ultra-dark: var(--black) !default;

// Import Relationships
// Text
$bg-ultra-light-text: var(--neutral-dark) !default;
$bg-light-text: var(--black) !default;
$bg-dark-text: var(--neutral-light) !default;
$bg-ultra-dark-text: var(--white) !default;

// Headings
$bg-ultra-light-heading: var(--neutral-dark) !default;
$bg-light-heading: var(--black) !default;
$bg-dark-heading: var(--neutral-light) !default;
$bg-ultra-dark-heading: var(--white) !default;

// Links
$bg-ultra-light-link: null !default;
$bg-ultra-light-link-hover: null !default;
$bg-light-link: null !default;
$bg-light-link-hover: null !default;
$bg-dark-link: null !default;
$bg-dark-link-hover: null !default;
$bg-ultra-dark-link: null !default;
$bg-ultra-dark-link-hover: null !default;

// Buttons
// Buttons use the btn() mixin via named styles.
$bg-ultra-light-button: primary !default;
$bg-light-button: primary !default;
$bg-dark-button: primary !default;
$bg-ultra-dark-button: primary !default;

// Focus
$bg-ultra-light-focus-color: null !default;
$bg-light-focus-color: null !default;
$bg-dark-focus-color: null !default;
$bg-ultra-dark-focus-color: null !default;

// Main Relationship Map
// Extracted Maps Are Below - Each New Key Should be Extracted Separately

$contextual-relationship-styles: (
	"text": (
		"ultra-light": $bg-ultra-light-text,
		"light": $bg-light-text,
		"dark": $bg-dark-text,
		"ultra-dark": $bg-ultra-dark-text
	),
	"heading": (
		"ultra-light": $bg-ultra-light-heading,
		"light": $bg-light-heading,
		"dark": $bg-dark-heading,
		"ultra-dark": $bg-ultra-dark-heading
	),
	"link": (
		"ultra-light": ($bg-ultra-light-link, $bg-ultra-light-link-hover),
		"light": ($bg-light-link, $bg-light-link-hover),
		"dark": ($bg-dark-link, $bg-dark-link-hover),
		"ultra-dark": ($bg-ultra-dark-link, $bg-ultra-dark-link-hover)
	),
	"focus": (
		"ultra-light": $bg-ultra-light-focus-color,
		"light": $bg-light-focus-color,
		"dark": $bg-dark-focus-color,
		"ultra-dark": $bg-ultra-dark-focus-color
	),
	"button": (
		"ultra-light": $bg-ultra-light-button,
		"light": $bg-light-button,
		"dark": $bg-dark-button,
		"ultra-dark": $bg-ultra-dark-button
	)
);

$contextual-text-relationships: map-get($contextual-relationship-styles, "text");
$contextual-heading-relationships: map-get($contextual-relationship-styles, "heading");
$contextual-link-relationships: map-get($contextual-relationship-styles, "link");
$contextual-button-relationships: map-get($contextual-relationship-styles, "button");
$contextual-focus-relationships: map-get($contextual-relationship-styles, "focus");


$option-smart-spacing: on !default;
// Programmatic
$smart-spacing-selectors: null !default;
// Text
$heading-spacing: 1.5em !default;
$h2-spacing: null !default;
$h3-spacing: null !default;
$h4-spacing: null !default;
$h5-spacing: null !default;
$h6-spacing: null !default;
$paragraph-spacing: 1em !default;
// Lists
$list-spacing: 1em !default;
$list-indent-spacing: null !default;
$list-item-spacing: .5em !default;
$nested-list-spacing: null !default;
$nested-list-indent-spacing: null !default;
$nested-list-item-spacing: null !default;
// Other
$flow-spacing: null !default;
$figure-spacing: 1em !default;
$figcaption-spacing: .5em !default;
$blockquote-spacing: 1em !default;
$code-spacing: null !default;
$pre-spacing: null !default;
$table-spacing: null !default;
$verse-spacing: null !default;

$option-grid: on !default;

$option-content-grid: on !default;
$option-content-grid-sections: off !default;

$content-feature: 50px !default;
$content-feature-max: 100px !default;

// Content Grid Exclusions
$content-grid-exclusions: ".content-grid--off" !default;

$option-auto-grid: on !default;
$auto-staggered-grid-breakpoint: l !default;
$auto-grid-aggressiveness: .7 !default; // How soon do items stack? Higher numbers stack sooner.
$auto-grid-flow-option: auto-fit !default; // auto-fill or auto-fit
$auto-grid-force-even-column-count: false !default;
$auto-grid-force-even-column-count-breakpoint: m !default;

$auto-grids: (
    "auto-2": 2,
    "auto-3": 3,
    "auto-4": 4,
    "auto-5": 5,
    "auto-6": 6,
    "auto-7": 7,
    "auto-8": 8,
    "auto-9": 9,
    "auto-10": 10,
    "auto-11": 11,
    "auto-12": 12,
);

$auto-staggered-grids: (
    "auto-1-2": minmax(0, 1fr) minmax(0, 2fr),
    "auto-1-3": minmax(0, 1fr) minmax(0, 3fr),
    "auto-2-1": minmax(0, 2fr) minmax(0, 1fr),
    "auto-2-3": minmax(0, 2fr) minmax(0, 3fr),
    "auto-3-1": minmax(0, 3fr) minmax(0, 1fr),
    "auto-3-2": minmax(0, 3fr) minmax(0, 2fr),
);

$option-bricks-grid-overlay: on !default;
$option-offset-page-content: off !default;
// Options
$option-rounded: on !default; // Main option for radius classes
$option-radius-sizes: on !default; // Option to generate extra radius sizes
$option-auto-radius: off !default;
$option-border-classes: on !default;

// Border Variables
$border-size: 1px !default;
$border-width: $border-size;
$border-style: solid !default;
$border-color-light: var(--white-trans-20) !default;
$border-color-dark: var(--black-trans-20) !default;

$border-main: var(--border-size) var(--border-style) var(--border-color-dark) !default;
$border-dark: var(--border-size) var(--border-style) var(--border-color-dark) !default;
$border-light: var(--border-size) var(--border-style) var(--border-color-light) !default;

// Radius Variables
$base-radius: 1rem !default;
$radius-scale: 1.5 !default;

// Internal Radius Variables for scale
$radius-s-math: $base-radius / $radius-scale;
$radius-xs-math: $radius-s-math / $radius-scale;
$radius-m-math: $base-radius;
$radius-l-math: $base-radius * $radius-scale;
$radius-xl-math: $radius-l-math * $radius-scale;
$radius-xxl-math: $radius-xl-math * $radius-scale;

// Auto Radius
$auto-radius-selectors: null !default;

$border-colors: (
	light: var(--border-color-light),
	dark: var(--border-color-dark)
);

$border-positions: (
	top: block-start,
	bottom: block-end,
	left: inline-start,
	right: inline-end,
	block: block,
	inline: inline
);

@mixin border($style: #{$border-main}, $position: null, $radius: var(--radius)) {
	$border: var(--border);
	@if $style == "light" {
		$border: var(--border-light);
	}
	@if $style == "dark" {
		$border: var(--border-dark);
	}
	$position: if($position != null, "-#{$position}", null);
	&:where(:not(:is(figure, picture))), &:where(figure, picture) > img {
		border#{$position}: #{$border};
		border-radius: if($radius == "no" or $radius == "none", null, var(--radius));
	}
	// @at-root #{selector-append(":where(figure, picture)", &)} > img {
	// 	border#{$position}: #{$border};
	// 	border-radius: if($radius == "no" or $radius == "none", null, var(--radius));
	// }
}

$option-divider-classes: on !default;

// Global
$divider-size: 1px !default;
$divider-style: solid !default;
$divider-inline-size: 100% !default;
$divider-gap: var(--content-gap) !default;

// Colors
$divider-color-light: var(--white-trans-20) !default;
$divider-color-dark: var(--black-trans-20) !default;

// Full
$divider-main: var(--divider-size) var(--divider-style) var(--divider-color-dark) !default;
$divider-dark: var(--divider-size) var(--divider-style) var(--divider-color-dark) !default;
$divider-light: var(--divider-size) var(--divider-style) var(--divider-color-light) !default;
$wp-page-block-width: 100% !default;
$wp-post-block-width: 767px !default;
$wp-post-types-list: ".services", ".test" !default;
$option-use-gutenberg-for-page-building: false !default;
$option-line-clamp-classes: on !default;

$line-clamps: (
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
);
@mixin line-clamp($line-count) {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line-count;
}
// Feature Option
$option-display: on !default;

// Map
$display-types: (
	inline: inline,
	block: block,
	contents: contents,
	inline-block: inline-block,
	inline-flex: inline-flex,
	list-item: list-item,
	none: none,
);

$option-acss-dashboard-icon-display: on !default;
@mixin f-label-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  background-color: var(#{$prefix}-label-background-color, #{if($theme == 'dark', $f-dark-label-background-color, $f-light-label-background-color)});
  color: var(#{$prefix}-label-text-color, #{if($theme == 'dark', $f-dark-label-text-color, $f-light-label-text-color)});
  font-size: var(--f-label-size, --text-m);
  font-weight: var(--f-label-font-weight, #{$f-label-font-weight});
  line-height: var(--f-label-line-height, #{$f-label-line-height});
  margin-block-end: var(--f-label-margin-bottom, #{$f-label-margin-bottom});
  text-transform: var(--f-label-text-transform, #{$f-label-text-transform});
  padding: var(--f-label-padding-y, #{$f-label-padding-y}) var(--f-label-padding-x, #{$f-label-padding-x});
}

@mixin f-input-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  background-color: var(#{$prefix}-input-background, #{if($theme == 'dark', $f-dark-input-background, $f-light-input-background)});
  border-top-width: var(--f-input-border-top-size, #{$f-input-border-top-size}rem);
  border-right-width: var(--f-input-border-right-size, #{$f-input-border-right-size}rem);
  border-bottom-width: var(--f-input-border-bottom-size, #{$f-input-border-bottom-size}rem);
  border-left-width: var(--f-input-border-left-size, #{$f-input-border-left-size}rem);
  border-style: var(--f-input-border-style, #{$f-input-border-style});
  border-color: var(#{$prefix}-input-border-color, #{if($theme == 'dark', $f-dark-input-border-color, $f-light-input-border-color)});
  border-radius: var(--f-input-border-radius, #{$f-input-border-radius});
  color: var(#{$prefix}-input-text-color, #{if($theme == 'dark', $f-dark-input-text-color, $f-light-input-text-color)});
  font-size: var(--f-input-size, --text-m);
  font-weight: var(--f-input-font-weight, #{$f-input-font-weight});
  line-height: var(--f-input-line-height, #{$f-input-line-height});
  padding: var(--f-input-padding-y, #{$f-input-padding-y}) var(--f-input-padding-x, #{$f-input-padding-x});
  -webkit-border-radius: var(--f-input-border-radius, #{$f-input-border-radius});
  -moz-border-radius: var(--f-input-border-radius, #{$f-input-border-radius});
  -ms-border-radius: var(--f-input-border-radius, #{$f-input-border-radius});
  -o-border-radius: var(--f-input-border-radius, #{$f-input-border-radius});
	transition: var(--transition-duration) var(--transition-timing) var(--transition-delay);

	&:hover:not([data-wsf-legal]), &:hover:enabled:not(:focus):not([data-wsf-legal]) {
    background-color: var(#{$prefix}-input-color-background-hover, #{if($theme == 'dark', $f-dark-input-color-background-hover, $f-light-input-color-background-hover)});
    border-color: var(#{$prefix}-input-border-color-hover, #{if($theme == 'dark', $f-dark-input-border-color-hover, $f-light-input-border-color-hover)});
    color: var(#{$prefix}-input-text-color-hover, #{if($theme == 'dark', $f-dark-input-text-color-hover, $f-light-input-text-color-hover)});
  }


}

@mixin f-btn-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  background-color: var(#{$prefix}-btn-background, #{if($theme == 'dark', $f-dark-btn-background, $f-light-btn-background)});
  color: var(#{$prefix}-btn-text-color, #{if($theme == 'dark', $f-dark-btn-text-color, $f-light-btn-text-color)});
  border-style: var(--f-btn-border-style, #{$f-btn-border-style});
  border-width: var(--f-btn-border-width, #{$f-btn-border-width});
  border-color: var(#{$prefix}-btn-border-color, #{if($theme == 'dark', $f-dark-btn-border-color, $f-light-btn-border-color)});
  border-radius: var(--f-btn-border-radius, #{$f-btn-border-radius});
  -webkit-border-radius: var(--f-btn-border-radius, #{$f-btn-border-radius});
  -moz-border-radius: var(--f-btn-border-radius, #{$f-btn-border-radius});
  -ms-border-radius: var(--f-btn-border-radius, #{$f-btn-border-radius});
  -o-border-radius: var(--f-btn-border-radius, #{$f-btn-border-radius});
  font-size: var(--f-btn-text-size, --text-m);
  font-weight: var(--f-btn-font-weight, #{$f-btn-font-weight});
  line-height: var(--f-btn-line-height, #{$f-btn-line-height});
  padding: var(--f-btn-padding-y, #{$f-btn-padding-y}) var(--f-btn-padding-x, #{$f-btn-padding-x});
  margin-block-start: var(--f-btn-margin-top, #{$f-btn-margin-top});
  text-align: center;
  -webkit-text-decoration: var(--f-btn-text-decoration, #{$f-btn-text-decoration});
  text-decoration: var(--f-btn-text-decoration, #{$f-btn-text-decoration});
  text-transform: var(--f-btn-text-transform, #{$f-btn-text-transform});
  transition: all var(--btn-transition-duration) ease;

  &:hover {
    background-color: var(#{$prefix}-btn-background-hover, #{if($theme == 'dark', $f-dark-btn-background-hover, $f-light-btn-background-hover)});
    color: var(#{$prefix}-btn-text-color-hover, #{if($theme == 'dark', $f-dark-btn-text-color-hover, $f-light-btn-text-color-hover)});
    border-color: var(#{$prefix}-btn-border-color-hover, #{if($theme == 'dark', $f-dark-btn-border-color-hover, $f-light-btn-border-color-hover)});
  }
}

@mixin f-option-label-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  background-color: var(#{$prefix}-option-background-color, #{if($theme == 'dark', $f-dark-option-background-color, $f-light-option-background-color)});
  display: inline-block;
  color: var(#{$prefix}-label-text-color, #{if($theme == 'dark', $f-dark-label-text-color, $f-light-label-text-color)});
  font-family: inherit;
  font-size: var(--f-option-label-size, --text-m);
  font-weight: var(--f-option-label-font-weight, #{$f-option-label-font-weight});
  line-height: var(--f-option-label-line-height, #{$f-option-label-line-height});
  margin: 0 0 10px;
  -webkit-padding-start: 1.75em;
  padding-inline-start: 1.75em;
}

@mixin f-focus-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  border-color: var(#{$prefix}-focus-color, #{if($theme == 'dark', $f-dark-focus-color, $f-light-focus-color)});
  box-shadow: 0 0 0 4px hsl(var(#{$prefix}-focus-hsl, #{if($theme == 'dark', $f-dark-focus-hsl, $f-light-focus-hsl)}) / var(#{$prefix}-focus-color-opacity, #{if($theme == 'dark', $f-dark-focus-color-opacity, $f-light-focus-color-opacity)}));
  outline: 0;

//@include default-focus-style(shadow);

}

@mixin f-select-arrow-style($theme: 'light') {
  $prefix: if($theme == 'dark', '--f-dark', '--f-light');

  background-image: linear-gradient(45deg, transparent 50%, var(#{$prefix}-select-arrow-color, #{if($theme == 'dark', $f-dark-select-arrow-color, $f-light-select-arrow-color)}) 0),
    linear-gradient(135deg, var(#{$prefix}-select-arrow-color, #{if($theme == 'dark', $f-dark-select-arrow-color, $f-light-select-arrow-color)}) 50%, transparent 0);
  background-position: calc(100% - 20px) calc(50% + 2px), calc(100% - 16px) calc(50% + 2px);
  background-repeat: no-repeat;
  background-size: 4px 4px, 4px 4px;
}

// Fluent Forms → Radio Buttons

@mixin radio-buttons-list {
  .ff-el-input--content {
    display: flex;
		flex-flow: row wrap;
    gap: var(--f-option-label-spacing, #{$f-option-label-spacing});

    & .ff-el-form-check {
      margin: 0;
    }
  }
}

@mixin radio-buttons-style($button-style, $button-active-style) {
  .ff-el-form-check:first-child label>span,
  .ff-el-form-check label>span,
  .ff-el-form-check:last-child label>span {
    @include btn(#{$button-style});
  }

  .ff-el-form-check.ff_item_selected:first-child label>span,
  .ff-el-form-check.ff_item_selected label>span {
    @include btn(#{$button-active-style});
    box-shadow: none !important;
  }
}

@mixin radio-buttons-mobile {
  @media only screen and (max-width: 768px) {
    .ff-el-input--content {
      display: flex;
      flex-direction: column;
    }

    .ff-el-form-check {
      width: 100%;
      margin: 0;

      & label > span {
        border: var(--btn-border-width) var(--btn-border-style) var(--btn-border-color) !important;
        border-radius: var(--btn-radius) !important;
      }
    }
  }
}

// This function checks for texture relationships
// and appends the texture selectors to a dynamic selector string.
// Use the function like this: $selector_string: '.bg--#{$color}' + get_texture_selectors($color);
// Change .bg--#{$color} to the desired base selector.
// Then output $selector_string as the final selector.
@function get_texture_selectors($color) {
  // Return empty string immediately if textures are disabled
  @if $option-textures != on {
    @return "";
  }

  $selector_string: "";
  $i: 1;

  @each $texture, $props in $textures {
    @if map-get($props, "relationship") == $color {
      $custom-name: map-get($props, "name");
      $selector_string: $selector_string +
        ", .texture-#{$i}, .texture-#{$custom-name}";

      // Check if overlay option is on for this item
      $overlay-option: map-get($props, "overlay-option");
      @if $overlay-option == "on" {
        // Add numbered overlay class only if overlay option is on
        $selector_string: $selector_string +
          ", .overlay-#{$i}, .overlay-#{$custom-name}";
      }

      $i: $i + 1;
    }
  }

  @return $selector_string;
}


$option-textures: on !default;

// Texture 1
$texture-1-name: "1" !default;
$texture-1-bg-color: var(--body-bg-color, var(--white)) !default;
$texture-1-asset: null !default;
$texture-1-asset-is-url: on !default;
$texture-1-overlay: null !default;
$texture-1-size: 200px !default;
$texture-1-position: 200px !default;
$texture-1-attachment: static !default;
$texture-1-repeat: repeat !default;
$texture-1-color-relationship: "none" !default;
$texture-1-overlay-option: "on" !default;
$texture-1-overlay-opacity: ".8" !default;
$texture-1-overlay-overlay: null !default;
$texture-1-blend-mode: normal !default;
$texture-1-animate-texture: off !default;
$texture-1-animate-overlay: off !default;
$texture-1-animation: off !default;

// Texture 2
$texture-2-name: "2" !default;
$texture-2-bg-color: var(--body-bg-color, var(--white)) !default;
$texture-2-asset: null !default;
$texture-2-asset-is-url: on !default;
$texture-2-overlay: null !default;
$texture-2-size: 200px !default;
$texture-2-position: 200px !default;
$texture-2-attachment: static !default;
$texture-2-repeat: repeat !default;
$texture-2-color-relationship: "none" !default;
$texture-2-overlay-option: "off" !default;
$texture-2-overlay-opacity: ".8" !default;
$texture-2-overlay-overlay: null !default;
$texture-2-blend-mode: normal !default;
$texture-2-animate-texture: off !default;
$texture-2-animate-overlay: off !default;
$texture-2-animation: off !default;

// Texture 3
$texture-3-name: "3" !default;
$texture-3-bg-color: var(--body-bg-color, var(--white)) !default;
$texture-3-asset: null !default;
$texture-3-asset-is-url: on !default;
$texture-3-overlay: null !default;
$texture-3-size: 200px !default;
$texture-3-position: 200px !default;
$texture-3-attachment: static !default;
$texture-3-repeat: repeat !default;
$texture-3-color-relationship: "none" !default;
$texture-3-overlay-option: "off" !default;
$texture-3-overlay-opacity: ".8" !default;
$texture-3-overlay-overlay: null !default;
$texture-3-blend-mode: normal !default;
$texture-3-animate-texture: off !default;
$texture-3-animate-overlay: off !default;
$texture-3-animation: off !default;

// Texture 4
$texture-4-name: "4" !default;
$texture-4-bg-color: var(--body-bg-color, var(--white)) !default;
$texture-4-asset: null !default;
$texture-4-asset-is-url: on !default;
$texture-4-overlay: null !default;
$texture-4-size: 200px !default;
$texture-4-position: 200px !default;
$texture-4-attachment: static !default;
$texture-4-repeat: repeat !default;
$texture-4-color-relationship: "none" !default;
$texture-4-overlay-option: "off" !default;
$texture-4-overlay-opacity: ".8" !default;
$texture-4-overlay-overlay: null !default;
$texture-4-blend-mode: normal !default;
$texture-4-animate-texture: off !default;
$texture-4-animate-overlay: off !default;
$texture-4-animation: off !default;

// Texture 5
$texture-5-name: "5" !default;
$texture-5-bg-color: var(--body-bg-color, var(--white)) !default;
$texture-5-asset: null !default;
$texture-5-asset-is-url: on !default;
$texture-5-overlay: null !default;
$texture-5-size: 200px !default;
$texture-5-position: 200px !default;
$texture-5-attachment: static !default;
$texture-5-repeat: repeat !default;
$texture-5-color-relationship: "none" !default;
$texture-5-overlay-option: "off" !default;
$texture-5-overlay-opacity: ".8" !default;
$texture-5-overlay-overlay: null !default;
$texture-5-blend-mode: normal !default;
$texture-5-animate-texture: off !default;
$texture-5-animate-overlay: off !default;
$texture-5-animation: off !default;


$textures: (
	"texture-1": (
		"name": $texture-1-name,
		"background-color": $texture-1-bg-color,
		"asset": $texture-1-asset,
		"asset-is-url": $texture-1-asset-is-url,
		"overlay": $texture-1-overlay,
		"size": $texture-1-size,
		"position": $texture-1-position,
		"attachment": $texture-1-attachment,
		"repeat": $texture-1-repeat,
		"relationship": $texture-1-color-relationship,
		"overlay-option": $texture-1-overlay-option,
		"overlay-opacity": $texture-1-overlay-opacity,
		"overlay-overlay": $texture-1-overlay-overlay,
		"blend-mode": $texture-1-blend-mode,
		"animate-texture": $texture-1-animate-texture,
		"animate-overlay": $texture-1-animate-overlay,
		"animation": $texture-1-animation,
	),
	"texture-2": (
		"name": $texture-2-name,
		"background-color": $texture-2-bg-color,
		"asset": $texture-2-asset,
		"asset-is-url": $texture-2-asset-is-url,
		"overlay": $texture-2-overlay,
		"size": $texture-2-size,
		"position": $texture-2-position,
		"attachment": $texture-2-attachment,
		"repeat": $texture-2-repeat,
		"relationship": $texture-2-color-relationship,
		"overlay-option": $texture-2-overlay-option,
		"overlay-opacity": $texture-2-overlay-opacity,
		"overlay-overlay": $texture-2-overlay-overlay,
		"blend-mode": $texture-2-blend-mode,
		"animate-texture": $texture-2-animate-texture,
		"animate-overlay": $texture-2-animate-overlay,
		"animation": $texture-2-animation,
	),
	"texture-3": (
		"name": $texture-3-name,
		"background-color": $texture-3-bg-color,
		"asset": $texture-3-asset,
		"asset-is-url": $texture-3-asset-is-url,
		"overlay": $texture-3-overlay,
		"size": $texture-3-size,
		"position": $texture-3-position,
		"attachment": $texture-3-attachment,
		"repeat": $texture-3-repeat,
		"relationship": $texture-3-color-relationship,
		"overlay-option": $texture-3-overlay-option,
		"overlay-opacity": $texture-3-overlay-opacity,
		"overlay-overlay": $texture-3-overlay-overlay,
		"blend-mode": $texture-3-blend-mode,
		"animate-texture": $texture-3-animate-texture,
		"animate-overlay": $texture-3-animate-overlay,
		"animation": $texture-3-animation,
	),
	"texture-4": (
		"name": $texture-4-name,
		"background-color": $texture-4-bg-color,
		"asset": $texture-4-asset,
		"asset-is-url": $texture-4-asset-is-url,
		"overlay": $texture-4-overlay,
		"size": $texture-4-size,
		"position": $texture-4-position,
		"attachment": $texture-4-attachment,
		"repeat": $texture-4-repeat,
		"relationship": $texture-4-color-relationship,
		"overlay-option": $texture-4-overlay-option,
		"overlay-opacity": $texture-4-overlay-opacity,
		"overlay-overlay": $texture-4-overlay-overlay,
		"blend-mode": $texture-4-blend-mode,
		"animate-texture": $texture-4-animate-texture,
		"animate-overlay": $texture-4-animate-overlay,
		"animation": $texture-4-animation,
	),
	"texture-5": (
		"name": $texture-5-name,
		"background-color": $texture-5-bg-color,
		"asset": $texture-5-asset,
		"asset-is-url": $texture-5-asset-is-url,
		"overlay": $texture-5-overlay,
		"size": $texture-5-size,
		"position": $texture-5-position,
		"attachment": $texture-5-attachment,
		"repeat": $texture-5-repeat,
		"relationship": $texture-5-color-relationship,
		"overlay-option": $texture-5-overlay-option,
		"overlay-opacity": $texture-5-overlay-opacity,
		"overlay-overlay": $texture-5-overlay-overlay,
		"blend-mode": $texture-5-blend-mode,
		"animate-texture": $texture-5-animate-texture,
		"animate-overlay": $texture-5-animate-overlay,
		"animation": $texture-5-animation,
	),
);

// Feature Option
$option-centering: on !default;

// Directions List/Extensions
$centering-extensions: all, y, x, left, right, top, bottom;

$option-flip: on !default;

$option-margin: on !default;

// Import Directions Map
$axes: (
	top: block-start,
	right: inline-end,
	bottom: block-end,
	left: inline-start,
	block: block,
	inline: inline,
);


$option-padding: on !default;
$option-deprecated-padding: off !default;

$option-opacities: on !default;

$opacities: (
	0: 0,
	5: 0.05,
	10: 0.1,
	15: 0.15,
	20: 0.2,
	25: 0.25,
	30: 0.3,
	35: 0.35,
	40: 0.4,
	45: 0.45,
	50: 0.5,
	55: 0.55,
	60: 0.6,
	65: 0.65,
	70: 0.7,
	75: 0.75,
	80: 0.8,
	85: 0.85,
	90: 0.9,
	95: 0.95,
	100: 1,
);

$option-position: on !default;

$positions: (
    relative: relative,
    sticky: sticky,
);

$sticky-top-s: 2.5% !default;
$sticky-top-m: 5% !default;
$sticky-top-l: 10% !default;
$option-sticky-offset: on !default;

$sticky: (
	s: $sticky-top-s,
	m: $sticky-top-m,
	l: $sticky-top-l,
);

$option-visibility: on !default;

$visibilities: (
	hidden: hidden,
	visible: visible,
);

@mixin icon($theme: #{$icon-default-theme}, $style: #{$icon-default-style}, $size: #{$icon-size}) {
	// Include styles
	@if $theme == "light" {
		@each $prop, $value in $icon-light-styles {
			--icon-#{$prop}: #{if($value != null, $value, null)};
		}
	}
	@if $theme == "dark" {
		@each $prop, $value in $icon-dark-styles {
			--icon-#{$prop}: #{if($value != null, $value, null)};
		}
	}
	// Element list is added via :is() to slightly increase specificity
	// This is to override builder defaults
	&:is(svg, i, a) {
		// Static
		display: flex;
		flex-shrink: 0;
		align-items: center;
		justify-content: center;
		box-sizing: content-box;
		// Colors
		color: var(--icon-color, var(--neutral-dark));
		// Dimension
		font-size: var(--icon-size);
		height: var(--icon-height, var(--icon-size, 24px));
		width: var(--icon-width, var(--icon-size, 24px));
		// Transition
		transition: var(--icon-transition,  var(--transition));
		// Boxed Styles
		@if $style == "box" or $style == "Box" or $style == "Boxed" or $style == "boxed" {
			@include icon-boxed-styles;
		}
		// Shadow Styles
		box-shadow: var(--icon-shadow, none);
	}

	// Support <i> elements that use pseudos
	&:is(i)::before {
		width: 100%;
		height: 100%;
		text-align: center;
		font-size: var(--icon-size);
	}

	// Override for Bricks default nonsense
	&.brxe-icon {
		font-size: var(--icon-size);
	}

	// Overrides for when icon is also a link
	svg {
		color: var(--icon-color);
	}

	// Support hover when the icon is inside a link
	&:is(a):hover,
	[data-icon-hover]:hover, [data-icon-hover]:hover [data-icon] {
		--icon-background: var(--icon-background-hover);
		--icon-color: var(--icon-color-hover);
		--icon-border-color: var(--icon-border-color-hover);
	}
}

@mixin icon-boxed-styles {
	padding: var(--icon-padding, 12px);
	border-width: var(--icon-border-width, 0);
	border-style: var(--icon-border-style, solid);
	border-radius: var(--icon-radius, var(--radius));
	background: var(--icon-background, var(--neutral-ultra-light));
	border-color: var(--icon-border-color, transparent);
}


$option-icons: on !default;
$icon-default-theme: dark !default;
$icon-data-attribute: data-icon !default;
$option-boxed-icons: on !default;
$icon-default-style: null !default;
@if $option-boxed-icons == on {
	$icon-default-style: "boxed";
}

// X-Small
$icon-size-xs: null !default;
$icon-padding-xs: null !default;

// Small
$icon-size-s: null !default;
$icon-padding-s: null !default;

// Medium
$icon-size-m: null !default;
$icon-padding-m: null !default;

// Large
$icon-size-l: null !default;
$icon-padding-l: null !default;

// XL
$icon-size-xl: null !default;
$icon-padding-xl: null !default;

// XXL
$icon-size-xxl: null !default;
$icon-padding-xxl: null !default;

// Default
$icon-size: $icon-size-m !default;
$icon-padding: .35em !default;
$icon-radius: var(--radius) !default;
$icon-color: null !default;
$icon-color-hover: null !default;
$icon-background: null !default;
$icon-background-hover: null !default;
$icon-border-color: if($icon-default-theme == dark, var(--icon-dark-border-color), var(--icon-light-border-color));
$icon-border-color-hover: if($icon-default-theme == dark, var(--icon-dark-border-color-hover), var(--icon-light-border-color-hover));
$icon-border-width: 0 !default;
$icon-border-style: 0 !default;
$icon-shadow: null !default;

// Light
$icon-light-color: var(--primary-ultra-light) !default;
$icon-light-color-hover: var(--primary-light) !default;
$icon-light-background: var(--primary-ultra-dark) !default;
$icon-light-background-hover: var(--primary-dark) !default;
/// Light Border Styles
$icon-light-border-color: var(--primary-ultra-dark) !default;
$icon-light-border-color-hover: var(--primary-ultra-dark) !default;
// Light Shadow Styles
$icon-light-shadow: null !default;

// Dark
$icon-dark-color: null !default;
$icon-dark-color-hover: null !default;
$icon-dark-background: null !default;
$icon-dark-background-hover: null !default;
// Dark Border Styles
$icon-dark-border-color: var(--primary-ultra-dark) !default;
$icon-dark-border-color-hover: var(--primary-ultra-dark) !default;
// Dark Shadow Styles
$icon-dark-shadow: null !default;

@if $icon-default-theme == "dark" {
	$icon-color: $icon-dark-color;
	$icon-color-hover: $icon-dark-color-hover;
	$icon-background: $icon-dark-background;
	$icon-background-hover: $icon-dark-background-hover;
	$icon-border-color: $icon-dark-border-color;
	$icon-border-color-hover: $icon-dark-border-color-hover;
	$icon-shadow: $icon-dark-shadow;
} @else {
	$icon-color: $icon-light-color;
	$icon-color-hover: $icon-light-color-hover;
	$icon-background: $icon-light-background;
	$icon-background-hover: $icon-light-background-hover;
	$icon-border-color: $icon-light-border-color;
	$icon-border-color-hover: $icon-light-border-color-hover;
	$icon-shadow: $icon-light-shadow;
}

// List Icon Styles
$option-boxed-list-icons: off !default;
$icon-list-icon-size: 1em !default;
$icon-list-gap: null !default;
$icon-block-offset: null !default;
$icon-inline-offset: null !default;

// Main icon styles map
// The tokens loop has "icon" as a fixed prefix, so don't prefix keys here with "icon."
$icon-styles: (
	"default": (
		"size": $icon-size,
		"padding": $icon-padding,
		"radius": $icon-radius,
		"background": $icon-background,
		"background-hover": $icon-background-hover,
		"border-color": $icon-border-color,
		"border-color-hover": $icon-border-color-hover,
		"border-width": $icon-border-width,
		"border-style": $icon-border-style,
		"color": $icon-color,
		"color-hover": $icon-color-hover,
		"shadow": $icon-shadow,
		"list-icon-size": $icon-list-icon-size,
		"list-gap": $icon-list-gap,
		"block-offset": $icon-block-offset,
		"inline-offset": $icon-inline-offset,
	),
	"light": (
		"color": $icon-light-color,
		"color-hover": $icon-light-color-hover,
		"background": $icon-light-background,
		"background-hover": $icon-light-background-hover,
		"border-color": $icon-light-border-color,
		"border-color-hover": $icon-light-border-color-hover,
		"shadow": $icon-light-shadow,
	),
	"dark": (
		"color": $icon-dark-color,
		"color-hover": $icon-dark-color-hover,
		"background": $icon-dark-background,
		"background-hover": $icon-dark-background-hover,
		"border-color": $icon-dark-border-color,
		"border-color-hover": $icon-dark-border-color-hover,
		"shadow": $icon-dark-shadow,
	),
);

// Icon sizes map
$icon-sizes-map: (
	xs: ($icon-size-xs, $icon-padding-xs),
	s: ($icon-size-s, $icon-padding-s),
	m: ($icon-size-m, $icon-padding-m),
	l: ($icon-size-l, $icon-padding-l),
	xl: ($icon-size-xl, $icon-padding-xl),
	xxl: ($icon-size-xxl, $icon-padding-xxl),
);

// Icon Sizes Options
$option-expand-icon-sizes: off !default;

@if $option-expand-icon-sizes == off {
	$icon-sizes-map: map-remove($icon-sizes-map, xs, xl, xxl);
}

// Breakout icon styles into separate maps
$icon-default-styles: map-get($icon-styles, default);
$icon-light-styles: map-get($icon-styles, light);
$icon-dark-styles: map-get($icon-styles, dark);

// Breakout icon sizes and paddings into separate maps
$icon-sizes: ();
@each $key, $value in $icon-sizes-map {
	$icon-sizes: map-merge($icon-sizes, ($key: nth($value, 1)));
}
$icon-paddings: ();
@each $key, $value in $icon-sizes-map {
  $icon-paddings: map-merge($icon-paddings, ($key: nth($value, 2)));
}

$option-container-queries: on !default;

$option-inverted-radius-framework: on !default;


$option-animation-text-reveal: off !default;

$animation-text-reveal-color-initial: var(--black-trans-20) !default;
$animation-text-reveal-color-animated: var(--text-dark, var(--black)) !default;
$animation-text-reveal-offset-start: 75px;
$animation-text-reveal-offset-end: 75vh;

$animation-text-reveal: (
	'text-reveal-color-initial': $animation-text-reveal-color-initial,
	'text-reveal-color-animated': $animation-text-reveal-color-animated,
	'text-reveal-offset-start': $animation-text-reveal-offset-start,
	'text-reveal-offset-end': $animation-text-reveal-offset-end,
);


$option-gradient-fades: on !default;
$gradient-fade-amount: 25% !default;

$gradient-fades: (
	"block": block,
	"inline": inline,
	"top": top,
	"right": right,
	"bottom": bottom,
	"left": left,
);


// Import Maps
$aspect-ratios: (
  "1-1": "1 / 1",
  "1-2": "1 / 2",
  "2-1": "2 / 1",
  "2-3": "2 / 3",
  "3-2": "3 / 2",
  "3-4": "3 / 4",
  "4-3": "4 / 3",
  "16-9": "16 / 9",
  "9-16": "9 / 16",
);

$aspect-ratio-fallbacks: (
  "1-1": 100%,
  "1-2": 50%,
  "2-1": 200%,
  "2-3": 150%,
  "3-2": 66%,
  "3-4": 133%,
  "4-3": 75%,
  "16-9": 56.25%,
  "9-16": 177%,
);

$breakouts: (
  s: 60,
  m: 70,
  l: 80,
  xl: 90,
);
// Make sure the vars are available in button-vars
$buttons: (); // Initialize map
$buttons: map-merge($buttons, $btn-primary);
$buttons: map-merge($buttons, $btn-secondary);
$buttons: map-merge($buttons, $btn-tertiary);
$buttons: map-merge($buttons, $btn-accent);
$buttons: map-merge($buttons, $btn-base);
$buttons: map-merge($buttons, $btn-neutral);
$buttons: map-merge($buttons, $btn-warning);
$buttons: map-merge($buttons, $btn-info);
$buttons: map-merge($buttons, $btn-danger);
$buttons: map-merge($buttons, $btn-success);
// Deprecated in 3.0
$buttons: map-merge($buttons, $btn-action);
$buttons: map-merge($buttons, $btn-shade);
$buttons: map-merge($buttons, $btn-black);
$buttons: map-merge($buttons, $btn-white);
$external-link-indicator-styles: (
    external-link-indicator-gap: $external-link-indicator-gap,
    external-link-indicator-size: $external-link-indicator-size,
    external-link-indicator-weight: $external-link-indicator-weight,
    external-link-indicator-offset: $external-link-indicator-offset,
    external-link-indicator-color: $external-link-indicator-color,
    external-link-indicator-color-hover: $external-link-indicator-color-hover,
    external-link-indicator-alignment: $external-link-indicator-alignment,
);
$col-rule: (
    dotted: dotted,
    dashed: dashed,
    solid: solid,
    double: double,
    groove: groove,
    ridge: ridge,
    inset: inset,
    outset: outset,
);

$col-count: (
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
);

$col-width: (
    s: $col-width-s,
    m: $col-width-m,
    l: $col-width-l,
);

$col-rule-width: (
    s: $col-rule-width-s,
    m: $col-rule-width-m,
    l: $col-rule-width-l,
);

$col-span: (
    all: all,
);


$contextuals: (
    "spacing": (
        "content-gap": $contextual-content-gap,
        "fr-content-gap": $contextual-content-gap,
        "container-gap": $contextual-container-gap,
        "fr-container-gap": $contextual-container-gap,
        "grid-gap": $contextual-grid-gap,
        "fr-grid-gap": $contextual-grid-gap,
    ),
    "background-colors": (
        "ultra-light": $bg-ultra-light,
        "light": $bg-light,
        "dark": $bg-dark,
        "ultra-dark": $bg-ultra-dark,
    ),
    "text-colors": (
        "light": $text-light,
        "light-muted": $text-light-muted,
        "dark": $text-dark,
        "dark-muted": $text-dark-muted,
    ),
);

$contextual-background-colors: map-get($contextuals, "background-colors");

$grids: (
  standard: (
    "1": repeat(1, minmax(0, 1fr)),
    "2": repeat(2, minmax(0, 1fr)),
    "3": repeat(3, minmax(0, 1fr)),
    "4": repeat(4, minmax(0, 1fr)),
    "5": repeat(5, minmax(0, 1fr)),
    "6": repeat(6, minmax(0, 1fr)),
    "7": repeat(7, minmax(0, 1fr)),
    "8": repeat(8, minmax(0, 1fr)),
    "9": repeat(9, minmax(0, 1fr)),
    "10": repeat(10, minmax(0, 1fr)),
    "11": repeat(11, minmax(0, 1fr)),
    "12": repeat(12, minmax(0, 1fr)),
  ),
  premade: (
    "1-2": minmax(0, 1fr) minmax(0, 2fr),
    "1-3": minmax(0, 1fr) minmax(0, 3fr),
    "2-1": minmax(0, 2fr) minmax(0, 1fr),
    "2-3": minmax(0, 2fr) minmax(0, 3fr),
    "3-1": minmax(0, 3fr) minmax(0, 1fr),
    "3-2": minmax(0, 3fr) minmax(0, 2fr),
  )
);

// USED FOR SPANS AND STARTS

$gridColumns: (
  1: 1,
  2: 2,
  3: 3,
  4: 4,
  5: 5,
  6: 6,
  7: 7,
  8: 8,
  9: 9,
  10: 10,
  11: 11,
  12: 12,
);

// Reverse Grids

$gridsReversed: (
  "1-2": minmax(0, 2fr) minmax(0, 1fr),
  "1-3": minmax(0, 3fr) minmax(0, 1fr),
  "2-1": minmax(0, 1fr) minmax(0, 2fr),
  "2-3": minmax(0, 3fr) minmax(0, 2fr),
  "3-1": minmax(0, 1fr) minmax(0, 3fr),
  "3-2": minmax(0, 2fr) minmax(0, 3fr),
);

$text-fallbacks: (
  calc: (
    text-xs: fluidCalc($text-xs-min, $text-xs-max),
    text-s: fluidCalc($text-s-min, $text-s-max),
    text-m: fluidCalc($text-m-min, $text-m-max),
    text-l: fluidCalc($text-l-min, $text-l-max),
    text-xl: fluidCalc($text-xl-min, $text-xl-max),
    text-xxl: fluidCalc($text-xxl-min, $text-xxl-max),
  ),
  calc-max: (
    text-xs: append-rem($text-xs-max),
    text-s: append-rem($text-s-max),
    text-m: append-rem($text-m-max),
    text-l: append-rem($text-l-max),
    text-xl: append-rem($text-xl-max),
    text-xxl: append-rem($text-xxl-max),
  ),
  clamp: (
    text-xs: fluidClamp($text-xs-min, $text-xs-max),
    text-s: fluidClamp($text-s-min, $text-s-max),
    text-m: fluidClamp($text-m-min, $text-m-max),
    text-l: fluidClamp($text-l-min, $text-l-max),
    text-xl: fluidClamp($text-xl-min, $text-xl-max),
    text-xxl: fluidClamp($text-xxl-min, $text-xxl-max),
  ),
);

$heading-fallbacks: (
  calc: (
    h6: fluidCalc($h6-min, $h6-max),
    h5: fluidCalc($h5-min, $h5-max),
    h4: fluidCalc($h4-min, $h4-max),
    h3: fluidCalc($h3-min, $h3-max),
    h2: fluidCalc($h2-min, $h2-max),
    h1: fluidCalc($h1-min, $h1-max),
  ),
  calc-max: (
    h6: append-rem($h6-max),
    h5: append-rem($h5-max),
    h4: append-rem($h4-max),
    h3: append-rem($h3-max),
    h2: append-rem($h2-max),
    h1: append-rem($h1-max),
  ),
  clamp: (
    h6: fluidClamp($h6-min, $h6-max),
    h5: fluidClamp($h5-min, $h5-max),
    h4: fluidClamp($h4-min, $h4-max),
    h3: fluidClamp($h3-min, $h3-max),
    h2: fluidClamp($h2-min, $h2-max),
    h1: fluidClamp($h1-min, $h1-max),
  ),
);

$spacing-fallbacks: (
  calc: (
    space-xs: fluidCalc($space-xs-min, $space-xs-max),
    space-s: fluidCalc($space-s-min, $space-s-max),
    space-m: fluidCalc($space-m-min, $space-m-max),
    space-l: fluidCalc($space-l-min, $space-l-max),
    space-xl: fluidCalc($space-xl-min, $space-xl-max),
    space-xxl: fluidCalc($space-xxl-min, $space-xxl-max),
    section-space-xs: fluidCalc($section-xs-min, $section-xs-max),
    section-space-s: fluidCalc($section-s-min, $section-s-max),
    section-space-m: fluidCalc($section-m-min, $section-m-max),
    section-space-l: fluidCalc($section-l-min, $section-l-max),
    section-space-xl: fluidCalc($section-xl-min, $section-xl-max),
    section-space-xxl: fluidCalc($section-xxl-min, $section-xxl-max),
    section-padding-x: fluidCalc($section-padding-x-min, $section-padding-x-max),
    gutter: fluidCalc($section-padding-x-min, $section-padding-x-max),
  ),
  calc-max: (
    space-xs: append-rem($space-xs-max),
    space-s: append-rem($space-s-max),
    space-m: append-rem($space-m-max),
    space-l: append-rem($space-l-max),
    space-xl: append-rem($space-xl-max),
    space-xxl: append-rem($space-xxl-max),
    section-space-xs: append-rem($section-xs-max),
    section-space-s: append-rem($section-s-max),
    section-space-m: append-rem($section-m-max),
    section-space-l: append-rem($section-l-max),
    section-space-xl: append-rem($section-xl-max),
    section-space-xxl: append-rem($section-xxl-max),
    section-padding-x: append-rem($section-padding-x-max),
    gutter: append-rem($section-padding-x-max),
  ),
  clamp: (
    space-xs: fluidClamp($space-xs-min, $space-xs-max),
    space-s: fluidClamp($space-s-min, $space-s-max),
    space-m: fluidClamp($space-m-min, $space-m-max),
    space-l: fluidClamp($space-l-min, $space-l-max),
    space-xl: fluidClamp($space-xl-min, $space-xl-max),
    space-xxl: fluidClamp($space-xxl-min, $space-xxl-max),
    section-space-xs: fluidClamp($section-xs-min, $section-xs-max),
    section-space-s: fluidClamp($section-s-min, $section-s-max),
    section-space-m: fluidClamp($section-m-min, $section-m-max),
    section-space-l: fluidClamp($section-l-min, $section-l-max),
    section-space-xl: fluidClamp($section-xl-min, $section-xl-max),
    section-space-xxl: fluidClamp($section-xxl-min, $section-xxl-max),
    section-padding-x: fluidClamp($section-padding-x-min, $section-padding-x-max),
    gutter: fluidClamp($section-padding-x-min, $section-padding-x-max),
  ),
);


$flexDirections: (
  col: column,
  row: row,
  col-reverse: column-reverse,
  row-reverse: row-reverse,
);

$flexAlignments: (
  justify-content: (
    start: flex-start,
    end: flex-end,
    center: center,
    between: space-between,
    around: space-around,
    stretch: stretch,
  ),
  align-content: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch,
  ),
  justify-items: (
    start: flex-start,
    center: center,
    end: flex-end,
    stretch: stretch,
  ),
  align-items: (
    start: flex-start,
    end: flex-end,
    center: center,
    baseline: baseline,
    stretch: stretch,
  ),
  self: (
    start: flex-start,
    end: flex-end,
    stretch: stretch,
    center: center,
  ),
);

$sizeExtensions: (
  xs: xs,
  s: s,
  m: m,
  l: l,
  xl: xl,
  xxl: xxl,
);

$spacing: (
  pure: (
    space-xs-pure: 1.896rem,
    space-s-pure: 2.133rem,
    space-m-pure: 2.4rem,
    space-l-pure: 2.7rem,
    space-xl-pure: 3.038rem,
    space-xxl-pure: 3.42rem,
  ),
  calc: (
    space-xs-calc: fluidCalc($space-xs-min, $space-xs-max),
    space-s-calc: fluidCalc($space-s-min, $space-s-max),
    space-m-calc: fluidCalc($space-m-min, $space-m-max),
    space-l-calc: fluidCalc($space-l-min, $space-l-max),
    space-xl-calc: fluidCalc($space-xl-min, $space-xl-max),
    space-xxl-calc: fluidCalc($space-xxl-min, $space-xxl-max),
  ),
  clamp: (
    space-xs-clamp: fluidClamp($space-xs-min, $space-xs-max),
    space-s-clamp: fluidClamp($space-s-min, $space-s-max),
    space-m-clamp: fluidClamp($space-m-min, $space-m-max),
    space-l-clamp: fluidClamp($space-l-min, $space-l-max),
    space-xl-clamp: fluidClamp($space-xl-min, $space-xl-max),
    space-xxl-clamp: fluidClamp($space-xxl-min, $space-xxl-max),
  ),
);

$sectionSpacing: (
  pure: (
    section-space-xs-pure: 1.896rem,
    section-space-s-pure: 2.133rem,
    section-space-m-pure: 2.4rem,
    section-space-l-pure: 2.7rem,
    section-space-xl-pure: 3.038rem,
    section-space-xxl-pure: 3.42rem,
  ),
  calc: (
    section-space-xs-calc: fluidCalc($section-xs-min, $section-xs-max),
    section-space-s-calc: fluidCalc($section-s-min, $section-s-max),
    section-space-m-calc: fluidCalc($section-m-min, $section-m-max),
    section-space-l-calc: fluidCalc($section-l-min, $section-l-max),
    section-space-xl-calc: fluidCalc($section-xl-min, $section-xl-max),
    section-space-xxl-calc: fluidCalc($section-xxl-min, $section-xxl-max),
  ),
  clamp: (
    section-space-xs-clamp: fluidClamp($section-xs-min, $section-xs-max),
    section-space-s-clamp: fluidClamp($section-s-min, $section-s-max),
    section-space-m-clamp: fluidClamp($section-m-min, $section-m-max),
    section-space-l-clamp: fluidClamp($section-l-min, $section-l-max),
    section-space-xl-clamp: fluidClamp($section-xl-min, $section-xl-max),
    section-space-xxl-clamp: fluidClamp($section-xxl-min, $section-xxl-max),
  ),
);

$spacingVariables: (
  space-xs: $space-xs-pure,
  space-s: $space-s-pure,
  space-m: $space-m-pure,
  space-l: $space-l-pure,
  space-xl: $space-xl-pure,
  space-xxl: $space-xxl-pure,
);

$sectionSpacingVariables: (
  section-space-xs: $section-space-xs-pure,
  section-space-s: $section-space-s-pure,
  section-space-m: $section-space-m-pure,
  section-space-l: $section-space-l-pure,
  section-space-xl: $section-space-xl-pure,
  section-space-xxl: $section-space-xxl-pure,
);

// Updates here must be made in _fallback-maps as well

$textExtensions: (
  xs: xs,
  s: s,
  m: m,
  l: l,
  xl: xl,
  xxl: xxl,
);

$headingExtensions: ("1", "2", "3", "4", "5", "6");

$textSizing: (
  pure: (
    text-xs-pure: 1.26rem,
    text-s-pure: 1.42rem,
    text-m-pure: 1.8rem,
    text-l-pure: 2.025rem,
    text-xl-pure: 2.28rem,
    text-xxl-pure: 2.565rem,
  ),
  calc: (
    text-xs-calc: fluidCalc($text-xs-min, $text-xs-max),
    text-s-calc: fluidCalc($text-s-min, $text-s-max),
    text-m-calc: fluidCalc($text-m-min, $text-m-max),
    text-l-calc: fluidCalc($text-l-min, $text-l-max),
    text-xl-calc: fluidCalc($text-xl-min, $text-xl-max),
    text-xxl-calc: fluidCalc($text-xxl-min, $text-xxl-max),
  ),
  clamp: (
    text-xs-clamp: fluidClamp($text-xs-min, $text-xs-max),
    text-s-clamp: fluidClamp($text-s-min, $text-s-max),
    text-m-clamp: fluidClamp($text-m-min, $text-m-max),
    text-l-clamp: fluidClamp($text-l-min, $text-l-max),
    text-xl-clamp: fluidClamp($text-xl-min, $text-xl-max),
    text-xxl-clamp: fluidClamp($text-xxl-min, $text-xxl-max),
  ),
);

$textVariables: (
  text-xs: $text-xs-pure,
  text-s: $text-s-pure,
  text-m: $text-m-pure,
  text-l: $text-l-pure,
  text-xl: $text-xl-pure,
  text-xxl: $text-xxl-pure,
);

$headingSizes: (
  pure: (
    h6-pure: 1.26rem,
    h5-pure: 1.42rem,
    h4-pure: 1.8rem,
    h3-pure: 2.025rem,
    h2-pure: 2.28rem,
    h1-pure: 2.565rem,
  ),
  calc: (
    h6-calc: fluidCalc($h6-min, $h6-max),
    h5-calc: fluidCalc($h5-min, $h5-max),
    h4-calc: fluidCalc($h4-min, $h4-max),
    h3-calc: fluidCalc($h3-min, $h3-max),
    h2-calc: fluidCalc($h2-min, $h2-max),
    h1-calc: fluidCalc($h1-min, $h1-max),
  ),
  clamp: (
    h6-clamp: fluidClamp($h6-min, $h6-max),
    h5-clamp: fluidClamp($h5-min, $h5-max),
    h4-clamp: fluidClamp($h4-min, $h4-max),
    h3-clamp: fluidClamp($h3-min, $h3-max),
    h2-clamp: fluidClamp($h2-min, $h2-max),
    h1-clamp: fluidClamp($h1-min, $h1-max),
  ),
);
$headingVariables: (
  h6: $text-xs-pure,
  h5: $text-s-pure,
  h4: $text-m-pure,
  h3: $text-l-pure,
  h2: $text-xl-pure,
  h1: $text-xxl-pure,
);

$textWeights: (
  100: 100,
  200: 200,
  300: 300,
  400: 400,
  500: 500,
  600: 600,
  700: 700,
  800: 800,
  900: 900,
  bold: bold,
);

$textStyles: (
  italic: italic,
  oblique: oblique,
);

$textTargets: (
	p,
	li,
	blockquote,
	h1,
	h2,
	h3,
	h4,
	h5,
	h6,
	span,
	strong,
	cite
);

$textDecorations: (
  decoration-none: none,
  underline: underline,
  underline-wavy: underline wavy,
  underline-dotted: underline dotted,
  underline-double: underline double,
  underline-dashed: underline dashed,
  overline: overline,
  line-through: line-through,
);

$textTransforms: (
  transform-none: none,
  uppercase: uppercase,
  lowercase: lowercase,
  capitalize: capitalize,
);

$textAlignments: (
  left: left,
  center: center,
  right: right,
  justify: justify,
);

$widths: (
  xs: .1,
  s: .2,
  m: .4,
  l: .6,
  xl: .8,
  xxl: .9,
  vp-max: 1, // Effectively --content-width * 1
  content: 1, // Effectively --content-width * 1
  full: 100%,
  10: .1,
  20: .2,
  30: .3,
  40: .4,
  50: .5,
  60: .6,
  70: .7,
  80: .8,
  90: .9,
);

$zmap: (
  bottom: -1,
  0: 0,
  10: 10,
  20: 20,
  30: 30,
  40: 40,
  50: 50,
  60: 60,
  70: 70,
  80: 80,
  90: 90,
  top: 9999,
);

$radius: (
  sizes: (
    xs: $radius-xs-math,
    s: $radius-s-math,
    m: $radius-m-math,
    l: $radius-l-math,
    xl: $radius-xl-math,
    xxl: $radius-xxl-math,
  ),
  other: (
    50: 50%,
    circle: 50vw,
    none: 0,
  ),
);

// Mixins
$flex-grids: 2,3,4,5,6;

// Flex-grid mixins
@mixin flex-grid {
    --gap: var(--grid-gap);
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: var(--gap);
    justify-content: center;
}

@mixin flex-grid--1 {
    --gap: var(--grid-gap);
    display: flex;
    flex-direction: column;
    gap: var(--gap);

    > * {
        width: 100%;
        max-width: 100%;
        flex-basis: auto;
    }
}

// Mixins for Loading Flex Grids
///// Flex Grid

@mixin load-flex-grid--has-nested($selector, $child) {
    // This internal mixin loads all flex-grid classes for platforms that use inaccessible nested wrappers.
  
    // First, check to see if flex-grid is turned on
    @if $option-flex-grids == on {
  
        .flex-grid--1:not(#{$selector}),
        #{$selector}.flex-grid--1 > #{$child} {
            @include flex-grid--1;
        }
  
        @each $col-count in $flex-grids {
            $gap-count: $col-count - 1;
  
            .flex-grid--#{$col-count}:not(#{$selector}),
            #{$selector}.flex-grid--#{$col-count} > #{$child} {
                @include flex-grid;
  
                @each $extension,
                $value in $sizeExtensions {
                    &.gap--#{$extension} {
                        --gap: var(--space-#{$extension});
                    }
                }
  
                > * {
                    width: 100%;
                    max-width: calc((100% - (var(--gap) * #{$gap-count})) / #{$col-count});
                }
            }
  
            @each $breakpoint,
            $value in $breakpoints {
                @include breakpoint($breakpoint) {
  
                    .flex-grid--#{$breakpoint}-1:not(#{$selector}),
                    #{$selector}.flex-grid--#{$breakpoint}-1 > #{$child} {
                        @include flex-grid--1;
                    }
  
                    @each $col-count in $flex-grids {
                        $gap-count: $col-count - 1;
  
                        .flex-grid--#{$breakpoint}-#{$col-count}:not(#{$selector}),
                        #{$selector}.flex-grid--#{$breakpoint}-#{$col-count} > #{$child} {
                            @include flex-grid;
  
                            @each $extension,
                            $value in $sizeExtensions {
                                &.gap--#{$breakpoint}-#{$extension} {
                                    --gap: var(--space-#{$extension});
                                }
                            }
  
                            > * {
                                width: 100%;
                                max-width: calc((100% - (var(--gap) * #{$gap-count})) / #{$col-count});
                            }
                        }
                    }
                }
            }
        }
    } // End option check
  } // End Mixin
 // Needed for Content Grid Mixin

@mixin load-grid--has-nested($selector, $child) {
    // This internal mixin loads all grid & gap classes for platforms that use inaccessible nested wrappers.

    // First, check to see if grid is turned on
    @if $option-grid == on {
      // Load grid utility classes
      @each $grid-type, $col-set in $grids {
        @each $col-count, $value in $col-set {
          .grid--#{$col-count}:not(#{$selector}),
          #{$selector}.grid--#{$col-count} > #{$child} {
            display: grid !important;
            grid-template-columns: #{$value};
            inline-size: 100%;

            @if $col-count == "1" {
              > * {
                grid-column: 1 !important;
              }
            }
          }
        }
      }
      // Load breakpoint grid utility classes
      @each $breakpoint, $value in $breakpoints {
        @include breakpoint($breakpoint) {
          @each $grid-type, $col-set in $grids {
            @each $col-count, $colValue in $col-set {
              @if $grid-type == standard {
                .grid--#{$breakpoint}-#{$col-count}:not(#{$selector}),
                #{$selector}.grid--#{$breakpoint}-#{$col-count} > #{$child} {
                  grid-template-columns: #{$colValue};

                  @if $col-count == "1" {
                    > #{$selector} {
                      grid-column: 1 !important;
                    }
                  }
                }
              }
            }
          }
        }
      }
      // Load alternating grids
      @each $breakpoint, $value in $breakpoints {
      @include breakpoint-up($breakpoint) {
      @each $grid, $value in $gridsReversed {
        .grid--alternate-#{$breakpoint}:not(#{$selector}),
        .grid--alternate-#{$breakpoint} > #{$child} {
          > .grid--#{$grid}:nth-of-type(even) {
            grid-template-columns: #{$value};
            > #{$selector}:last-child {
              order: -1;
                }
              }
            }
          }
        }
      }
      // Reset auto staggered grids @ L breakpoint
      // @include breakpoint(l) {
      //   .grid--auto-1-2:not(#{$selector}),
      //   #{$selector}.grid--auto-1-2 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      //   .grid--auto-1-3:not(#{$selector}),
      //   #{$selector}.grid--auto-1-3 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      //   .grid--auto-3-2:not(#{$selector}),
      //   #{$selector}.grid--auto-3-2 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      //   .grid--auto-2-3:not(#{$selector}),
      //   #{$selector}.grid--auto-2-3 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      //   .grid--auto-2-1:not(#{$selector}),
      //   #{$selector}.grid--auto-2-1 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      //   .grid--auto-3-1:not(#{$selector}),
      //   #{$selector}.grid--auto-3-1 > #{$child} {
      //     display: grid !important;
      //     grid-template-columns: repeat(
      //       auto-fit,
      //       minmax(min(#{$auto-break-3}, 100vw - #{$auto-grid-math}), 1fr)
      //     );
      //   }
      // }
    } // End @if-grid-on
    @if $option-auto-grid == on {
      // Auto Grid Classes
      @each $grid, $col-count in $auto-grids {
        .grid--#{$grid}:not(#{$selector}),
        #{$selector}.grid--#{$grid} > #{$child} {
            --column-count: #{$col-count};
        }
      }
      // Generate Staggered Auto Grids
      @each $grid, $col-count in $auto-staggered-grids {
        .grid--#{$grid}:not(#{$selector}),
        #{$selector}.grid--#{$grid} > #{$child} {
            grid-template-columns: #{$col-count};
        }
      }
      // Stack auto grids at breakpoint
      @include breakpoint(#{$auto-staggered-grid-breakpoint}) {
        @each $grid, $col-count in $auto-staggered-grids {
          .grid--#{$grid}:not(#{$selector}),
          #{$selector}.grid--#{$grid} > #{$child} {
              grid-template-columns: var(--grid-template-columns);
              --column-count: 1;
          }
        }
      }
    }
  } // End mixin

// Mixin to load gap classes
@mixin load-gap {
    @if $option-gaps == on {
        // Load gap classes
        @each $size, $extension in $sizeExtensions {
            .gap--#{$extension}.gap--#{$extension} {
                gap: var(--space-#{$extension});
                --row-gap: var(--space-#{$extension});
                --col-gap: var(--space-#{$extension});
                --grid-gap: var(--space-#{$extension});
            }
        }
        // Load breakpoint gap classes
        @each $breakpoint, $value in $breakpoints {
            @include breakpoint($breakpoint) {
                @each $size, $extension in $sizeExtensions {
                    .gap--#{$breakpoint}-#{$extension}.gap--#{$breakpoint}-#{$extension} {
                        gap: var(--space-#{$extension});
                        --row-gap: var(--space-#{$extension});
                        --col-gap: var(--space-#{$extension});
                        --grid-gap: var(--space-#{$extension});
                    }
                }
            }
        }
        // Load col-gap classes
        @each $size, $extension in $sizeExtensions {
            .col-gap--#{$extension}.col-gap--#{$extension} {
                column-gap: var(--space-#{$extension});
                --col-gap: var(--space-#{$extension});
            }
        }
        // Load col-gap breakpoint classes
        @each $breakpoint, $value in $breakpoints {
            @include breakpoint($breakpoint) {
                @each $size, $extension in $sizeExtensions {
                    .col-gap--#{$breakpoint}-#{$extension}.col-gap--#{$breakpoint}-#{$extension} {
                        column-gap: var(--space-#{$extension});
                        --col-gap: var(--space-#{$extension});
                    }
                }
            }
        }
        // Load row-gap classes
        @each $size, $extension in $sizeExtensions {
            .row-gap--#{$extension}.row-gap--#{$extension} {
                row-gap: var(--space-#{$extension});
                --row-gap: var(--space-#{$extension});
            }
        }
        // Load row-gap breakpoint classes
        @each $breakpoint, $value in $breakpoints {
            @include breakpoint($breakpoint) {
                @each $size, $extension in $sizeExtensions {
                    .row-gap--#{$breakpoint}-#{$extension}.row-gap--#{$breakpoint}-#{$extension} {
                        row-gap: var(--space-#{$extension});
                        --row-gap: var(--space-#{$extension});
                    }
                }
            }
        }
    } // End option check
} // End Mixin

// Mixin to load gap classes when platform uses nested wrappers.
@mixin load-gap--has-nested($selector, $child) {
    // Load gap classes
    @if $option-gaps == on {
        @each $size, $extension in $sizeExtensions {
            .gap--#{$extension}:not(#{$selector}),
            #{$selector}.gap--#{$extension} > #{$child} {
                gap: var(--space-#{$extension});
                --row-gap: var(--space-#{$extension});
                --col-gap: var(--space-#{$extension});
                --grid-gap: var(--space-#{$extension});
            }
        }
        // Load breakpoint gap classes
        @each $breakpoint, $value in $breakpoints {
            @include breakpoint($breakpoint) {
                @each $size, $extension in $sizeExtensions {
                    .gap--#{$breakpoint}-#{$extension}:not(#{$selector}),
                    #{$selector}.gap--#{$breakpoint}-#{$extension} > #{$child} {
                        gap: var(--space-#{$extension});
                        --row-gap: var(--space-#{$extension});
                        --col-gap: var(--space-#{$extension});
                        --grid-gap: var(--space-#{$extension});
                    }
                }
            }
        }
        // Make contextual gaps compatible with nested wrappers
        .grid-gap:not(#{$selector}),
        #{$selector}.grid-gap > #{$child} {
            gap: var(--grid-gap);
        }
        .container-gap:not(#{$selector}),
        #{$selector}.container-gap > #{$child} {
            gap: var(--container-gap);
        }
        .content-gap:not(#{$selector}),
        #{$selector}.content-gap > #{$child} {
            gap: var(--content-gap);
        }
    } // End option check
} // End mixin

// Mixins for Auto Gap Spacing

@mixin auto-contextual-spacing($selector:null, $gap:null, $alignment:null) {
    #{$selector}:where(:not(.bricks-shape-divider)) {
        display: flex;
        flex-direction: column;
        align-items: #{$alignment};
        gap: #{$gap};
    }
}

@mixin auto-contextual-block-spacing($selector:null, $gap:null) {
    :where(#{$selector}) {
        gap: #{$gap};
    }
}

$btn-props: (
    // Main (Establish Properties)
    "main": (
        background: var(--btn-background),
        color: var(--btn-text-color),
        padding-block: var(--btn-padding-block),
		padding-inline: var(--btn-padding-inline),
        min-inline-size: var(--btn-min-width),
        line-height: var(--btn-line-height),
        font-size: var(--btn-font-size, var(--text-m)),
        font-weight: var(--btn-font-weight),
        font-style: var(--btn-font-style),
        text-transform: var(--btn-text-transform),
        letter-spacing: var(--btn-letter-spacing),
        text-decoration: var(--btn-text-decoration),
        border-width: var(--btn-border-width),
        border-style: var(--btn-border-style),
        border-radius: var(--btn-radius),
        border-color: var(--btn-border-color),
        transition: var(--btn-transition, var(--transition)),
        justify-content: var(--btn-justify-content, center),
        text-align: var(--btn-text-align, center),
    ),
    // Hover (Establish Properties)
    "hover": (
        background: var(--btn-background-hover),
        color: var(--btn-text-color-hover),
        border-color: var(--btn-border-color-hover),
        text-decoration: var(--btn-text-decoration-hover),
    ),
    // Dark (Swap Values)
    "dark": (
        btn-background: var(--btn-dark-background),
        btn-text-color: var(--btn-dark-text-color),
        btn-border-color: var(--btn-dark-border-color),
        btn-background-hover: var(--btn-dark-background-hover),
        btn-text-color-hover: var(--btn-dark-text-color-hover),
        btn-border-color-hover: var(--btn-dark-border-color-hover),
    ),
    // Light (Swap Values)
    "light": (
        btn-background: var(--btn-light-background),
        btn-text-color: var(--btn-light-text-color),
        btn-border-color: var(--btn-light-border-color),
        btn-background-hover: var(--btn-light-background-hover),
        btn-text-color-hover: var(--btn-light-text-color-hover),
        btn-border-color-hover: var(--btn-light-border-color-hover),
    ),
    // Outline (Swap Values)
    "outline": (
        btn-background: var(--btn-outline-background),
        btn-background-hover: var(--btn-outline-background-hover),
        btn-border-width: var(--btn-outline-border-width),
        btn-border-color: var(--btn-outline-border-color),
        btn-text-color: var(--btn-outline-text-color),
        btn-text-color-hover: var(--btn-outline-text-color-hover),
        btn-border-color-hover: var(--btn-outline-border-hover),
    ),
    // Outline Dark (Swap Values)
    "outline-dark": (
        btn-background: var(--btn-outline-dark-background),
        btn-border-width: var(--btn-outline-dark-border-width),
        btn-border-color: var(--btn-outline-dark-border-color),
        btn-text-color: var(--btn-outline-dark-text-color),
        btn-background-hover: var(--btn-outline-dark-background-hover),
        btn-text-color-hover: var(--btn-outline-dark-text-color-hover),
        btn-border-color-hover: var(--btn-outline-dark-border-hover),
    ),
    // Outline Light (Swap Values)
    "outline-light": (
        btn-background: var(--btn-outline-light-background),
        btn-border-width: var(--btn-outline-light-border-width),
        btn-border-color: var(--btn-outline-light-border-color),
        btn-text-color: var(--btn-outline-light-text-color),
        btn-background-hover: var(--btn-outline-light-background-hover),
        btn-text-color-hover: var(--btn-outline-light-text-color-hover),
        btn-border-color-hover: var(--btn-outline-light-border-hover),
    ),
);

$btn-props--main: map-get($btn-props, "main");
$btn-props--hover: map-get($btn-props, "hover");
$btn-props--dark: map-get($btn-props, "dark");
$btn-props--light: map-get($btn-props, "light");
$btn-props--outline: map-get($btn-props, "outline");
$btn-props--outline-dark: map-get($btn-props, "outline-dark");
$btn-props--outline-light: map-get($btn-props, "outline-light");



// Master Button
@mixin btn-props() {
  // Main Properties
  @each $prop, $value in $btn-props--main {
    #{$prop}: #{$value};
  }
  // Hover Properties
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @each $prop, $value in $btn-props--hover {
        #{$prop}: #{$value};
      }
    }
  }
  // Global Focus Style
  &:focus {
    @include default-focus-style(#{$focus-style});
  }
}

// Load Buttons (Internal)
@mixin load-buttons() {
  // Assign button values to tokens
  @each $btnName, $key in $buttons {
    .btn--#{$btnName} {
      @each $prop, $value in $key {
        --#{$prop}: #{$value};
      }
    }
  }

  // Generate properties with global tokens.
  // Automatically assign to all classes with "btn--" prefix.
	// The exclusion selectors are defined in buttons-links/global/vars/
  [class*="btn--"]:where(:not(#{$btn-exclusion-selectors})) {
    @include btn-props;
  }

  // Generate Button Size Utilities
  @each $size, $extension in $sizeExtensions {
    .btn--#{$extension} {
      font-size: var(--text-#{$extension});
    }
  }

  .btn--clear.btn--clear,
  .btn--none.btn--none {
    background: none;
    border: none;
  }
}

// Load Buttons (Internal - Support for Nested Buttons)
// $not is the excluded wrapper element
// $target is the element within the wrapper that should get the styles
@mixin load-buttons-nested($not, $target) {
  // Apply global button styles to all button classes
  @each $btnColor, $btnProps in $buttons {
    .btn--#{$btnColor}:not(.#{$not}),
    .btn--#{$btnColor}.#{$not} > .#{$target} {
      @include btn-props();
    }
  }

  // Generate Button Properties & Styles
  @each $btnColor, $btnProps in $buttons {
    .btn--#{$btnColor} {
      @each $prop, $value in $btnProps {
        --#{$prop}: #{$value};
      }
    }
  }

  // Generage Button Size Utilities
  @each $size, $extension in $sizeExtensions {
    .btn--#{$extension}:not(.#{$not}),
    .btn--#{$extension}.#{$not} > .#{$target} {
      font-size: var(--text-#{$extension});
    }
  }
}

// FOR USERS

// This mixin adds all styles for any button in the system
// $style = button style name with support for ".btn--outline" attached to the name
// Must use quotes when passing the .btn--outline versions.
@mixin btn($style: primary, $props: yes) {
	@if $props != "no" {
  	@include btn-props();
	}
  @each $btnName, $key in $buttons {
    @if $btnName == #{$style} {
      @each $prop, $value in $key {
        --#{$prop}: #{$value};
      }
    }
  }
}
// For backward compatibility
@mixin btn-default() {
  @include btn-props();
}

// Focus Style

// Focus style mixin used within framework
@mixin default-focus-style($type: $focus-style) {
    @if $type == outline {
      outline-style: solid;
      outline-color: var(--focus-color);
      outline-width: var(--focus-width);
      outline-offset: var(--focus-offset);
    }
    @if $type == shadow {
      box-shadow: 0 0 0 var(--focus-width) var(--focus-color);
      outline: none;
    }
  }
  
// Focus style mixin for users
@mixin focus-parent($style: shadow) {
  &:focus-within {
    @if $style == "shadow" {
      box-shadow: 0 0 0 var(--focus-width) var(--focus-color);
    }
    @if $style == "outline" {
      outline: var(--focus-width) solid var(--focus-color);
      outline-offset: var(--focus-offset);
    }
  }
  & :focus {
    outline: none !important;
    box-shadow: none !important;
  }
}
  
@mixin focus-styles {
  :focus {
    outline: none;
    box-shadow: none;
  }
  :focus-visible {
    @include default-focus-style;
  }

  @supports not selector(:focus-visible) {
    :focus {
      @include default-focus-style;
    }
  }

  // Custom Focus Colors
  // Requires Builder Overrides

  @each $color, $value in $core-colors {
    *:focus {
      &.focus--#{$color} {
        --focus-color: var(--#{$color});
      }
    }
    .focus--#{$color} *:focus,
    .focus--#{$color}:focus-within {
      --focus-color: var(--#{$color});
    }
  }
}

@mixin hidden-accessible-badge {
  position: relative !important;
  inline-size: 2ch !important;
  block-size: 2ch !important;
  margin: 0;
  line-height: 1;
  visibility: hidden;

  &::before {
      content: "A";
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      text-align: center;
      position: absolute;
      background: #111;
      color: #f5f5f5;
      font-size: max(60%, 13px);
      padding: 0.5em;
      inset-block-start: 0;
      inset-inline-start: 0;
      inline-size: 20px;
      block-size: 20px;
      visibility: visible;
      border-radius: 50%;
  }
}

// Skip Link
@mixin skip-link {
  position: absolute;
  inset-block-start: 1rem;
  inset-inline-start: 1rem;
  transform: translateY(-250%);
  --btn-min-width: fit-content;
  @include btn("primary");

  &:focus {
    transform: translateY(0);
  }
}
// Mixins to load site defaults
//// Default text styles
@mixin load-default-text() {
  // Body Styles
  body {
    font-size: var(--default-font-size, var(--text-m));
    @each $prop, $value in $textDefaultStyles {
      @if $value != null and $prop != "max-width" {
        #{$prop}: var(--text-#{$prop});
      }
    }
  }

  // Line height must be called on specific elements to support calc functions via custom properties
  p, li {
    line-height: var(--text-line-height, $base-text-lh);
  }

  // Support for global heading styles
  h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6,.h--1,.h--2,.h--3,.h--4,.h--5,.h--6 {
    @each $prop, $value in $headingDefaultStyles {
      @if $value != null {
        #{$prop}: var(--heading-#{$prop});
      }
    }
  }

  @for $i from 1 through 6 {
    h#{$i} {
      font-size: var(--h#{$i});
      // Directly access the map for the current heading level h#{$i}
      $current-heading-styles: map-get($headingGlobalStyles, 'h#{$i}');

      // Check if there is a valid map for the current heading
      @if $current-heading-styles != null {
        @each $prop, $value in $current-heading-styles {
          @if $value != null {
            // Output the property with a CSS variable
            #{$prop}: var(--h#{$i}-#{$prop});
          }
        }
      }
    }
  }

  // Default paragraph length cap
  @if $text-max-width != null {
    p, li {
      max-inline-size: var(--text-m-length, $text-max-width);
      width: 100%;
    }
  }
}
//// Default body styles
@mixin load-default-body() {
  @if $option-boxed-layout == on {
    html {
      background-color: var(--device-bg-color, $device-bg-color);
    }
  }
  body {
    color: var(--body-color, $body-color);
    background-color: var(--body-bg-color, $body-bg-color);
    @if $option-boxed-layout == on {
      inline-size: 100%;
      max-inline-size: var(--body-max-width, $body-max-width);
      box-shadow: var(--body-box-shadow, $body-box-shadow);
      border-color: var(--body-border-color, $body-border-color);
      border-style: var(--body-border-style, $body-border-style);
      border-width: var(--body-border-width, $body-border-width);
      border-radius: var(--body-border-radius, $body-border-radius);
      margin-block-start: var(--body-margin-top, #{$body-margin-top}) !important;
      margin-inline: auto !important;
    }
  }
  html:has(body.boxed-layout) {
    background-color: var(--device-bg-color, $device-bg-color);
  }
}

$link-default-not-selectors: null;
@if $option-link-default-not == off or $link-default-not == null {
  $link-default-not-selectors: "[class*="btn--"]";
} @else {
  $link-default-not-selectors: "[class*="btn--"], #{$link-default-not}";
}

//// Default link styles
@mixin load-default-links() {
  body a:where(:not(#{$link-default-not-selectors})) {
    color: var(--link-color, $link-color);
    font-weight: var(--link-weight, $link-weight);
    -webkit-text-decoration: var(--link-decoration, $link-decoration);
    text-decoration: var(--link-decoration, $link-decoration);
    text-underline-offset: var(--link-underline-offset, $link-underline-offset);
    @if $link-decoration-color != null {
      text-decoration-color: var(--link-decoration-color);
    }
    @if $link-decoration-thickness != null {
      text-decoration-thickness: var(--link-decoration-thickness);
    }
    transition: var(--link-transition, var(--transition));

    @media (hover: hover) and (pointer: fine) {
      &:hover {
        color: var(--link-color-hover, $link-color-hover);
        @if $link-decoration-hover != "inherit" {
          -webkit-text-decoration: var(--link-decoration-hover, $link-decoration-hover);
          text-decoration: var(--link-decoration-hover, $link-decoration-hover);
        }
        @if $link-decoration-color-hover != null {
          --link-decoration-color: var(--link-decoration-color-hover);
        }
      }
    }
  }

  // Default link style for headings
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    a {
      font-weight: inherit;
      text-decoration: inherit;
      color: currentcolor;
      text-underline-offset: var(--link-underline-offset, $link-underline-offset);

      @media (hover: hover) and (pointer: fine) {
        &:hover {
          color: currentcolor;
        }
      }
    }
  }

}

///  Removed when using the new default styles.
///  Delete in 3.1 if not needed.
// //// Before Builder Defaults
// @mixin load-before-builder-default-styles {
//   // Headings
//   @for $i from 1 through 6 {
//     h#{$i} {
//         color: var(--h#{$i}-color, var(--black));
//     }
//   }
// }

// Text Mixins
@mixin fluid-text($pure, $min, $max) {
  font-size: #{$pure}rem;
  font-size: fluidCalc($min, $max);
  font-size: fluidClamp($min, $max);
}

@mixin map-get-fluid-text($extension) {
  font-size: map-get(map-get($textSizing, pure), text-#{$extension}-pure);
  font-size: map-get(map-get($textSizing, calc), text-#{$extension}-calc);
  font-size: map-get(map-get($textSizing, clamp), text-#{$extension}-clamp);
}

@mixin map-get-fluid-heading($extension) {
  font-size: map-get(map-get($headingSizes, pure), #{$extension}-pure);
  font-size: map-get(map-get($headingSizes, calc), #{$extension}-calc);
  font-size: map-get(map-get($headingSizes, clamp), #{$extension}-clamp);
}

// Heading Style Mixins

@mixin heading-style($level: h2) {
  font-size: var(--#{$level});
  // Output styles from $headingDefaultStyles
  @each $property, $value in $headingDefaultStyles {
    @if $value != null {
      #{$property}: var(--heading-#{$property});
    }
  }

  // Get the specific styles for the heading level
  $specificStyles: map-get($headingGlobalStyles, $level);

  // Output specific styles, overriding defaults where applicable
  @each $property, $value in $specificStyles {
    @if $value != null {
      // Only output if the property is different from the default
      @if not map-has-key($headingDefaultStyles, $property) or $value != map-get($headingDefaultStyles, $property) {
        #{$property}: var(--#{$level}-#{$property}, var(--heading-#{$property}));
      }
    }
  }
}

// Text Style Mixins

@mixin text-style($level: m) {
  font-size: var(--text-#{$level});
  // Output styles from $textDefaultStyles
  @each $property, $value in $textDefaultStyles {
    @if $value != null {
      #{$property}: var(--text-#{$property});
    }
  }

  // Get the specific styles for the text level
  $specificStyles: map-get($textGlobalStyles, $level);

  // Output specific styles, overriding defaults where applicable
  @each $property, $value in $specificStyles {
    @if $value != null {
      // Only output if the property is different from the default
      @if not map-has-key($textDefaultStyles, $property) or $value != map-get($textDefaultStyles, $property) {
        #{$property}: var(--text-#{$level}-#{$property}, var(--text-#{$property}));
      }
    }
  }
}

@mixin load-aspect-ratio--has-nested($target) {
    @each $ratio, $value in $aspect-ratios {
        .aspect--#{$ratio} #{$target} {
            aspect-ratio: #{$value};
        }
        // Support for images
        .aspect--#{$ratio} img {
        -o-object-fit: cover;
        object-fit: cover;
        }
        // Support for iframes
        // Requires builder specific overrides
        .aspect--#{$ratio} iframe {
        width: 100%;
        height: 100%;
        aspect-ratio: #{$value};
        }
    }
    
    // Generate Breakpoint Classes
    // Changes here need to be made for each builder as well
    
    @each $extension, $value in $breakpoints {
        @include breakpoint($extension) {
        @each $ratio, $value in $aspect-ratios {
            .aspect--#{$extension}-#{$ratio} #{$target} {
            aspect-ratio: #{$value};
            }
    
            img.aspect--#{$extension}-#{$ratio} #{$target} {
            -o-object-fit: cover;
            object-fit: cover;
            }
    
            .aspect--#{$extension}-#{$ratio} iframe {
            width: 100%;
            height: 100%;
            aspect-ratio: #{$value};
            }
        }
        }
    }
}
// MAX WIDTH
@mixin breakpoint($extension) {
    @media (max-width: map-get($breakpoints, $extension)) {
      @content;
    }
}

// MIN WIDTH
@mixin breakpoint-up($extension) {
    $extension-value: map-get($breakpoints, $extension);
    $new-extension-value: $extension-value + 1px;
    @media (min-width: $new-extension-value) {
        @content;
    }
}

@mixin auto-grid($column-count: 1, $min: calc((var(--content-width) - ((var(--column-count) - 1) * var(--grid-gap))) / var(--column-count)), $flow: if($auto-grid-flow-option == auto-fill, auto-fill, auto-fit), $force-even-column-count: false, $internal-use: false) {
	// Force even columns if option is on and column count is even
	$force-even-column-count: if($auto-grid-force-even-column-count == on and $column-count != 1 and index($even-numbers-list, $column-count), true, false);
    --min: #{$min} * #{$auto-grid-aggressiveness};
    --column-count: #{$column-count};
    --grid-template-columns: repeat(#{$flow}, minmax(var(--min-formula), 1fr));
	--grid-template-columns-even: repeat(#{$flow}, minmax(var(--min-formula), 1fr) minmax(var(--min-formula), 1fr));
	// Force even columns must use a min-width media query to still allow a single column on small devices
	@if $force-even-column-count == true {
		@include breakpoint-up($auto-grid-force-even-column-count-breakpoint) {
			--grid-template-columns: var(--grid-template-columns-even);
		}
	}
	@if $internal-use == false {
		display: grid !important;
		grid-template-columns: var(--grid-template-columns);
		gap: var(--grid-gap);
		inline-size: 100%;
		--min-formula: min(100%, max(var(--min), (100% - (var(--column-count) - 1) * var(--grid-gap)) / var(--column-count)));
			> * {
				min-width: 0;
				max-width: 100%;
				overflow-wrap: break-word;
			}
	}
}


// Padding
@mixin fluid-padding($pure, $min, $max) {
  padding: #{$pure};
  padding: fluidCalc($min, $max);
  padding: fluidClamp($min, $max);
}

@mixin map-get-padding($extension) {
  padding: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  padding: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  padding: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

@mixin fluid-section-padding($pure, $min, $max) {
  padding: #{$pure} append-rem($section-padding-x-pure);
  padding: fluidCalc($min, $max)
    fluidCalc($section-padding-x-min, $section-padding-x-max);
  padding: fluidClamp($min, $max)
    fluidClamp($section-padding-x-min, $section-padding-x-max);
}

@mixin map-get-section-spacing($extension) {
  padding: map-get(
      map-get($sectionSpacing, pure),
      section-space-#{$extension}-pure
    )
    append-rem($section-padding-x-pure);
  padding: map-get(
      map-get($sectionSpacing, calc),
      section-space-#{$extension}-calc
    )
    fluidCalc($section-padding-x-min, $section-padding-x-max);
  padding: map-get(
      map-get($sectionSpacing, clamp),
      section-space-#{$extension}-clamp
    )
    fluidClamp($section-padding-x-min, $section-padding-x-max);
}

@mixin map-get-header-padding($extension) {
  padding: map-get(map-get($spacing, pure), space-#{$extension}-pure) 0;
  padding: map-get(map-get($spacing, calc), space-#{$extension}-calc) 0;
  padding: map-get(map-get($spacing, clamp), space-#{$extension}-clamp) 0;
}


// Owl Spacing
@mixin map-get-owl($extension) {
  margin-block-start: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  margin-block-start: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  margin-block-start: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Gap
@mixin map-get-gap($extension) {
  gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Columns Gap
@mixin map-get-col-gap($extension) {
  -moz-column-gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  column-gap: map-get(map-get($spacing, pure), space-#{$extension}-pure);
  -moz-column-gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  column-gap: map-get(map-get($spacing, calc), space-#{$extension}-calc);
  -moz-column-gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
  column-gap: map-get(map-get($spacing, clamp), space-#{$extension}-clamp);
}

// Platform & Feature Options

@mixin if-all-builders-off {
  // If all builders are off, show content
  // Never add native Gutenberg to this list -- non-native builders only.
  @if
    $option-bricks == off and
    $option-oxygen == off and
    $option-cwicly == off and
    $option-generate-press == off and
    $option-generate-blocks == off and
    $option-breakdance == off {
      @content;
  }
}

@mixin if-builders-off {
  @if $option-bricks == off and $option-oxygen == off {
    @content;
  }
}

@mixin if-woocommerce-on {
  @if $option-woocommerce == on {
    @content;
  }
}

@mixin if-smooth-scrolling-on {
  @if $option-smooth-scrolling == on {
    @content;
  }
}

@mixin if-wsform-on {
  @if $option-wsform == on {
    @content;
  }
}

@mixin if-bricks-on {
  @if $option-bricks == on {
    @content;
  }
}

@mixin if-bricks-off {
  @if $option-bricks == off {
    @content;
  }
}

@mixin if-oxygen-off {
  @if $option-oxygen == off {
    @content;
  }
}

// Generate code at all breakpoints

@mixin at-each-breakpoint {
  @each $breakpoint, $value in $breakpoints {
    @include breakpoint($breakpoint) {
      @content;
    }
  }
}

// Overlays

@mixin overlay($overlay-bg: var(--black-trans-60), $overlay-opacity: null, $overlay-bg-image: null) {
  position: relative;
  isolation: isolate;

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    z-index: -1;

    // Need to check if there's a background image declared or not so we can
    // create a valid background string

    @if not $overlay-bg-image {
      background: var(--overlay-bg, $overlay-bg);
    } @else {
      background: var(--overlay-bg, $overlay-bg), var(--overlay-bg-image, $overlay-bg-image);
    }

    opacity: var(--overlay-opacity, $overlay-opacity);
  }

}

// Clickable Parent for Builders (Internal)

@mixin load-clickable-parent($target) {
    .clickable-parent:not(a) {
      position: static;

      a {
        position: static;
      }

      > a::after {
        content: "";
        position: absolute;
        inset: 0;
        cursor: pointer !important;
        display: flex;
        z-index: 1;
      }
    }

    button.clickable-parent,
    a.clickable-parent {
      position: static !important;

      &::after {
        content: "";
        position: absolute;
        inset: 0;
        cursor: pointer !important;
        display: flex;
        z-index: 1;
      }
    }
    // Remove effect from page builder target
    #{$target} a.clickable-parent::after,
    #{$target} .clickable-parent > a::after {
      content: '';
      position: relative;
    }
  }

// Clickable Parent (for Users)

@mixin clickable-parent {
  position: static;

    &::after {
      content: "";
      position: absolute;
      inset: 0;
      cursor: pointer !important;
      display: flex;
      z-index: 1;
    }
}

///// Grid

@mixin grid($columns, $rows, $gap) {
  display: grid;
  grid-template-columns: $columns;
  grid-template-rows: $rows;
  gap: $gap;
}

// @mixin auto-grid() {
//   display: grid;
//   grid-template-columns: null;
//   grid-template-rows: null;
//   gap: null;
// }

//// Animations

@mixin delay-children($child-count: 1, $delay: 100ms) {
  @for $i from 1 through $child-count {
      &:nth-child(#{$i}) {
          animation-delay: calc(#{$delay} * #{$i});
      }
  }
}

@mixin loop-trans-colors() {
  @each $map in $color-maps {
    @each $colorSet, $colorName in $map {
      @each $color, $value in $colorName {
        $current-color: $color;
        @content;
      }
    }
  }
}

@mixin texture($name: "1") {
	background-color: var(--texture-background-color, var(--texture-#{$name}-background-color));
	background-image: var(--texture-asset, var(--texture-#{$name}-asset));
	background-position: var(--texture-position, var(--texture-#{$name}-position, center center));
	background-attachment: var(--texture-attachment, var(--texture-#{$name}-attachment));
	background-repeat: var(--texture-repeat, var(--texture-#{$name}-repeat));
	background-size: var(--texture-size, var(--texture-#{$name}-size));
	border-image: fill 1 var(--texture-overlay, var(--texture-#{$name}-overlay, none));
	animation: var(--texture-animation, var(--texture-#{$name}-animation, none));
}

@mixin texture-overlay($name: "1") {
	position: relative;
	z-index: 0;
	isolation: isolate;

	&::before {
		content: "";
		background: var(--overlay-background);
		background-position: var(--background-position, var(--texture-#{$name}-position, center center));
		background-repeat: var(--texture-repeat, var(--texture-#{$name}-repeat));
		background-size: var(--texture-size, var(--texture-#{$name}-size));
		border-image: fill 1 var(--overlay, var(--texture-#{$name}-overlay-overlay, none));
		mix-blend-mode: var(--blend-mode, var(--texture-#{$name}-blend-mode, normal));
		position: absolute;
		inset: var(--overlay-inset, 0);
		z-index: var(--overlay-z-index, -1);
		opacity: var(--overlay-opacity, var(--texture-#{$name}-overlay-opacity, 1));
	}
}

@mixin overlayBefore {
	content: "";
	position: absolute;
	inset: 0;
	z-index: -1;
  }

  @mixin overlay($background) {
	position: relative;
	z-index: 0;

	&::before {
	  content: "";
	  background: var(--overlay-background, #{$background});
	  position: absolute;
	  inset: 0;
	  z-index: -1;
	}
  }

@mixin center($alignment: all, $output: full) {

	// Output can equal "full", "core", or "tokens."
	// "full" outputs all properties.
	// "core" outputs only the flex properties.
	// "tokens" outputs only the token properties.

	@if ($output == "full" or $output == "tokens") and $output != "core" {
		&#{&} { // Duplicate the selector to increase specificity
			@if $alignment == all {
				--align-items: center;
				--align-content: center;
				--justify-items: center;
				--justify-content: center;
				--text-align: center;
			}
			@if $alignment == x {
				--align-items: center;
				--justify-items: flex-start;
				--justify-content: flex-start;
			}
			@if $alignment == y {
				--align-items: flex-start;
				--justify-items: center;
				--justify-content: center;
			}
			@if $alignment == left {
				--align-items: flex-start;
				--align-content: flex-start;
				--justify-items: center;
				--justify-content: center;
				--text-align: left;
			}
			@if $alignment == right {
				--align-items: flex-end;
				--align-content: flex-end;
				--justify-items: center;
				--justify-content: center;
				--text-align: right;
			}
			@if $alignment == top {
				--align-items: center;
				--align-content: center;
				--justify-items: flex-start;
				--justify-content: flex-start;
			}
			@if $alignment == bottom {
				--align-items: center;
				--justify-items: flex-end;
				--justify-content: flex-end;
			}
		}
	}

	@if ($output == "full" or $output == "core") and $output != "tokens" {
		&#{&} { // Duplicate the selector to increase specificity
			display: flex;
			flex-direction: column;
			align-items: var(--align-items, initial);
			align-content: var(--align-content, initial);
			justify-items: var(--justify-items, initial);
			justify-content: var(--justify-content, initial);
			text-align: var(--text-align, inherit);
		}
	}
}


@mixin fade($axis, $amount: 25%) {
	--fade-amount: #{$amount};

	@if $axis == 'block' {
	  -webkit-mask-image: linear-gradient(
		to bottom,
		transparent 0%,
		black var(--fade-amount),
		black calc(100% - var(--fade-amount)),
		transparent 100%
	  );
	  mask-image: linear-gradient(
		to bottom,
		transparent 0%,
		black var(--fade-amount),
		black calc(100% - var(--fade-amount)),
		transparent 100%
	  );
	} @else if $axis == 'inline' {
	  -webkit-mask-image: linear-gradient(
		to right,
		transparent 0%,
		black var(--fade-amount),
		black calc(100% - var(--fade-amount)),
		transparent 100%
	  );
	  mask-image: linear-gradient(
		to right,
		transparent 0%,
		black var(--fade-amount),
		black calc(100% - var(--fade-amount)),
		transparent 100%
	  );
	} @else if $axis == 'top' {
	  -webkit-mask-image: linear-gradient(
		to bottom,
		transparent 0%,
		black var(--fade-amount)
	  );
	  mask-image: linear-gradient(
		to bottom,
		transparent 0%,
		black var(--fade-amount)
	  );
	} @else if $axis == 'bottom' {
	  -webkit-mask-image: linear-gradient(
		to top,
		transparent 0%,
		black var(--fade-amount)
	  );
	  mask-image: linear-gradient(
		to top,
		transparent 0%,
		black var(--fade-amount)
	  );
	} @else if $axis == 'left' {
	  -webkit-mask-image: linear-gradient(
		to right,
		transparent 0%,
		black var(--fade-amount)
	  );
	  mask-image: linear-gradient(
		to right,
		transparent 0%,
		black var(--fade-amount)
	  );
	} @else if $axis == 'right' {
	  -webkit-mask-image: linear-gradient(
		to left,
		transparent 0%,
		black var(--fade-amount)
	  );
	  mask-image: linear-gradient(
		to left,
		transparent 0%,
		black var(--fade-amount)
	  );
	}
  }

// Recipe for Content Grid
@mixin content-grid {
	--full: minmax(var(--gutter), 1fr);
	padding-inline: 0;
	column-gap: 0 !important;
	display: grid !important;
	grid-template-columns:
		[full-start]
			var(--full)
		[feature-max-start]
			minmax(0, var(--feature-max-width, #{$content-feature-max}))
		[feature-start]
			minmax(0, var(--feature-width, #{$content-feature}))
		[content-start]
			min(var(--content-width), 100% - var(--gutter) * 2)
		[content-end]
			minmax(0, var(--feature-width, #{$content-feature}))
		[feature-end]
			minmax(0, var(--feature-max-width, #{$content-feature-max}))
		[feature-max-end]
			var(--full)
		[full-end];

	> :not(
		.content--feature,
		.content--feature-max,
		.content--full,
		.content--full-safe) {
			width: 100%;
	}

	> :where(:not(
		.content--feature,
		.content--feature-max,
		.content--full,
		.content--full-safe)) {
			grid-column: content;
	}
}

