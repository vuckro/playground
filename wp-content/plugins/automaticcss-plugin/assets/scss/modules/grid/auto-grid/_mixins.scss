@mixin auto-grid($column-count: 1, $min: calc((var(--content-width) - ((var(--column-count) - 1) * var(--grid-gap))) / var(--column-count)), $flow: if($auto-grid-flow-option == auto-fill, auto-fill, auto-fit), $force-even-column-count: false, $internal-use: false) {
	// Force even columns if option is on and column count is even
	$force-even-column-count: if($auto-grid-force-even-column-count == on and $column-count != 1 and index($even-numbers-list, $column-count), true, false);
    --min: #{$min} * #{$auto-grid-aggressiveness};
    --column-count: #{$column-count};
    --grid-template-columns: repeat(#{$flow}, minmax(var(--min-formula), 1fr));
	--grid-template-columns-even: repeat(#{$flow}, minmax(var(--min-formula), 1fr) minmax(var(--min-formula), 1fr));
	// Force even columns must use a min-width media query to still allow a single column on small devices
	@if $force-even-column-count == true {
		@include breakpoint-up($auto-grid-force-even-column-count-breakpoint) {
			--grid-template-columns: var(--grid-template-columns-even);
		}
	}
	@if $internal-use == false {
		display: grid !important;
		grid-template-columns: var(--grid-template-columns);
		gap: var(--grid-gap);
		inline-size: 100%;
		--min-formula: min(100%, max(var(--min), (100% - (var(--column-count) - 1) * var(--grid-gap)) / var(--column-count)));
			> * {
				min-width: 0;
				max-width: 100%;
				overflow-wrap: break-word;
			}
	}
}
