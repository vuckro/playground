@if $option-auto-grid == on {
    // Control all auto grids
    // Remember to exclude one-off utilities like "grid--auto-rows"
    [class*="grid--auto"]:where(:not([class*="rows"])) {
		display: grid !important;
		grid-template-columns: var(--grid-template-columns);
		gap: var(--grid-gap);
		inline-size: 100%;
		// Variables for utility classes
		@if $auto-grid-flow-option == auto-fill {
			--grid-template-columns-any: var(--grid-template-columns-fill);
		} @else {
			--grid-template-columns-any: var(--grid-template-columns-fit);
		}
		--min-formula: min(100%, max(var(--min), (100% - (var(--column-count) - 1) * var(--grid-gap)) / var(--column-count)));
		--grid-template-columns-fit: repeat(auto-fit, minmax(var(--min-formula), 1fr));
		--grid-template-columns-fill: repeat(auto-fill, minmax(var(--min-formula), 1fr));
		--grid-template-columns-even-fit: repeat(auto-fit, minmax(var(--min-formula), 1fr) minmax(var(--min-formula), 1fr));
		--grid-template-columns-even-fill: repeat(auto-fill, minmax(var(--min-formula), 1fr) minmax(var(--min-formula), 1fr));
		> * {
			min-width: 0;
			max-width: 100%;
			overflow-wrap: break-word;
		}
    }

    // Support for auto grid with auto-grid-rows requires
    // listing every auto-grid class specifically

    $auto-grid-classes: null; // Initialize empty list
    @each $grid, $col-count in $auto-grids {
        $auto-grid-classes: append($auto-grid-classes, ".grid--#{$grid} ", comma);
    }

    :is(#{$auto-grid-classes}):where(.grid--auto-rows) {
        @include auto-grid;
    }

    // Generate Auto Grid Classes
    @each $grid, $col-count in $auto-grids {
        .grid--#{$grid} {
            @include auto-grid($col-count, $internal-use: true);
        }
    }

    // Generate Staggered Auto Grids
    @each $grid, $col-count in $auto-staggered-grids {
        .grid--#{$grid} {
			@include auto-grid($force-even-column-count: false);
            grid-template-columns: #{$col-count};
        }
    }
    // Stack auto grids at breakpoint
    @include breakpoint(#{$auto-staggered-grid-breakpoint}) {
        @each $grid, $col-count in $auto-staggered-grids {
            .grid--#{$grid} {
				@include auto-grid($force-even-column-count: false);
                --column-count: 1;
            }
        }
    }
	// Classes for changing auto-flow type on the fly
	.grid--auto-fill {
		--grid-template-columns: var(--grid-template-columns-fill);
	}
	.grid--auto-fit {
		--grid-template-columns: var(--grid-template-columns-fit);
	}
	// Utility class for forcing even columns or undoing even columns
	.grid--stack-even {
		@include breakpoint-up($auto-grid-force-even-column-count-breakpoint) {
			--grid-template-columns: var(--grid-template-columns-even);
			&.grid--auto-fill {
				--grid-template-columns: var(--grid-template-columns-even-fill);
			}
			&.grid--auto-fit {
				--grid-template-columns: var(--grid-template-columns-even-fit);
			}
		}
	}
	.grid--stack-any {
		--grid-template-columns: var(--grid-template-columns-any);

		&.grid--auto-fill {
			--grid-template-columns: var(--grid-template-columns-fill);
		}
		&.grid--auto-fit {
			--grid-template-columns: var(--grid-template-columns-fit);
		}
	}

	// Control breakpoint for "force even columns"
	@each $breakpoint, $value in $breakpoints {
		@include breakpoint($breakpoint) {
			.grid--stack-any-#{$breakpoint} {
				--grid-template-columns: var(--grid-template-columns-any);
				&.grid--auto-fill {
					--grid-template-columns: var(--grid-template-columns-any-fill);
				}
				&.grid--auto-fit {
					--grid-template-columns: var(--grid-template-columns-any-fit);
				}
			}
		}
		@include breakpoint-up($breakpoint) {
			.grid--stack-even-#{$breakpoint} {
				--grid-template-columns: var(--grid-template-columns-even);
				&.grid--auto-fill {
					--grid-template-columns: var(--grid-template-columns-even-fill);
				}
				&.grid--auto-fit {
					--grid-template-columns: var(--grid-template-columns-even-fit);
				}
			}
		}
	}
}
